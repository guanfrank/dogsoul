
stm32f407g-disc1-demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003d500  0800b960  0800b960  0001b960  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08048e60  08048e60  00060570  2**0
                  CONTENTS
  4 .ARM          00000008  08048e60  08048e60  00058e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08048e68  08048e68  00060570  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08048e68  08048e68  00058e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08048e6c  08048e6c  00058e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000570  20000000  08048e70  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012388  20000570  080493e0  00060570  2**4
                  ALLOC
 10 ._user_heap_stack 00000600  200128f8  080493e0  000628f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060570  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012eb7  00000000  00000000  000605a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a0  00000000  00000000  00073457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000a247  00000000  00000000  000768f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  00080b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  00081578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f26  00000000  00000000  000828c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016057  00000000  00000000  000a57e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdb8f  00000000  00000000  000bb83d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  001893cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b9c  00000000  00000000  0018949c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000570 	.word	0x20000570
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b948 	.word	0x0800b948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000574 	.word	0x20000574
 80001cc:	0800b948 	.word	0x0800b948

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_ldivmod>:
 8000618:	b97b      	cbnz	r3, 800063a <__aeabi_ldivmod+0x22>
 800061a:	b972      	cbnz	r2, 800063a <__aeabi_ldivmod+0x22>
 800061c:	2900      	cmp	r1, #0
 800061e:	bfbe      	ittt	lt
 8000620:	2000      	movlt	r0, #0
 8000622:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000626:	e006      	blt.n	8000636 <__aeabi_ldivmod+0x1e>
 8000628:	bf08      	it	eq
 800062a:	2800      	cmpeq	r0, #0
 800062c:	bf1c      	itt	ne
 800062e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000632:	f04f 30ff 	movne.w	r0, #4294967295
 8000636:	f000 bb1d 	b.w	8000c74 <__aeabi_idiv0>
 800063a:	f1ad 0c08 	sub.w	ip, sp, #8
 800063e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000642:	2900      	cmp	r1, #0
 8000644:	db09      	blt.n	800065a <__aeabi_ldivmod+0x42>
 8000646:	2b00      	cmp	r3, #0
 8000648:	db1a      	blt.n	8000680 <__aeabi_ldivmod+0x68>
 800064a:	f000 f881 	bl	8000750 <__udivmoddi4>
 800064e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000652:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000656:	b004      	add	sp, #16
 8000658:	4770      	bx	lr
 800065a:	4240      	negs	r0, r0
 800065c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	db1b      	blt.n	800069c <__aeabi_ldivmod+0x84>
 8000664:	f000 f874 	bl	8000750 <__udivmoddi4>
 8000668:	f8dd e004 	ldr.w	lr, [sp, #4]
 800066c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000670:	b004      	add	sp, #16
 8000672:	4240      	negs	r0, r0
 8000674:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000678:	4252      	negs	r2, r2
 800067a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800067e:	4770      	bx	lr
 8000680:	4252      	negs	r2, r2
 8000682:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000686:	f000 f863 	bl	8000750 <__udivmoddi4>
 800068a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800068e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000692:	b004      	add	sp, #16
 8000694:	4240      	negs	r0, r0
 8000696:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069a:	4770      	bx	lr
 800069c:	4252      	negs	r2, r2
 800069e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006a2:	f000 f855 	bl	8000750 <__udivmoddi4>
 80006a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006ae:	b004      	add	sp, #16
 80006b0:	4252      	negs	r2, r2
 80006b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80006b6:	4770      	bx	lr

080006b8 <__aeabi_uldivmod>:
 80006b8:	b953      	cbnz	r3, 80006d0 <__aeabi_uldivmod+0x18>
 80006ba:	b94a      	cbnz	r2, 80006d0 <__aeabi_uldivmod+0x18>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bf08      	it	eq
 80006c0:	2800      	cmpeq	r0, #0
 80006c2:	bf1c      	itt	ne
 80006c4:	f04f 31ff 	movne.w	r1, #4294967295
 80006c8:	f04f 30ff 	movne.w	r0, #4294967295
 80006cc:	f000 bad2 	b.w	8000c74 <__aeabi_idiv0>
 80006d0:	f1ad 0c08 	sub.w	ip, sp, #8
 80006d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006d8:	f000 f83a 	bl	8000750 <__udivmoddi4>
 80006dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006e4:	b004      	add	sp, #16
 80006e6:	4770      	bx	lr

080006e8 <__aeabi_f2lz>:
 80006e8:	ee07 0a90 	vmov	s15, r0
 80006ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80006f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f4:	d401      	bmi.n	80006fa <__aeabi_f2lz+0x12>
 80006f6:	f000 b80b 	b.w	8000710 <__aeabi_f2ulz>
 80006fa:	eef1 7a67 	vneg.f32	s15, s15
 80006fe:	b508      	push	{r3, lr}
 8000700:	ee17 0a90 	vmov	r0, s15
 8000704:	f000 f804 	bl	8000710 <__aeabi_f2ulz>
 8000708:	4240      	negs	r0, r0
 800070a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800070e:	bd08      	pop	{r3, pc}

08000710 <__aeabi_f2ulz>:
 8000710:	b5d0      	push	{r4, r6, r7, lr}
 8000712:	f7ff ff29 	bl	8000568 <__aeabi_f2d>
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <__aeabi_f2ulz+0x38>)
 8000718:	2200      	movs	r2, #0
 800071a:	4606      	mov	r6, r0
 800071c:	460f      	mov	r7, r1
 800071e:	f000 f97f 	bl	8000a20 <__aeabi_dmul>
 8000722:	f000 faa9 	bl	8000c78 <__aeabi_d2uiz>
 8000726:	4604      	mov	r4, r0
 8000728:	f7ff fefc 	bl	8000524 <__aeabi_ui2d>
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <__aeabi_f2ulz+0x3c>)
 800072e:	2200      	movs	r2, #0
 8000730:	f000 f976 	bl	8000a20 <__aeabi_dmul>
 8000734:	4602      	mov	r2, r0
 8000736:	460b      	mov	r3, r1
 8000738:	4630      	mov	r0, r6
 800073a:	4639      	mov	r1, r7
 800073c:	f7ff fdb4 	bl	80002a8 <__aeabi_dsub>
 8000740:	f000 fa9a 	bl	8000c78 <__aeabi_d2uiz>
 8000744:	4621      	mov	r1, r4
 8000746:	bdd0      	pop	{r4, r6, r7, pc}
 8000748:	3df00000 	.word	0x3df00000
 800074c:	41f00000 	.word	0x41f00000

08000750 <__udivmoddi4>:
 8000750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000754:	9d08      	ldr	r5, [sp, #32]
 8000756:	4604      	mov	r4, r0
 8000758:	468e      	mov	lr, r1
 800075a:	2b00      	cmp	r3, #0
 800075c:	d14d      	bne.n	80007fa <__udivmoddi4+0xaa>
 800075e:	428a      	cmp	r2, r1
 8000760:	4694      	mov	ip, r2
 8000762:	d969      	bls.n	8000838 <__udivmoddi4+0xe8>
 8000764:	fab2 f282 	clz	r2, r2
 8000768:	b152      	cbz	r2, 8000780 <__udivmoddi4+0x30>
 800076a:	fa01 f302 	lsl.w	r3, r1, r2
 800076e:	f1c2 0120 	rsb	r1, r2, #32
 8000772:	fa20 f101 	lsr.w	r1, r0, r1
 8000776:	fa0c fc02 	lsl.w	ip, ip, r2
 800077a:	ea41 0e03 	orr.w	lr, r1, r3
 800077e:	4094      	lsls	r4, r2
 8000780:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000784:	0c21      	lsrs	r1, r4, #16
 8000786:	fbbe f6f8 	udiv	r6, lr, r8
 800078a:	fa1f f78c 	uxth.w	r7, ip
 800078e:	fb08 e316 	mls	r3, r8, r6, lr
 8000792:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000796:	fb06 f107 	mul.w	r1, r6, r7
 800079a:	4299      	cmp	r1, r3
 800079c:	d90a      	bls.n	80007b4 <__udivmoddi4+0x64>
 800079e:	eb1c 0303 	adds.w	r3, ip, r3
 80007a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80007a6:	f080 811f 	bcs.w	80009e8 <__udivmoddi4+0x298>
 80007aa:	4299      	cmp	r1, r3
 80007ac:	f240 811c 	bls.w	80009e8 <__udivmoddi4+0x298>
 80007b0:	3e02      	subs	r6, #2
 80007b2:	4463      	add	r3, ip
 80007b4:	1a5b      	subs	r3, r3, r1
 80007b6:	b2a4      	uxth	r4, r4
 80007b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80007bc:	fb08 3310 	mls	r3, r8, r0, r3
 80007c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007c4:	fb00 f707 	mul.w	r7, r0, r7
 80007c8:	42a7      	cmp	r7, r4
 80007ca:	d90a      	bls.n	80007e2 <__udivmoddi4+0x92>
 80007cc:	eb1c 0404 	adds.w	r4, ip, r4
 80007d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80007d4:	f080 810a 	bcs.w	80009ec <__udivmoddi4+0x29c>
 80007d8:	42a7      	cmp	r7, r4
 80007da:	f240 8107 	bls.w	80009ec <__udivmoddi4+0x29c>
 80007de:	4464      	add	r4, ip
 80007e0:	3802      	subs	r0, #2
 80007e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007e6:	1be4      	subs	r4, r4, r7
 80007e8:	2600      	movs	r6, #0
 80007ea:	b11d      	cbz	r5, 80007f4 <__udivmoddi4+0xa4>
 80007ec:	40d4      	lsrs	r4, r2
 80007ee:	2300      	movs	r3, #0
 80007f0:	e9c5 4300 	strd	r4, r3, [r5]
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	428b      	cmp	r3, r1
 80007fc:	d909      	bls.n	8000812 <__udivmoddi4+0xc2>
 80007fe:	2d00      	cmp	r5, #0
 8000800:	f000 80ef 	beq.w	80009e2 <__udivmoddi4+0x292>
 8000804:	2600      	movs	r6, #0
 8000806:	e9c5 0100 	strd	r0, r1, [r5]
 800080a:	4630      	mov	r0, r6
 800080c:	4631      	mov	r1, r6
 800080e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000812:	fab3 f683 	clz	r6, r3
 8000816:	2e00      	cmp	r6, #0
 8000818:	d14a      	bne.n	80008b0 <__udivmoddi4+0x160>
 800081a:	428b      	cmp	r3, r1
 800081c:	d302      	bcc.n	8000824 <__udivmoddi4+0xd4>
 800081e:	4282      	cmp	r2, r0
 8000820:	f200 80f9 	bhi.w	8000a16 <__udivmoddi4+0x2c6>
 8000824:	1a84      	subs	r4, r0, r2
 8000826:	eb61 0303 	sbc.w	r3, r1, r3
 800082a:	2001      	movs	r0, #1
 800082c:	469e      	mov	lr, r3
 800082e:	2d00      	cmp	r5, #0
 8000830:	d0e0      	beq.n	80007f4 <__udivmoddi4+0xa4>
 8000832:	e9c5 4e00 	strd	r4, lr, [r5]
 8000836:	e7dd      	b.n	80007f4 <__udivmoddi4+0xa4>
 8000838:	b902      	cbnz	r2, 800083c <__udivmoddi4+0xec>
 800083a:	deff      	udf	#255	; 0xff
 800083c:	fab2 f282 	clz	r2, r2
 8000840:	2a00      	cmp	r2, #0
 8000842:	f040 8092 	bne.w	800096a <__udivmoddi4+0x21a>
 8000846:	eba1 010c 	sub.w	r1, r1, ip
 800084a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800084e:	fa1f fe8c 	uxth.w	lr, ip
 8000852:	2601      	movs	r6, #1
 8000854:	0c20      	lsrs	r0, r4, #16
 8000856:	fbb1 f3f7 	udiv	r3, r1, r7
 800085a:	fb07 1113 	mls	r1, r7, r3, r1
 800085e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000862:	fb0e f003 	mul.w	r0, lr, r3
 8000866:	4288      	cmp	r0, r1
 8000868:	d908      	bls.n	800087c <__udivmoddi4+0x12c>
 800086a:	eb1c 0101 	adds.w	r1, ip, r1
 800086e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000872:	d202      	bcs.n	800087a <__udivmoddi4+0x12a>
 8000874:	4288      	cmp	r0, r1
 8000876:	f200 80cb 	bhi.w	8000a10 <__udivmoddi4+0x2c0>
 800087a:	4643      	mov	r3, r8
 800087c:	1a09      	subs	r1, r1, r0
 800087e:	b2a4      	uxth	r4, r4
 8000880:	fbb1 f0f7 	udiv	r0, r1, r7
 8000884:	fb07 1110 	mls	r1, r7, r0, r1
 8000888:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800088c:	fb0e fe00 	mul.w	lr, lr, r0
 8000890:	45a6      	cmp	lr, r4
 8000892:	d908      	bls.n	80008a6 <__udivmoddi4+0x156>
 8000894:	eb1c 0404 	adds.w	r4, ip, r4
 8000898:	f100 31ff 	add.w	r1, r0, #4294967295
 800089c:	d202      	bcs.n	80008a4 <__udivmoddi4+0x154>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f200 80bb 	bhi.w	8000a1a <__udivmoddi4+0x2ca>
 80008a4:	4608      	mov	r0, r1
 80008a6:	eba4 040e 	sub.w	r4, r4, lr
 80008aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008ae:	e79c      	b.n	80007ea <__udivmoddi4+0x9a>
 80008b0:	f1c6 0720 	rsb	r7, r6, #32
 80008b4:	40b3      	lsls	r3, r6
 80008b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80008ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80008be:	fa20 f407 	lsr.w	r4, r0, r7
 80008c2:	fa01 f306 	lsl.w	r3, r1, r6
 80008c6:	431c      	orrs	r4, r3
 80008c8:	40f9      	lsrs	r1, r7
 80008ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008ce:	fa00 f306 	lsl.w	r3, r0, r6
 80008d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80008d6:	0c20      	lsrs	r0, r4, #16
 80008d8:	fa1f fe8c 	uxth.w	lr, ip
 80008dc:	fb09 1118 	mls	r1, r9, r8, r1
 80008e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008e4:	fb08 f00e 	mul.w	r0, r8, lr
 80008e8:	4288      	cmp	r0, r1
 80008ea:	fa02 f206 	lsl.w	r2, r2, r6
 80008ee:	d90b      	bls.n	8000908 <__udivmoddi4+0x1b8>
 80008f0:	eb1c 0101 	adds.w	r1, ip, r1
 80008f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008f8:	f080 8088 	bcs.w	8000a0c <__udivmoddi4+0x2bc>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f240 8085 	bls.w	8000a0c <__udivmoddi4+0x2bc>
 8000902:	f1a8 0802 	sub.w	r8, r8, #2
 8000906:	4461      	add	r1, ip
 8000908:	1a09      	subs	r1, r1, r0
 800090a:	b2a4      	uxth	r4, r4
 800090c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000910:	fb09 1110 	mls	r1, r9, r0, r1
 8000914:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000918:	fb00 fe0e 	mul.w	lr, r0, lr
 800091c:	458e      	cmp	lr, r1
 800091e:	d908      	bls.n	8000932 <__udivmoddi4+0x1e2>
 8000920:	eb1c 0101 	adds.w	r1, ip, r1
 8000924:	f100 34ff 	add.w	r4, r0, #4294967295
 8000928:	d26c      	bcs.n	8000a04 <__udivmoddi4+0x2b4>
 800092a:	458e      	cmp	lr, r1
 800092c:	d96a      	bls.n	8000a04 <__udivmoddi4+0x2b4>
 800092e:	3802      	subs	r0, #2
 8000930:	4461      	add	r1, ip
 8000932:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000936:	fba0 9402 	umull	r9, r4, r0, r2
 800093a:	eba1 010e 	sub.w	r1, r1, lr
 800093e:	42a1      	cmp	r1, r4
 8000940:	46c8      	mov	r8, r9
 8000942:	46a6      	mov	lr, r4
 8000944:	d356      	bcc.n	80009f4 <__udivmoddi4+0x2a4>
 8000946:	d053      	beq.n	80009f0 <__udivmoddi4+0x2a0>
 8000948:	b15d      	cbz	r5, 8000962 <__udivmoddi4+0x212>
 800094a:	ebb3 0208 	subs.w	r2, r3, r8
 800094e:	eb61 010e 	sbc.w	r1, r1, lr
 8000952:	fa01 f707 	lsl.w	r7, r1, r7
 8000956:	fa22 f306 	lsr.w	r3, r2, r6
 800095a:	40f1      	lsrs	r1, r6
 800095c:	431f      	orrs	r7, r3
 800095e:	e9c5 7100 	strd	r7, r1, [r5]
 8000962:	2600      	movs	r6, #0
 8000964:	4631      	mov	r1, r6
 8000966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096a:	f1c2 0320 	rsb	r3, r2, #32
 800096e:	40d8      	lsrs	r0, r3
 8000970:	fa0c fc02 	lsl.w	ip, ip, r2
 8000974:	fa21 f303 	lsr.w	r3, r1, r3
 8000978:	4091      	lsls	r1, r2
 800097a:	4301      	orrs	r1, r0
 800097c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000980:	fa1f fe8c 	uxth.w	lr, ip
 8000984:	fbb3 f0f7 	udiv	r0, r3, r7
 8000988:	fb07 3610 	mls	r6, r7, r0, r3
 800098c:	0c0b      	lsrs	r3, r1, #16
 800098e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000992:	fb00 f60e 	mul.w	r6, r0, lr
 8000996:	429e      	cmp	r6, r3
 8000998:	fa04 f402 	lsl.w	r4, r4, r2
 800099c:	d908      	bls.n	80009b0 <__udivmoddi4+0x260>
 800099e:	eb1c 0303 	adds.w	r3, ip, r3
 80009a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009a6:	d22f      	bcs.n	8000a08 <__udivmoddi4+0x2b8>
 80009a8:	429e      	cmp	r6, r3
 80009aa:	d92d      	bls.n	8000a08 <__udivmoddi4+0x2b8>
 80009ac:	3802      	subs	r0, #2
 80009ae:	4463      	add	r3, ip
 80009b0:	1b9b      	subs	r3, r3, r6
 80009b2:	b289      	uxth	r1, r1
 80009b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80009b8:	fb07 3316 	mls	r3, r7, r6, r3
 80009bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009c0:	fb06 f30e 	mul.w	r3, r6, lr
 80009c4:	428b      	cmp	r3, r1
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x28a>
 80009c8:	eb1c 0101 	adds.w	r1, ip, r1
 80009cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80009d0:	d216      	bcs.n	8000a00 <__udivmoddi4+0x2b0>
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d914      	bls.n	8000a00 <__udivmoddi4+0x2b0>
 80009d6:	3e02      	subs	r6, #2
 80009d8:	4461      	add	r1, ip
 80009da:	1ac9      	subs	r1, r1, r3
 80009dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009e0:	e738      	b.n	8000854 <__udivmoddi4+0x104>
 80009e2:	462e      	mov	r6, r5
 80009e4:	4628      	mov	r0, r5
 80009e6:	e705      	b.n	80007f4 <__udivmoddi4+0xa4>
 80009e8:	4606      	mov	r6, r0
 80009ea:	e6e3      	b.n	80007b4 <__udivmoddi4+0x64>
 80009ec:	4618      	mov	r0, r3
 80009ee:	e6f8      	b.n	80007e2 <__udivmoddi4+0x92>
 80009f0:	454b      	cmp	r3, r9
 80009f2:	d2a9      	bcs.n	8000948 <__udivmoddi4+0x1f8>
 80009f4:	ebb9 0802 	subs.w	r8, r9, r2
 80009f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009fc:	3801      	subs	r0, #1
 80009fe:	e7a3      	b.n	8000948 <__udivmoddi4+0x1f8>
 8000a00:	4646      	mov	r6, r8
 8000a02:	e7ea      	b.n	80009da <__udivmoddi4+0x28a>
 8000a04:	4620      	mov	r0, r4
 8000a06:	e794      	b.n	8000932 <__udivmoddi4+0x1e2>
 8000a08:	4640      	mov	r0, r8
 8000a0a:	e7d1      	b.n	80009b0 <__udivmoddi4+0x260>
 8000a0c:	46d0      	mov	r8, sl
 8000a0e:	e77b      	b.n	8000908 <__udivmoddi4+0x1b8>
 8000a10:	3b02      	subs	r3, #2
 8000a12:	4461      	add	r1, ip
 8000a14:	e732      	b.n	800087c <__udivmoddi4+0x12c>
 8000a16:	4630      	mov	r0, r6
 8000a18:	e709      	b.n	800082e <__udivmoddi4+0xde>
 8000a1a:	4464      	add	r4, ip
 8000a1c:	3802      	subs	r0, #2
 8000a1e:	e742      	b.n	80008a6 <__udivmoddi4+0x156>

08000a20 <__aeabi_dmul>:
 8000a20:	b570      	push	{r4, r5, r6, lr}
 8000a22:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a2e:	bf1d      	ittte	ne
 8000a30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a34:	ea94 0f0c 	teqne	r4, ip
 8000a38:	ea95 0f0c 	teqne	r5, ip
 8000a3c:	f000 f8de 	bleq	8000bfc <__aeabi_dmul+0x1dc>
 8000a40:	442c      	add	r4, r5
 8000a42:	ea81 0603 	eor.w	r6, r1, r3
 8000a46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000a4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000a4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000a52:	bf18      	it	ne
 8000a54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a60:	d038      	beq.n	8000ad4 <__aeabi_dmul+0xb4>
 8000a62:	fba0 ce02 	umull	ip, lr, r0, r2
 8000a66:	f04f 0500 	mov.w	r5, #0
 8000a6a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000a6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000a72:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000a76:	f04f 0600 	mov.w	r6, #0
 8000a7a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000a7e:	f09c 0f00 	teq	ip, #0
 8000a82:	bf18      	it	ne
 8000a84:	f04e 0e01 	orrne.w	lr, lr, #1
 8000a88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000a8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000a90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000a94:	d204      	bcs.n	8000aa0 <__aeabi_dmul+0x80>
 8000a96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000a9a:	416d      	adcs	r5, r5
 8000a9c:	eb46 0606 	adc.w	r6, r6, r6
 8000aa0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000aa4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000aa8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000aac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000ab0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000ab4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000ab8:	bf88      	it	hi
 8000aba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000abe:	d81e      	bhi.n	8000afe <__aeabi_dmul+0xde>
 8000ac0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000aca:	f150 0000 	adcs.w	r0, r0, #0
 8000ace:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
 8000ad4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000ad8:	ea46 0101 	orr.w	r1, r6, r1
 8000adc:	ea40 0002 	orr.w	r0, r0, r2
 8000ae0:	ea81 0103 	eor.w	r1, r1, r3
 8000ae4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000ae8:	bfc2      	ittt	gt
 8000aea:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000af2:	bd70      	popgt	{r4, r5, r6, pc}
 8000af4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af8:	f04f 0e00 	mov.w	lr, #0
 8000afc:	3c01      	subs	r4, #1
 8000afe:	f300 80ab 	bgt.w	8000c58 <__aeabi_dmul+0x238>
 8000b02:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000b06:	bfde      	ittt	le
 8000b08:	2000      	movle	r0, #0
 8000b0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000b0e:	bd70      	pople	{r4, r5, r6, pc}
 8000b10:	f1c4 0400 	rsb	r4, r4, #0
 8000b14:	3c20      	subs	r4, #32
 8000b16:	da35      	bge.n	8000b84 <__aeabi_dmul+0x164>
 8000b18:	340c      	adds	r4, #12
 8000b1a:	dc1b      	bgt.n	8000b54 <__aeabi_dmul+0x134>
 8000b1c:	f104 0414 	add.w	r4, r4, #20
 8000b20:	f1c4 0520 	rsb	r5, r4, #32
 8000b24:	fa00 f305 	lsl.w	r3, r0, r5
 8000b28:	fa20 f004 	lsr.w	r0, r0, r4
 8000b2c:	fa01 f205 	lsl.w	r2, r1, r5
 8000b30:	ea40 0002 	orr.w	r0, r0, r2
 8000b34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000b38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000b3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b40:	fa21 f604 	lsr.w	r6, r1, r4
 8000b44:	eb42 0106 	adc.w	r1, r2, r6
 8000b48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b4c:	bf08      	it	eq
 8000b4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b52:	bd70      	pop	{r4, r5, r6, pc}
 8000b54:	f1c4 040c 	rsb	r4, r4, #12
 8000b58:	f1c4 0520 	rsb	r5, r4, #32
 8000b5c:	fa00 f304 	lsl.w	r3, r0, r4
 8000b60:	fa20 f005 	lsr.w	r0, r0, r5
 8000b64:	fa01 f204 	lsl.w	r2, r1, r4
 8000b68:	ea40 0002 	orr.w	r0, r0, r2
 8000b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000b74:	f141 0100 	adc.w	r1, r1, #0
 8000b78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000b7c:	bf08      	it	eq
 8000b7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000b82:	bd70      	pop	{r4, r5, r6, pc}
 8000b84:	f1c4 0520 	rsb	r5, r4, #32
 8000b88:	fa00 f205 	lsl.w	r2, r0, r5
 8000b8c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000b90:	fa20 f304 	lsr.w	r3, r0, r4
 8000b94:	fa01 f205 	lsl.w	r2, r1, r5
 8000b98:	ea43 0302 	orr.w	r3, r3, r2
 8000b9c:	fa21 f004 	lsr.w	r0, r1, r4
 8000ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000ba4:	fa21 f204 	lsr.w	r2, r1, r4
 8000ba8:	ea20 0002 	bic.w	r0, r0, r2
 8000bac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000bb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000bb4:	bf08      	it	eq
 8000bb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000bba:	bd70      	pop	{r4, r5, r6, pc}
 8000bbc:	f094 0f00 	teq	r4, #0
 8000bc0:	d10f      	bne.n	8000be2 <__aeabi_dmul+0x1c2>
 8000bc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000bc6:	0040      	lsls	r0, r0, #1
 8000bc8:	eb41 0101 	adc.w	r1, r1, r1
 8000bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bd0:	bf08      	it	eq
 8000bd2:	3c01      	subeq	r4, #1
 8000bd4:	d0f7      	beq.n	8000bc6 <__aeabi_dmul+0x1a6>
 8000bd6:	ea41 0106 	orr.w	r1, r1, r6
 8000bda:	f095 0f00 	teq	r5, #0
 8000bde:	bf18      	it	ne
 8000be0:	4770      	bxne	lr
 8000be2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000be6:	0052      	lsls	r2, r2, #1
 8000be8:	eb43 0303 	adc.w	r3, r3, r3
 8000bec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000bf0:	bf08      	it	eq
 8000bf2:	3d01      	subeq	r5, #1
 8000bf4:	d0f7      	beq.n	8000be6 <__aeabi_dmul+0x1c6>
 8000bf6:	ea43 0306 	orr.w	r3, r3, r6
 8000bfa:	4770      	bx	lr
 8000bfc:	ea94 0f0c 	teq	r4, ip
 8000c00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c04:	bf18      	it	ne
 8000c06:	ea95 0f0c 	teqne	r5, ip
 8000c0a:	d00c      	beq.n	8000c26 <__aeabi_dmul+0x206>
 8000c0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c10:	bf18      	it	ne
 8000c12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c16:	d1d1      	bne.n	8000bbc <__aeabi_dmul+0x19c>
 8000c18:	ea81 0103 	eor.w	r1, r1, r3
 8000c1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
 8000c26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c2a:	bf06      	itte	eq
 8000c2c:	4610      	moveq	r0, r2
 8000c2e:	4619      	moveq	r1, r3
 8000c30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c34:	d019      	beq.n	8000c6a <__aeabi_dmul+0x24a>
 8000c36:	ea94 0f0c 	teq	r4, ip
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dmul+0x222>
 8000c3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000c40:	d113      	bne.n	8000c6a <__aeabi_dmul+0x24a>
 8000c42:	ea95 0f0c 	teq	r5, ip
 8000c46:	d105      	bne.n	8000c54 <__aeabi_dmul+0x234>
 8000c48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000c4c:	bf1c      	itt	ne
 8000c4e:	4610      	movne	r0, r2
 8000c50:	4619      	movne	r1, r3
 8000c52:	d10a      	bne.n	8000c6a <__aeabi_dmul+0x24a>
 8000c54:	ea81 0103 	eor.w	r1, r1, r3
 8000c58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000c5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	bd70      	pop	{r4, r5, r6, pc}
 8000c6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000c6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000c72:	bd70      	pop	{r4, r5, r6, pc}

08000c74 <__aeabi_idiv0>:
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2uiz>:
 8000c78:	004a      	lsls	r2, r1, #1
 8000c7a:	d211      	bcs.n	8000ca0 <__aeabi_d2uiz+0x28>
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d211      	bcs.n	8000ca6 <__aeabi_d2uiz+0x2e>
 8000c82:	d50d      	bpl.n	8000ca0 <__aeabi_d2uiz+0x28>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d40e      	bmi.n	8000cac <__aeabi_d2uiz+0x34>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000caa:	d102      	bne.n	8000cb2 <__aeabi_d2uiz+0x3a>
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	4770      	bx	lr
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000cb8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000cba:	4604      	mov	r4, r0
{
 8000cbc:	b08a      	sub	sp, #40	; 0x28
  LEDx_GPIO_CLK_ENABLE(Led);
 8000cbe:	bb08      	cbnz	r0, 8000d04 <BSP_LED_Init+0x4c>
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <BSP_LED_Init+0xa8>)
 8000cc2:	9001      	str	r0, [sp, #4]
 8000cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc6:	f042 0208 	orr.w	r2, r2, #8
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	9301      	str	r3, [sp, #4]
 8000cd4:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000cd6:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <BSP_LED_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000cd8:	4e23      	ldr	r6, [pc, #140]	; (8000d68 <BSP_LED_Init+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000cda:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000cde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e9cd 5305 	strd	r5, r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000cea:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000cec:	2302      	movs	r3, #2
 8000cee:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000cf0:	f000 fd18 	bl	8001724 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000cf4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	f000 fe32 	bl	8001964 <HAL_GPIO_WritePin>
}
 8000d00:	b00a      	add	sp, #40	; 0x28
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000d04:	2801      	cmp	r0, #1
 8000d06:	d010      	beq.n	8000d2a <BSP_LED_Init+0x72>
 8000d08:	2802      	cmp	r0, #2
 8000d0a:	d01b      	beq.n	8000d44 <BSP_LED_Init+0x8c>
 8000d0c:	2803      	cmp	r0, #3
 8000d0e:	d1e2      	bne.n	8000cd6 <BSP_LED_Init+0x1e>
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <BSP_LED_Init+0xa8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	9204      	str	r2, [sp, #16]
 8000d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d18:	f042 0208 	orr.w	r2, r2, #8
 8000d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0308 	and.w	r3, r3, #8
 8000d24:	9304      	str	r3, [sp, #16]
 8000d26:	9b04      	ldr	r3, [sp, #16]
 8000d28:	e7d5      	b.n	8000cd6 <BSP_LED_Init+0x1e>
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <BSP_LED_Init+0xa8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	9202      	str	r2, [sp, #8]
 8000d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d32:	f042 0208 	orr.w	r2, r2, #8
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	9302      	str	r3, [sp, #8]
 8000d40:	9b02      	ldr	r3, [sp, #8]
 8000d42:	e7c8      	b.n	8000cd6 <BSP_LED_Init+0x1e>
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <BSP_LED_Init+0xa8>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	9203      	str	r2, [sp, #12]
 8000d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4c:	f042 0208 	orr.w	r2, r2, #8
 8000d50:	631a      	str	r2, [r3, #48]	; 0x30
 8000d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	9303      	str	r3, [sp, #12]
 8000d5a:	9b03      	ldr	r3, [sp, #12]
 8000d5c:	e7bb      	b.n	8000cd6 <BSP_LED_Init+0x1e>
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800
 8000d64:	0800b998 	.word	0x0800b998
 8000d68:	20000400 	.word	0x20000400

08000d6c <BSP_LED_On>:
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000d6c:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <BSP_LED_On+0x14>)
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <BSP_LED_On+0x18>)
 8000d70:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8000d74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f000 bdf3 	b.w	8001964 <HAL_GPIO_WritePin>
 8000d7e:	bf00      	nop
 8000d80:	0800b998 	.word	0x0800b998
 8000d84:	20000400 	.word	0x20000400

08000d88 <BSP_LED_Off>:
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <BSP_LED_Off+0x14>)
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <BSP_LED_Off+0x18>)
 8000d8c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8000d90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000d94:	2200      	movs	r2, #0
 8000d96:	f000 bde5 	b.w	8001964 <HAL_GPIO_WritePin>
 8000d9a:	bf00      	nop
 8000d9c:	0800b998 	.word	0x0800b998
 8000da0:	20000400 	.word	0x20000400

08000da4 <BSP_LED_Toggle>:
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000da4:	4a03      	ldr	r2, [pc, #12]	; (8000db4 <BSP_LED_Toggle+0x10>)
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <BSP_LED_Toggle+0x14>)
 8000da8:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 8000dac:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8000db0:	f000 bddc 	b.w	800196c <HAL_GPIO_TogglePin>
 8000db4:	0800b998 	.word	0x0800b998
 8000db8:	20000400 	.word	0x20000400

08000dbc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <HAL_I2S_TxCpltCallback>:
{
 8000dc0:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8000dc2:	6802      	ldr	r2, [r0, #0]
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_I2S_TxCpltCallback+0x14>)
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d000      	beq.n	8000dcc <HAL_I2S_TxCpltCallback+0xc>
}
 8000dca:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8000dcc:	f7ff fff6 	bl	8000dbc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8000dd0:	bd08      	pop	{r3, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40003c00 	.word	0x40003c00

08000dd8 <BSP_AUDIO_OUT_Error_CallBack>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8000ddc:	b508      	push	{r3, lr}
 8000dde:	4603      	mov	r3, r0
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 8000de0:	b28a      	uxth	r2, r1
 8000de2:	4803      	ldr	r0, [pc, #12]	; (8000df0 <BSP_AUDIO_IN_Record+0x14>)
 8000de4:	4619      	mov	r1, r3
 8000de6:	f000 fe67 	bl	8001ab8 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8000dea:	2000      	movs	r0, #0
 8000dec:	bd08      	pop	{r3, pc}
 8000dee:	bf00      	nop
 8000df0:	20000634 	.word	0x20000634

08000df4 <BSP_AUDIO_IN_SetVolume>:
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_SetVolume(uint8_t Volume)
{
  /* Set the Global variable AudioInVolume */
  AudioInVolume = Volume; 
 8000df4:	4b01      	ldr	r3, [pc, #4]	; (8000dfc <BSP_AUDIO_IN_SetVolume+0x8>)
 8000df6:	8018      	strh	r0, [r3, #0]
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK;
}
 8000df8:	2000      	movs	r0, #0
 8000dfa:	4770      	bx	lr
 8000dfc:	20000410 	.word	0x20000410

08000e00 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8000e00:	b510      	push	{r4, lr}
 8000e02:	b0a0      	sub	sp, #128	; 0x80
 8000e04:	460c      	mov	r4, r1
 8000e06:	3802      	subs	r0, #2
 8000e08:	466a      	mov	r2, sp
 8000e0a:	f10d 0c80 	add.w	ip, sp, #128	; 0x80
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 8000e0e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8000e12:	ba5b      	rev16	r3, r3
 8000e14:	f822 3b02 	strh.w	r3, [r2], #2
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8000e18:	4594      	cmp	ip, r2
 8000e1a:	d1f8      	bne.n	8000e0e <BSP_AUDIO_IN_PDMToPCM+0xe>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8000e1c:	4621      	mov	r1, r4
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <BSP_AUDIO_IN_PDMToPCM+0x40>)
 8000e20:	4668      	mov	r0, sp
 8000e22:	f004 fa89 	bl	8005338 <PDM_Filter>
  }
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	1ca1      	adds	r1, r4, #2
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8000e2a:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 8000e2e:	f821 2023 	strh.w	r2, [r1, r3, lsl #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8000e32:	3301      	adds	r3, #1
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	d1f8      	bne.n	8000e2a <BSP_AUDIO_IN_PDMToPCM+0x2a>
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 8000e38:	2000      	movs	r0, #0
 8000e3a:	b020      	add	sp, #128	; 0x80
 8000e3c:	bd10      	pop	{r4, pc}
 8000e3e:	bf00      	nop
 8000e40:	2000059c 	.word	0x2000059c

08000e44 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 8000e44:	b510      	push	{r4, lr}
 8000e46:	b084      	sub	sp, #16
  RCC_PeriphCLKInitTypeDef rccclkinit;

  /*Enable PLLI2S clock*/
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000e48:	4668      	mov	r0, sp
{
 8000e4a:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000e4c:	f001 fc04 	bl	8002658 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 8000e50:	0763      	lsls	r3, r4, #29
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000e52:	f04f 0101 	mov.w	r1, #1
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8000e56:	bf07      	ittee	eq
 8000e58:	22c0      	moveq	r2, #192	; 0xc0
    rccclkinit.PLLI2S.PLLI2SR = 6;
 8000e5a:	2306      	moveq	r3, #6
  {
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8000e5c:	f44f 7291 	movne.w	r2, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8000e60:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000e62:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8000e64:	e9cd 1200 	strd	r1, r2, [sp]
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8000e68:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000e6a:	f001 fb55 	bl	8002518 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8000e6e:	b004      	add	sp, #16
 8000e70:	bd10      	pop	{r4, pc}
 8000e72:	bf00      	nop

08000e74 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8000e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e78:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 8000e7a:	4c39      	ldr	r4, [pc, #228]	; (8000f60 <BSP_AUDIO_IN_MspInit+0xec>)
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	9501      	str	r5, [sp, #4]
 8000e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e86:	6423      	str	r3, [r4, #64]	; 0x40
 8000e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	9301      	str	r3, [sp, #4]
 8000e90:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 8000e92:	9502      	str	r5, [sp, #8]
 8000e94:	6b23      	ldr	r3, [r4, #48]	; 0x30
  I2S2_MOSI_GPIO_CLK_ENABLE();
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000e96:	2202      	movs	r2, #2
  I2S2_SCK_GPIO_CLK_ENABLE();
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	9302      	str	r3, [sp, #8]
 8000ea2:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8000ea4:	9503      	str	r5, [sp, #12]
 8000ea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6323      	str	r3, [r4, #48]	; 0x30
 8000eae:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000eb0:	9206      	str	r2, [sp, #24]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8000eb2:	f003 0304 	and.w	r3, r3, #4
{
 8000eb6:	4606      	mov	r6, r0
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8000eb8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000eba:	482a      	ldr	r0, [pc, #168]	; (8000f64 <BSP_AUDIO_IN_MspInit+0xf0>)
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8000ebc:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8000ebe:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000ec2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 8000ec4:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000ec8:	e9cd 5207 	strd	r5, r2, [sp, #28]
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 8000ecc:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8000ece:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000ed2:	f000 fc27 	bl	8001724 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 8000ed6:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8000ed8:	a905      	add	r1, sp, #20
 8000eda:	4823      	ldr	r0, [pc, #140]	; (8000f68 <BSP_AUDIO_IN_MspInit+0xf4>)
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 8000edc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 8000ede:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8000ee2:	f000 fc1f 	bl	8001724 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 8000ee6:	9504      	str	r5, [sp, #16]
 8000ee8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 8000eea:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 8000eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef0:	6323      	str	r3, [r4, #48]	; 0x30
 8000ef2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef8:	9304      	str	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <BSP_AUDIO_IN_MspInit+0xf8>)
  I2S2_DMAx_CLK_ENABLE();
 8000efc:	9904      	ldr	r1, [sp, #16]
  if(hi2s->Instance == I2S2)
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d00a      	beq.n	8000f18 <BSP_AUDIO_IN_MspInit+0xa4>
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	210f      	movs	r1, #15
 8000f06:	200e      	movs	r0, #14
 8000f08:	f000 f944 	bl	8001194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8000f0c:	200e      	movs	r0, #14
 8000f0e:	f000 f97f 	bl	8001210 <HAL_NVIC_EnableIRQ>
}
 8000f12:	b00a      	add	sp, #40	; 0x28
 8000f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8000f18:	4c15      	ldr	r4, [pc, #84]	; (8000f70 <BSP_AUDIO_IN_MspInit+0xfc>)
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8000f1a:	63f4      	str	r4, [r6, #60]	; 0x3c
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8000f1c:	f503 330a 	add.w	r3, r3, #141312	; 0x22800
 8000f20:	3358      	adds	r3, #88	; 0x58
 8000f22:	6023      	str	r3, [r4, #0]
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 8000f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 8000f28:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8000f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f30:	e9c4 1306 	strd	r1, r3, [r4, #24]
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 8000f34:	6162      	str	r2, [r4, #20]
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000f36:	2303      	movs	r3, #3
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000f38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    HAL_DMA_DeInit(&hdma_i2sRx);
 8000f3c:	4620      	mov	r0, r4
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000f3e:	e9c4 5501 	strd	r5, r5, [r4, #4]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8000f42:	e9c4 5703 	strd	r5, r7, [r4, #12]
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8000f46:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8000f4a:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8000f4c:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000f4e:	6222      	str	r2, [r4, #32]
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000f50:	62a3      	str	r3, [r4, #40]	; 0x28
    HAL_DMA_DeInit(&hdma_i2sRx);
 8000f52:	f000 fa1d 	bl	8001390 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sRx);      
 8000f56:	4620      	mov	r0, r4
 8000f58:	f000 f982 	bl	8001260 <HAL_DMA_Init>
 8000f5c:	e7d1      	b.n	8000f02 <BSP_AUDIO_IN_MspInit+0x8e>
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40003800 	.word	0x40003800
 8000f70:	200006c4 	.word	0x200006c4

08000f74 <BSP_AUDIO_IN_Init>:
{
 8000f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f78:	4606      	mov	r6, r0
 8000f7a:	b085      	sub	sp, #20
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8000f7c:	4631      	mov	r1, r6
 8000f7e:	4833      	ldr	r0, [pc, #204]	; (800104c <BSP_AUDIO_IN_Init+0xd8>)
{
 8000f80:	4617      	mov	r7, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8000f82:	2200      	movs	r2, #0
 8000f84:	f7ff ff5e 	bl	8000e44 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
  uint32_t index = 0;

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8000f88:	4a31      	ldr	r2, [pc, #196]	; (8001050 <BSP_AUDIO_IN_Init+0xdc>)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9303      	str	r3, [sp, #12]
 8000f8e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000f90:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000f94:	6311      	str	r1, [r2, #48]	; 0x30
 8000f96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f98:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000f9c:	9203      	str	r2, [sp, #12]
 8000f9e:	9a03      	ldr	r2, [sp, #12]

  for(index = 0; index < ChnlNbrIn; index++)
 8000fa0:	b36f      	cbz	r7, 8000ffe <BSP_AUDIO_IN_Init+0x8a>
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8000fa2:	4a2c      	ldr	r2, [pc, #176]	; (8001054 <BSP_AUDIO_IN_Init+0xe0>)
 8000fa4:	4c2c      	ldr	r4, [pc, #176]	; (8001058 <BSP_AUDIO_IN_Init+0xe4>)
 8000fa6:	4d2d      	ldr	r5, [pc, #180]	; (800105c <BSP_AUDIO_IN_Init+0xe8>)
  for(index = 0; index < ChnlNbrIn; index++)
 8000fa8:	469b      	mov	fp, r3
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8000faa:	fba2 3806 	umull	r3, r8, r2, r6
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8000fae:	b2bb      	uxth	r3, r7
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8000fb0:	f3c8 188f 	ubfx	r8, r8, #6, #16
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8000fb4:	9301      	str	r3, [sp, #4]
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8000fb6:	46da      	mov	sl, fp
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8000fb8:	f04f 0902 	mov.w	r9, #2
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <BSP_AUDIO_IN_Init+0xec>)
 8000fbe:	6063      	str	r3, [r4, #4]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8000fc0:	9b01      	ldr	r3, [sp, #4]
 8000fc2:	8123      	strh	r3, [r4, #8]
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8000fc4:	f8a4 a000 	strh.w	sl, [r4]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8000fc8:	f8a4 a002 	strh.w	sl, [r4, #2]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8000fcc:	f8a4 900a 	strh.w	r9, [r4, #10]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f004 f835 	bl	8005040 <PDM_Filter_Init>
    PDM_FilterConfig[index].mic_gain = 24;
 8000fd6:	f04f 0c18 	mov.w	ip, #24
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8000fda:	f8a5 8002 	strh.w	r8, [r5, #2]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8000fde:	f8a5 9000 	strh.w	r9, [r5]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	4620      	mov	r0, r4
    PDM_FilterConfig[index].mic_gain = 24;
 8000fe6:	f8a5 c004 	strh.w	ip, [r5, #4]
  for(index = 0; index < ChnlNbrIn; index++)
 8000fea:	f10b 0b01 	add.w	fp, fp, #1
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8000fee:	f004 f8b1 	bl	8005154 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 8000ff2:	455f      	cmp	r7, fp
 8000ff4:	f104 044c 	add.w	r4, r4, #76	; 0x4c
 8000ff8:	f105 0506 	add.w	r5, r5, #6
 8000ffc:	d1de      	bne.n	8000fbc <BSP_AUDIO_IN_Init+0x48>
  hAudioInI2s.Instance = I2S2;
 8000ffe:	4c13      	ldr	r4, [pc, #76]	; (800104c <BSP_AUDIO_IN_Init+0xd8>)
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <BSP_AUDIO_IN_Init+0xf0>)
 8001002:	6023      	str	r3, [r4, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 8001004:	4620      	mov	r0, r4
 8001006:	f000 fe7d 	bl	8001d04 <HAL_I2S_GetState>
 800100a:	b1c8      	cbz	r0, 8001040 <BSP_AUDIO_IN_Init+0xcc>
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S2_Init(uint32_t AudioFreq)
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <BSP_AUDIO_IN_Init+0xf0>)
 800100e:	6023      	str	r3, [r4, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001010:	69da      	ldr	r2, [r3, #28]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;

  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001012:	480e      	ldr	r0, [pc, #56]	; (800104c <BSP_AUDIO_IN_Init+0xd8>)
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8001014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001018:	61da      	str	r2, [r3, #28]
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 800101a:	f44f 7340 	mov.w	r3, #768	; 0x300
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 800101e:	2500      	movs	r5, #0
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8001020:	2208      	movs	r2, #8
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 8001022:	6063      	str	r3, [r4, #4]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8001024:	0076      	lsls	r6, r6, #1
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001026:	2320      	movs	r3, #32
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8001028:	e9c4 2506 	strd	r2, r5, [r4, #24]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 800102c:	e9c4 5503 	strd	r5, r5, [r4, #12]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8001030:	6166      	str	r6, [r4, #20]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8001032:	60a3      	str	r3, [r4, #8]
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8001034:	f000 fca6 	bl	8001984 <HAL_I2S_Init>
}
 8001038:	4628      	mov	r0, r5
 800103a:	b005      	add	sp, #20
 800103c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 8001040:	4601      	mov	r1, r0
 8001042:	4620      	mov	r0, r4
 8001044:	f7ff ff16 	bl	8000e74 <BSP_AUDIO_IN_MspInit>
 8001048:	e7e0      	b.n	800100c <BSP_AUDIO_IN_Init+0x98>
 800104a:	bf00      	nop
 800104c:	20000634 	.word	0x20000634
 8001050:	40023800 	.word	0x40023800
 8001054:	10624dd3 	.word	0x10624dd3
 8001058:	2000059c 	.word	0x2000059c
 800105c:	20000590 	.word	0x20000590
 8001060:	7e809d48 	.word	0x7e809d48
 8001064:	40003800 	.word	0x40003800

08001068 <HAL_I2S_RxCpltCallback>:
{
 8001068:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800106a:	f001 ffb7 	bl	8002fdc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800106e:	bd08      	pop	{r3, pc}

08001070 <HAL_I2S_RxHalfCpltCallback>:
{
 8001070:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8001072:	f001 ffe5 	bl	8003040 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8001076:	bd08      	pop	{r3, pc}

08001078 <BSP_AUDIO_IN_Error_Callback>:
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 800107c:	4a08      	ldr	r2, [pc, #32]	; (80010a0 <HAL_I2S_ErrorCallback+0x24>)
 800107e:	6803      	ldr	r3, [r0, #0]
 8001080:	4293      	cmp	r3, r2
{
 8001082:	b510      	push	{r4, lr}
  if(hi2s->Instance == I2S3)
 8001084:	d006      	beq.n	8001094 <HAL_I2S_ErrorCallback+0x18>
  {
    BSP_AUDIO_OUT_Error_CallBack();
  }
  if(hi2s->Instance == I2S2)
 8001086:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_I2S_ErrorCallback+0x28>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d000      	beq.n	800108e <HAL_I2S_ErrorCallback+0x12>
  {
    BSP_AUDIO_IN_Error_Callback();
  }
}
 800108c:	bd10      	pop	{r4, pc}
    BSP_AUDIO_IN_Error_Callback();
 800108e:	f7ff fff3 	bl	8001078 <BSP_AUDIO_IN_Error_Callback>
}
 8001092:	bd10      	pop	{r4, pc}
 8001094:	4604      	mov	r4, r0
    BSP_AUDIO_OUT_Error_CallBack();
 8001096:	f7ff fe9f 	bl	8000dd8 <BSP_AUDIO_OUT_Error_CallBack>
  if(hi2s->Instance == I2S2)
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	e7f3      	b.n	8001086 <HAL_I2S_ErrorCallback+0xa>
 800109e:	bf00      	nop
 80010a0:	40003c00 	.word	0x40003c00
 80010a4:	40003800 	.word	0x40003800

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_InitTick+0x3c>)
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_InitTick+0x40>)
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
{
 80010b2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b8:	fbb0 f0f2 	udiv	r0, r0, r2
 80010bc:	fbb3 f0f0 	udiv	r0, r3, r0
 80010c0:	f000 f8b4 	bl	800122c <HAL_SYSTICK_Config>
 80010c4:	b908      	cbnz	r0, 80010ca <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	2d0f      	cmp	r5, #15
 80010c8:	d901      	bls.n	80010ce <HAL_InitTick+0x26>
    return HAL_ERROR;
 80010ca:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010cc:	bd38      	pop	{r3, r4, r5, pc}
 80010ce:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	4602      	mov	r2, r0
 80010d2:	4629      	mov	r1, r5
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295
 80010d8:	f000 f85c 	bl	8001194 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_InitTick+0x44>)
 80010de:	4620      	mov	r0, r4
 80010e0:	601d      	str	r5, [r3, #0]
}
 80010e2:	bd38      	pop	{r3, r4, r5, pc}
 80010e4:	20000412 	.word	0x20000412
 80010e8:	20000420 	.word	0x20000420
 80010ec:	20000414 	.word	0x20000414

080010f0 <HAL_Init>:
{
 80010f0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_Init+0x28>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001102:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001104:	2003      	movs	r0, #3
 8001106:	f000 f833 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800110a:	200f      	movs	r0, #15
 800110c:	f7ff ffcc 	bl	80010a8 <HAL_InitTick>
  HAL_MspInit();
 8001110:	f002 f856 	bl	80031c0 <HAL_MspInit>
}
 8001114:	2000      	movs	r0, #0
 8001116:	bd08      	pop	{r3, pc}
 8001118:	40023c00 	.word	0x40023c00

0800111c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <HAL_IncTick+0x10>)
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_IncTick+0x14>)
 8001120:	6811      	ldr	r1, [r2, #0]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	440b      	add	r3, r1
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000724 	.word	0x20000724
 8001130:	20000412 	.word	0x20000412

08001134 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001134:	4b01      	ldr	r3, [pc, #4]	; (800113c <HAL_GetTick+0x8>)
 8001136:	6818      	ldr	r0, [r3, #0]
}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000724 	.word	0x20000724

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff fff6 	bl	8001134 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001148:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800114a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800114c:	d002      	beq.n	8001154 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <HAL_Delay+0x20>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	1b43      	subs	r3, r0, r5
 800115a:	42a3      	cmp	r3, r4
 800115c:	d3fa      	bcc.n	8001154 <HAL_Delay+0x14>
  {
  }
}
 800115e:	bd38      	pop	{r3, r4, r5, pc}
 8001160:	20000412 	.word	0x20000412

08001164 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <HAL_GetREVID+0x8>)
 8001166:	6818      	ldr	r0, [r3, #0]
}
 8001168:	0c00      	lsrs	r0, r0, #16
 800116a:	4770      	bx	lr
 800116c:	e0042000 	.word	0xe0042000

08001170 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001172:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001174:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800117a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800117e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001180:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001182:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800118a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_NVIC_SetPriority+0x74>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119e:	f1c3 0e07 	rsb	lr, r3, #7
 80011a2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011aa:	bf28      	it	cs
 80011ac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b0:	f1bc 0f06 	cmp.w	ip, #6
 80011b4:	d91b      	bls.n	80011ee <HAL_NVIC_SetPriority+0x5a>
 80011b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 3cff 	mov.w	ip, #4294967295
 80011bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80011c0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 3cff 	mov.w	ip, #4294967295
 80011c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80011cc:	ea21 010c 	bic.w	r1, r1, ip
 80011d0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80011d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80011d8:	db0c      	blt.n	80011f4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80011de:	0109      	lsls	r1, r1, #4
 80011e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80011e4:	b2c9      	uxtb	r1, r1
 80011e6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ee:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f0:	4613      	mov	r3, r2
 80011f2:	e7e7      	b.n	80011c4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_NVIC_SetPriority+0x78>)
 80011f6:	f000 000f 	and.w	r0, r0, #15
 80011fa:	0109      	lsls	r1, r1, #4
 80011fc:	4403      	add	r3, r0
 80011fe:	b2c9      	uxtb	r1, r1
 8001200:	7619      	strb	r1, [r3, #24]
 8001202:	f85d fb04 	ldr.w	pc, [sp], #4
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00
 800120c:	e000ecfc 	.word	0xe000ecfc

08001210 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001210:	2800      	cmp	r0, #0
 8001212:	db08      	blt.n	8001226 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001214:	0941      	lsrs	r1, r0, #5
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_NVIC_EnableIRQ+0x18>)
 8001218:	f000 001f 	and.w	r0, r0, #31
 800121c:	2301      	movs	r3, #1
 800121e:	fa03 f000 	lsl.w	r0, r3, r0
 8001222:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100

0800122c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	3801      	subs	r0, #1
 800122e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001232:	d210      	bcs.n	8001256 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001234:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	4c08      	ldr	r4, [pc, #32]	; (800125c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8001242:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001246:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001248:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800124e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	6119      	str	r1, [r3, #16]
 8001254:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2001      	movs	r0, #1
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff ff66 	bl	8001134 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001268:	2c00      	cmp	r4, #0
 800126a:	d067      	beq.n	800133c <HAL_DMA_Init+0xdc>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800126c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800126e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001270:	2102      	movs	r1, #2
 8001272:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8001276:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	f022 0201 	bic.w	r2, r2, #1
 8001280:	4605      	mov	r5, r0
 8001282:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001284:	e005      	b.n	8001292 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001286:	f7ff ff55 	bl	8001134 <HAL_GetTick>
 800128a:	1b43      	subs	r3, r0, r5
 800128c:	2b05      	cmp	r3, #5
 800128e:	d839      	bhi.n	8001304 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	07d1      	lsls	r1, r2, #31
 8001296:	d4f6      	bmi.n	8001286 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001298:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800129c:	68e1      	ldr	r1, [r4, #12]
 800129e:	4302      	orrs	r2, r0
 80012a0:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a2:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a8:	432a      	orrs	r2, r5
 80012aa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ac:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80012ae:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b0:	4302      	orrs	r2, r0
 80012b2:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012b4:	4933      	ldr	r1, [pc, #204]	; (8001384 <HAL_DMA_Init+0x124>)
 80012b6:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b8:	6a25      	ldr	r5, [r4, #32]
 80012ba:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012bc:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012be:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80012c0:	2904      	cmp	r1, #4
 80012c2:	d026      	beq.n	8001312 <HAL_DMA_Init+0xb2>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012c4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012c6:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012c8:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012cc:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012ce:	b2d8      	uxtb	r0, r3
 80012d0:	4a2d      	ldr	r2, [pc, #180]	; (8001388 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 80012d2:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012d4:	3810      	subs	r0, #16
 80012d6:	fba2 5200 	umull	r5, r2, r2, r0
 80012da:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012dc:	492b      	ldr	r1, [pc, #172]	; (800138c <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012e2:	5c89      	ldrb	r1, [r1, r2]
 80012e4:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012e6:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80012ea:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012ec:	bf88      	it	hi
 80012ee:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f0:	223f      	movs	r2, #63	; 0x3f
 80012f2:	408a      	lsls	r2, r1
 80012f4:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012f6:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012f8:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80012fa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012fc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80012fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001302:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001304:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001306:	2220      	movs	r2, #32
 8001308:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800130e:	4618      	mov	r0, r3
}
 8001310:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001312:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8001316:	4329      	orrs	r1, r5
 8001318:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800131a:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800131c:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800131e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001320:	f021 0107 	bic.w	r1, r1, #7
 8001324:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8001326:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800132a:	2d00      	cmp	r5, #0
 800132c:	d0cf      	beq.n	80012ce <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800132e:	b938      	cbnz	r0, 8001340 <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 8001330:	2a01      	cmp	r2, #1
 8001332:	d023      	beq.n	800137c <HAL_DMA_Init+0x11c>
 8001334:	f032 0202 	bics.w	r2, r2, #2
 8001338:	d1c9      	bne.n	80012ce <HAL_DMA_Init+0x6e>
 800133a:	e008      	b.n	800134e <HAL_DMA_Init+0xee>
    return HAL_ERROR;
 800133c:	2001      	movs	r0, #1
}
 800133e:	bd38      	pop	{r3, r4, r5, pc}
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001340:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001344:	d00c      	beq.n	8001360 <HAL_DMA_Init+0x100>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001346:	2a02      	cmp	r2, #2
 8001348:	d903      	bls.n	8001352 <HAL_DMA_Init+0xf2>
 800134a:	2a03      	cmp	r2, #3
 800134c:	d1bf      	bne.n	80012ce <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800134e:	01ea      	lsls	r2, r5, #7
 8001350:	d5bd      	bpl.n	80012ce <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8001352:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001354:	2240      	movs	r2, #64	; 0x40
 8001356:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001358:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 800135c:	4618      	mov	r0, r3
}
 800135e:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8001360:	2a03      	cmp	r2, #3
 8001362:	d8b4      	bhi.n	80012ce <HAL_DMA_Init+0x6e>
 8001364:	a001      	add	r0, pc, #4	; (adr r0, 800136c <HAL_DMA_Init+0x10c>)
 8001366:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800136a:	bf00      	nop
 800136c:	08001353 	.word	0x08001353
 8001370:	0800134f 	.word	0x0800134f
 8001374:	08001353 	.word	0x08001353
 8001378:	0800137d 	.word	0x0800137d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800137c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001380:	d1a5      	bne.n	80012ce <HAL_DMA_Init+0x6e>
 8001382:	e7e6      	b.n	8001352 <HAL_DMA_Init+0xf2>
 8001384:	f010803f 	.word	0xf010803f
 8001388:	aaaaaaab 	.word	0xaaaaaaab
 800138c:	0800b9a0 	.word	0x0800b9a0

08001390 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8001390:	2800      	cmp	r0, #0
 8001392:	d035      	beq.n	8001400 <HAL_DMA_DeInit+0x70>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8001394:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001398:	2b02      	cmp	r3, #2
 800139a:	b2d9      	uxtb	r1, r3
 800139c:	d031      	beq.n	8001402 <HAL_DMA_DeInit+0x72>
  __HAL_DMA_DISABLE(hdma);
 800139e:	6803      	ldr	r3, [r0, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_DMA_DeInit+0x78>)
 80013a2:	b2d9      	uxtb	r1, r3
 80013a4:	3910      	subs	r1, #16
{
 80013a6:	b470      	push	{r4, r5, r6}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013a8:	fba2 5201 	umull	r5, r2, r2, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ac:	4c17      	ldr	r4, [pc, #92]	; (800140c <HAL_DMA_DeInit+0x7c>)
  __HAL_DMA_DISABLE(hdma);
 80013ae:	681d      	ldr	r5, [r3, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013b0:	0912      	lsrs	r2, r2, #4
  __HAL_DMA_DISABLE(hdma);
 80013b2:	f025 0501 	bic.w	r5, r5, #1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013b6:	5ca6      	ldrb	r6, [r4, r2]
  __HAL_DMA_DISABLE(hdma);
 80013b8:	601d      	str	r5, [r3, #0]
  hdma->Instance->CR   = 0U;
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80013be:	605a      	str	r2, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80013c0:	609a      	str	r2, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80013c2:	60da      	str	r2, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80013c4:	611a      	str	r2, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80013c6:	2221      	movs	r2, #33	; 0x21
 80013c8:	615a      	str	r2, [r3, #20]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ce:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 80013d2:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013d4:	bf88      	it	hi
 80013d6:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013d8:	243f      	movs	r4, #63	; 0x3f
  hdma->XferCpltCallback = NULL;
 80013da:	2200      	movs	r2, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013dc:	40b4      	lsls	r4, r6
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013de:	65c6      	str	r6, [r0, #92]	; 0x5c
  hdma->XferHalfCpltCallback = NULL;
 80013e0:	e9c0 220f 	strd	r2, r2, [r0, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80013e4:	e9c0 2211 	strd	r2, r2, [r0, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80013e8:	e9c0 2213 	strd	r2, r2, [r0, #76]	; 0x4c
 80013ec:	6583      	str	r3, [r0, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ee:	609c      	str	r4, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f0:	6542      	str	r2, [r0, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80013f2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80013f6:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
}
 80013fa:	bc70      	pop	{r4, r5, r6}
 80013fc:	4610      	mov	r0, r2
 80013fe:	4770      	bx	lr
    return HAL_ERROR;
 8001400:	2101      	movs	r1, #1
}
 8001402:	4608      	mov	r0, r1
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	aaaaaaab 	.word	0xaaaaaaab
 800140c:	0800b9a0 	.word	0x0800b9a0

08001410 <HAL_DMA_Start_IT>:
{
 8001410:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8001412:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001416:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001418:	2c01      	cmp	r4, #1
 800141a:	d035      	beq.n	8001488 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 800141c:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8001420:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001424:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8001426:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800142a:	d005      	beq.n	8001438 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800142c:	2300      	movs	r3, #0
 800142e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8001432:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8001434:	2002      	movs	r0, #2
}
 8001436:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	2602      	movs	r6, #2
 800143a:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800143e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001440:	2600      	movs	r6, #0
 8001442:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001444:	6826      	ldr	r6, [r4, #0]
 8001446:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 800144a:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800144c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800144e:	6883      	ldr	r3, [r0, #8]
 8001450:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001452:	bf0e      	itee	eq
 8001454:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001456:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001458:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800145a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800145c:	bf08      	it	eq
 800145e:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001460:	233f      	movs	r3, #63	; 0x3f
 8001462:	4093      	lsls	r3, r2
 8001464:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001466:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001468:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800146a:	f043 0316 	orr.w	r3, r3, #22
 800146e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001470:	b11a      	cbz	r2, 800147a <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800147a:	6823      	ldr	r3, [r4, #0]
 800147c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001480:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001482:	6023      	str	r3, [r4, #0]
}
 8001484:	bc70      	pop	{r4, r5, r6}
 8001486:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001488:	2002      	movs	r0, #2
}
 800148a:	bc70      	pop	{r4, r5, r6}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_DMA_Abort>:
{
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001494:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8001496:	f7ff fe4d 	bl	8001134 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800149a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d006      	beq.n	80014b0 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 80014a2:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a4:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80014a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014aa:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80014ac:	2001      	movs	r0, #1
}
 80014ae:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	f022 0216 	bic.w	r2, r2, #22
 80014b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014c0:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014c4:	4605      	mov	r5, r0
 80014c6:	b332      	cbz	r2, 8001516 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f022 0208 	bic.w	r2, r2, #8
 80014ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	f022 0201 	bic.w	r2, r2, #1
 80014d6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014d8:	e005      	b.n	80014e6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014da:	f7ff fe2b 	bl	8001134 <HAL_GetTick>
 80014de:	1b43      	subs	r3, r0, r5
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d80f      	bhi.n	8001504 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f013 0301 	ands.w	r3, r3, #1
 80014ec:	d1f5      	bne.n	80014da <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80014f0:	223f      	movs	r2, #63	; 0x3f
 80014f2:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80014f4:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014f6:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80014f8:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80014fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8001500:	4618      	mov	r0, r3
}
 8001502:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001504:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001506:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8001508:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800150a:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 800150c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001510:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001514:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001516:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001518:	2a00      	cmp	r2, #0
 800151a:	d1d5      	bne.n	80014c8 <HAL_DMA_Abort+0x38>
 800151c:	e7d8      	b.n	80014d0 <HAL_DMA_Abort+0x40>
 800151e:	bf00      	nop

08001520 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001520:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001524:	2b02      	cmp	r3, #2
 8001526:	d003      	beq.n	8001530 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
 800152e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001530:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001532:	2305      	movs	r3, #5
 8001534:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001538:	6813      	ldr	r3, [r2, #0]
 800153a:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 800153e:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001540:	6013      	str	r3, [r2, #0]
}
 8001542:	4770      	bx	lr

08001544 <HAL_DMA_IRQHandler>:
{
 8001544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001548:	b082      	sub	sp, #8
  uint32_t timeout = SystemCoreClock / 9600U;
 800154a:	4a74      	ldr	r2, [pc, #464]	; (800171c <HAL_DMA_IRQHandler+0x1d8>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800154c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800154e:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001554:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001556:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001558:	2208      	movs	r2, #8
 800155a:	409a      	lsls	r2, r3
 800155c:	4222      	tst	r2, r4
{
 800155e:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001560:	d004      	beq.n	800156c <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001562:	6801      	ldr	r1, [r0, #0]
 8001564:	680f      	ldr	r7, [r1, #0]
 8001566:	0778      	lsls	r0, r7, #29
 8001568:	f100 808a 	bmi.w	8001680 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800156c:	2201      	movs	r2, #1
 800156e:	409a      	lsls	r2, r3
 8001570:	4222      	tst	r2, r4
 8001572:	d004      	beq.n	800157e <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001574:	f8d8 1000 	ldr.w	r1, [r8]
 8001578:	6949      	ldr	r1, [r1, #20]
 800157a:	0609      	lsls	r1, r1, #24
 800157c:	d478      	bmi.n	8001670 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800157e:	2204      	movs	r2, #4
 8001580:	409a      	lsls	r2, r3
 8001582:	4222      	tst	r2, r4
 8001584:	d004      	beq.n	8001590 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001586:	f8d8 1000 	ldr.w	r1, [r8]
 800158a:	6809      	ldr	r1, [r1, #0]
 800158c:	078f      	lsls	r7, r1, #30
 800158e:	d467      	bmi.n	8001660 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001590:	2210      	movs	r2, #16
 8001592:	409a      	lsls	r2, r3
 8001594:	4222      	tst	r2, r4
 8001596:	d004      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001598:	f8d8 1000 	ldr.w	r1, [r8]
 800159c:	680f      	ldr	r7, [r1, #0]
 800159e:	0738      	lsls	r0, r7, #28
 80015a0:	d449      	bmi.n	8001636 <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015a2:	2220      	movs	r2, #32
 80015a4:	409a      	lsls	r2, r3
 80015a6:	4222      	tst	r2, r4
 80015a8:	d017      	beq.n	80015da <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015aa:	f8d8 1000 	ldr.w	r1, [r8]
 80015ae:	680c      	ldr	r4, [r1, #0]
 80015b0:	06e0      	lsls	r0, r4, #27
 80015b2:	d512      	bpl.n	80015da <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015b4:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015b6:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80015ba:	2a05      	cmp	r2, #5
 80015bc:	d073      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015be:	680b      	ldr	r3, [r1, #0]
 80015c0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015c4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015c6:	f000 8090 	beq.w	80016ea <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015ca:	0319      	lsls	r1, r3, #12
 80015cc:	f140 809b 	bpl.w	8001706 <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80015d0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80015d4:	b10b      	cbz	r3, 80015da <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80015d6:	4640      	mov	r0, r8
 80015d8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015da:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80015de:	b33b      	cbz	r3, 8001630 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015e0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80015e4:	07da      	lsls	r2, r3, #31
 80015e6:	d51b      	bpl.n	8001620 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 80015e8:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015ec:	494c      	ldr	r1, [pc, #304]	; (8001720 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80015ee:	2305      	movs	r3, #5
 80015f0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80015f4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015f6:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80015fa:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80015fe:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e002      	b.n	800160a <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001604:	6813      	ldr	r3, [r2, #0]
 8001606:	07db      	lsls	r3, r3, #31
 8001608:	d504      	bpl.n	8001614 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	3301      	adds	r3, #1
 800160e:	42ab      	cmp	r3, r5
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	d9f7      	bls.n	8001604 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8001614:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8001616:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001618:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800161c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001620:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001624:	b123      	cbz	r3, 8001630 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 8001626:	4640      	mov	r0, r8
}
 8001628:	b002      	add	sp, #8
 800162a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800162e:	4718      	bx	r3
}
 8001630:	b002      	add	sp, #8
 8001632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001636:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001638:	680a      	ldr	r2, [r1, #0]
 800163a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800163e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001640:	d12a      	bne.n	8001698 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001642:	05d7      	lsls	r7, r2, #23
 8001644:	d403      	bmi.n	800164e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001646:	680a      	ldr	r2, [r1, #0]
 8001648:	f022 0208 	bic.w	r2, r2, #8
 800164c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800164e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001652:	2a00      	cmp	r2, #0
 8001654:	d0a5      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8001656:	4640      	mov	r0, r8
 8001658:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800165a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800165e:	e7a0      	b.n	80015a2 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001660:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001662:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001666:	f042 0204 	orr.w	r2, r2, #4
 800166a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800166e:	e78f      	b.n	8001590 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001670:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001672:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001676:	f042 0202 	orr.w	r2, r2, #2
 800167a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800167e:	e77e      	b.n	800157e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001680:	680f      	ldr	r7, [r1, #0]
 8001682:	f027 0704 	bic.w	r7, r7, #4
 8001686:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001688:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800168a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001696:	e769      	b.n	800156c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001698:	0312      	lsls	r2, r2, #12
 800169a:	d5d8      	bpl.n	800164e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800169c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80016a0:	2a00      	cmp	r2, #0
 80016a2:	d1d8      	bne.n	8001656 <HAL_DMA_IRQHandler+0x112>
 80016a4:	e77d      	b.n	80015a2 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016a6:	680a      	ldr	r2, [r1, #0]
 80016a8:	f022 0216 	bic.w	r2, r2, #22
 80016ac:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ae:	694a      	ldr	r2, [r1, #20]
 80016b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b4:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80016ba:	b352      	cbz	r2, 8001712 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016bc:	680a      	ldr	r2, [r1, #0]
 80016be:	f022 0208 	bic.w	r2, r2, #8
 80016c2:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	223f      	movs	r2, #63	; 0x3f
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80016ca:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ce:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80016d0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80016d2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80016d4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80016d8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80016dc:	2900      	cmp	r1, #0
 80016de:	d0a7      	beq.n	8001630 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80016e0:	4640      	mov	r0, r8
}
 80016e2:	b002      	add	sp, #8
 80016e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80016e8:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ea:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80016ee:	f47f af6f 	bne.w	80015d0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016f2:	680a      	ldr	r2, [r1, #0]
 80016f4:	f022 0210 	bic.w	r2, r2, #16
 80016f8:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80016fa:	2201      	movs	r2, #1
 80016fc:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001700:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8001704:	e764      	b.n	80015d0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 8001706:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f af63 	bne.w	80015d6 <HAL_DMA_IRQHandler+0x92>
 8001710:	e763      	b.n	80015da <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001712:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001716:	2a00      	cmp	r2, #0
 8001718:	d1d0      	bne.n	80016bc <HAL_DMA_IRQHandler+0x178>
 800171a:	e7d3      	b.n	80016c4 <HAL_DMA_IRQHandler+0x180>
 800171c:	20000420 	.word	0x20000420
 8001720:	1b4e81b5 	.word	0x1b4e81b5

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001728:	2200      	movs	r2, #0
 800172a:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	f8df a22c 	ldr.w	sl, [pc, #556]	; 800195c <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001730:	4e83      	ldr	r6, [pc, #524]	; (8001940 <HAL_GPIO_Init+0x21c>)
{
 8001732:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001734:	4613      	mov	r3, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001736:	4689      	mov	r9, r1
 8001738:	e005      	b.n	8001746 <HAL_GPIO_Init+0x22>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	3301      	adds	r3, #1
 800173c:	2b10      	cmp	r3, #16
 800173e:	f102 0202 	add.w	r2, r2, #2
 8001742:	f000 8089 	beq.w	8001858 <HAL_GPIO_Init+0x134>
    ioposition = 0x01U << position;
 8001746:	2101      	movs	r1, #1
 8001748:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 800174e:	43a1      	bics	r1, r4
 8001750:	d1f3      	bne.n	800173a <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001752:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001756:	f00c 0103 	and.w	r1, ip, #3
 800175a:	1e4d      	subs	r5, r1, #1
 800175c:	2d01      	cmp	r5, #1
 800175e:	d97e      	bls.n	800185e <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001760:	2903      	cmp	r1, #3
 8001762:	f040 80be 	bne.w	80018e2 <HAL_GPIO_Init+0x1be>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001766:	4091      	lsls	r1, r2
 8001768:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 800176a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176e:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001770:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001774:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001776:	d0e0      	beq.n	800173a <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001778:	2100      	movs	r1, #0
 800177a:	9103      	str	r1, [sp, #12]
 800177c:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 8001780:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001784:	f8ca 1044 	str.w	r1, [sl, #68]	; 0x44
 8001788:	f8da 1044 	ldr.w	r1, [sl, #68]	; 0x44
 800178c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001790:	9103      	str	r1, [sp, #12]
 8001792:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001794:	f023 0103 	bic.w	r1, r3, #3
 8001798:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800179c:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a0:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80017a4:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a8:	00bf      	lsls	r7, r7, #2
 80017aa:	250f      	movs	r5, #15
 80017ac:	40bd      	lsls	r5, r7
 80017ae:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b2:	4d64      	ldr	r5, [pc, #400]	; (8001944 <HAL_GPIO_Init+0x220>)
 80017b4:	42a8      	cmp	r0, r5
 80017b6:	d024      	beq.n	8001802 <HAL_GPIO_Init+0xde>
 80017b8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80017bc:	42a8      	cmp	r0, r5
 80017be:	f000 8094 	beq.w	80018ea <HAL_GPIO_Init+0x1c6>
 80017c2:	4d61      	ldr	r5, [pc, #388]	; (8001948 <HAL_GPIO_Init+0x224>)
 80017c4:	42a8      	cmp	r0, r5
 80017c6:	f000 8097 	beq.w	80018f8 <HAL_GPIO_Init+0x1d4>
 80017ca:	4d60      	ldr	r5, [pc, #384]	; (800194c <HAL_GPIO_Init+0x228>)
 80017cc:	42a8      	cmp	r0, r5
 80017ce:	f000 809a 	beq.w	8001906 <HAL_GPIO_Init+0x1e2>
 80017d2:	4d5f      	ldr	r5, [pc, #380]	; (8001950 <HAL_GPIO_Init+0x22c>)
 80017d4:	42a8      	cmp	r0, r5
 80017d6:	f000 809d 	beq.w	8001914 <HAL_GPIO_Init+0x1f0>
 80017da:	4d5e      	ldr	r5, [pc, #376]	; (8001954 <HAL_GPIO_Init+0x230>)
 80017dc:	42a8      	cmp	r0, r5
 80017de:	f000 80a0 	beq.w	8001922 <HAL_GPIO_Init+0x1fe>
 80017e2:	4d5d      	ldr	r5, [pc, #372]	; (8001958 <HAL_GPIO_Init+0x234>)
 80017e4:	42a8      	cmp	r0, r5
 80017e6:	f000 80a3 	beq.w	8001930 <HAL_GPIO_Init+0x20c>
 80017ea:	f8df e174 	ldr.w	lr, [pc, #372]	; 8001960 <HAL_GPIO_Init+0x23c>
 80017ee:	4570      	cmp	r0, lr
 80017f0:	bf0c      	ite	eq
 80017f2:	f04f 0e07 	moveq.w	lr, #7
 80017f6:	f04f 0e08 	movne.w	lr, #8
 80017fa:	fa0e f707 	lsl.w	r7, lr, r7
 80017fe:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001802:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001806:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001808:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800180c:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001810:	bf0c      	ite	eq
 8001812:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001814:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001818:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 800181a:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800181c:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001820:	bf0c      	ite	eq
 8001822:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001824:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8001828:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 800182a:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800182c:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001830:	bf0c      	ite	eq
 8001832:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001834:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001838:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183a:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183c:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001840:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001844:	bf0c      	ite	eq
 8001846:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001848:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184c:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800184e:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001850:	f102 0202 	add.w	r2, r2, #2
 8001854:	f47f af77 	bne.w	8001746 <HAL_GPIO_Init+0x22>
      }
    }
  }
}
 8001858:	b005      	add	sp, #20
 800185a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001862:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001864:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001868:	2503      	movs	r5, #3
 800186a:	fa05 fe02 	lsl.w	lr, r5, r2
 800186e:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001872:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8001876:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001878:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800187a:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187e:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001882:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001886:	409f      	lsls	r7, r3
 8001888:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800188c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800188e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001890:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001894:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001898:	4097      	lsls	r7, r2
 800189a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80018a0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a2:	fa01 f102 	lsl.w	r1, r1, r2
 80018a6:	f47f af60 	bne.w	800176a <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3U];
 80018aa:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80018ae:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80018b6:	f8de 7020 	ldr.w	r7, [lr, #32]
 80018ba:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c0:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c4:	fa07 f708 	lsl.w	r7, r7, r8
 80018c8:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ca:	270f      	movs	r7, #15
 80018cc:	fa07 f808 	lsl.w	r8, r7, r8
 80018d0:	9f00      	ldr	r7, [sp, #0]
 80018d2:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d6:	9f01      	ldr	r7, [sp, #4]
 80018d8:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80018dc:	f8ce 7020 	str.w	r7, [lr, #32]
 80018e0:	e743      	b.n	800176a <HAL_GPIO_Init+0x46>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e2:	2503      	movs	r5, #3
 80018e4:	4095      	lsls	r5, r2
 80018e6:	43ed      	mvns	r5, r5
 80018e8:	e7d1      	b.n	800188e <HAL_GPIO_Init+0x16a>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ea:	f04f 0e01 	mov.w	lr, #1
 80018ee:	fa0e f707 	lsl.w	r7, lr, r7
 80018f2:	ea48 0807 	orr.w	r8, r8, r7
 80018f6:	e784      	b.n	8001802 <HAL_GPIO_Init+0xde>
 80018f8:	f04f 0e02 	mov.w	lr, #2
 80018fc:	fa0e f707 	lsl.w	r7, lr, r7
 8001900:	ea48 0807 	orr.w	r8, r8, r7
 8001904:	e77d      	b.n	8001802 <HAL_GPIO_Init+0xde>
 8001906:	f04f 0e03 	mov.w	lr, #3
 800190a:	fa0e f707 	lsl.w	r7, lr, r7
 800190e:	ea48 0807 	orr.w	r8, r8, r7
 8001912:	e776      	b.n	8001802 <HAL_GPIO_Init+0xde>
 8001914:	f04f 0e04 	mov.w	lr, #4
 8001918:	fa0e f707 	lsl.w	r7, lr, r7
 800191c:	ea48 0807 	orr.w	r8, r8, r7
 8001920:	e76f      	b.n	8001802 <HAL_GPIO_Init+0xde>
 8001922:	f04f 0e05 	mov.w	lr, #5
 8001926:	fa0e f707 	lsl.w	r7, lr, r7
 800192a:	ea48 0807 	orr.w	r8, r8, r7
 800192e:	e768      	b.n	8001802 <HAL_GPIO_Init+0xde>
 8001930:	f04f 0e06 	mov.w	lr, #6
 8001934:	fa0e f707 	lsl.w	r7, lr, r7
 8001938:	ea48 0807 	orr.w	r8, r8, r7
 800193c:	e761      	b.n	8001802 <HAL_GPIO_Init+0xde>
 800193e:	bf00      	nop
 8001940:	40013c00 	.word	0x40013c00
 8001944:	40020000 	.word	0x40020000
 8001948:	40020800 	.word	0x40020800
 800194c:	40020c00 	.word	0x40020c00
 8001950:	40021000 	.word	0x40021000
 8001954:	40021400 	.word	0x40021400
 8001958:	40021800 	.word	0x40021800
 800195c:	40023800 	.word	0x40023800
 8001960:	40021c00 	.word	0x40021c00

08001964 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001964:	b902      	cbnz	r2, 8001968 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001966:	0409      	lsls	r1, r1, #16
 8001968:	6181      	str	r1, [r0, #24]
  }
}
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800196c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800196e:	ea01 0203 	and.w	r2, r1, r3
 8001972:	ea21 0103 	bic.w	r1, r1, r3
 8001976:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800197a:	6181      	str	r1, [r0, #24]
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <HAL_I2S_MspInit>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop

08001984 <HAL_I2S_Init>:
  if (hi2s == NULL)
 8001984:	2800      	cmp	r0, #0
 8001986:	f000 8086 	beq.w	8001a96 <HAL_I2S_Init+0x112>
{
 800198a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2s->State == HAL_I2S_STATE_RESET)
 800198c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001990:	4604      	mov	r4, r0
 8001992:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001996:	2b00      	cmp	r3, #0
 8001998:	d072      	beq.n	8001a80 <HAL_I2S_Init+0xfc>
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800199a:	6821      	ldr	r1, [r4, #0]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800199c:	6963      	ldr	r3, [r4, #20]
  hi2s->State = HAL_I2S_STATE_BUSY;
 800199e:	2202      	movs	r2, #2
 80019a0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019a4:	69c8      	ldr	r0, [r1, #28]
 80019a6:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 80019aa:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80019ae:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80019b0:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 80019b2:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80019b4:	d062      	beq.n	8001a7c <HAL_I2S_Init+0xf8>
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80019b6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      packetlength = 32U;
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	bf0c      	ite	eq
 80019be:	2510      	moveq	r5, #16
 80019c0:	2520      	movne	r5, #32
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80019c2:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80019c4:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80019c6:	bf98      	it	ls
 80019c8:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80019ca:	f000 fe5d 	bl	8002688 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80019ce:	6922      	ldr	r2, [r4, #16]
 80019d0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80019d4:	d05b      	beq.n	8001a8e <HAL_I2S_Init+0x10a>
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019d6:	fbb0 f0f5 	udiv	r0, r0, r5
 80019da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019de:	6961      	ldr	r1, [r4, #20]
 80019e0:	0043      	lsls	r3, r0, #1
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
    tmp = tmp / 10U;
 80019e6:	492e      	ldr	r1, [pc, #184]	; (8001aa0 <HAL_I2S_Init+0x11c>)
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80019e8:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 80019ea:	fba1 1303 	umull	r1, r3, r1, r3
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019ee:	0918      	lsrs	r0, r3, #4
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019f0:	1e81      	subs	r1, r0, #2
 80019f2:	29fd      	cmp	r1, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019f8:	d905      	bls.n	8001a06 <HAL_I2S_Init+0x82>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80019fc:	f043 0310 	orr.w	r3, r3, #16
    return  HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a02:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a06:	6821      	ldr	r1, [r4, #0]
 8001a08:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
 8001a0c:	4313      	orrs	r3, r2
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a0e:	e9d4 7001 	ldrd	r7, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a12:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a14:	69cb      	ldr	r3, [r1, #28]
 8001a16:	4e23      	ldr	r6, [pc, #140]	; (8001aa4 <HAL_I2S_Init+0x120>)
 8001a18:	68e2      	ldr	r2, [r4, #12]
 8001a1a:	ea47 0500 	orr.w	r5, r7, r0
 8001a1e:	4033      	ands	r3, r6
 8001a20:	432b      	orrs	r3, r5
 8001a22:	69a5      	ldr	r5, [r4, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	432b      	orrs	r3, r5
 8001a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a2c:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a2e:	6a23      	ldr	r3, [r4, #32]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d11d      	bne.n	8001a70 <HAL_I2S_Init+0xec>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_I2S_Init+0x124>)
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a36:	4302      	orrs	r2, r0
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a38:	481c      	ldr	r0, [pc, #112]	; (8001aac <HAL_I2S_Init+0x128>)
 8001a3a:	4299      	cmp	r1, r3
 8001a3c:	bf18      	it	ne
 8001a3e:	f04f 2040 	movne.w	r0, #1073758208	; 0x40004000
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a42:	f437 7300 	bics.w	r3, r7, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a46:	69c3      	ldr	r3, [r0, #28]
 8001a48:	ea06 0603 	and.w	r6, r6, r3
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_I2S_Init+0x12c>)
 8001a4e:	6363      	str	r3, [r4, #52]	; 0x34
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a50:	f04f 0302 	mov.w	r3, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a54:	61c6      	str	r6, [r0, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a56:	6203      	str	r3, [r0, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a58:	bf0c      	ite	eq
 8001a5a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8001a5e:	2300      	movne	r3, #0
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a60:	69c1      	ldr	r1, [r0, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001a62:	4313      	orrs	r3, r2
 8001a64:	432b      	orrs	r3, r5
 8001a66:	430b      	orrs	r3, r1
 8001a68:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a6e:	61c3      	str	r3, [r0, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a70:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a72:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a74:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001a76:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8001a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001a7c:	6922      	ldr	r2, [r4, #16]
 8001a7e:	e7c5      	b.n	8001a0c <HAL_I2S_Init+0x88>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <HAL_I2S_Init+0x130>)
    hi2s->Lock = HAL_UNLOCKED;
 8001a82:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001a86:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8001a88:	f7ff ff7a 	bl	8001980 <HAL_I2S_MspInit>
 8001a8c:	e785      	b.n	800199a <HAL_I2S_Init+0x16>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a8e:	68e3      	ldr	r3, [r4, #12]
 8001a90:	b11b      	cbz	r3, 8001a9a <HAL_I2S_Init+0x116>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a92:	00ad      	lsls	r5, r5, #2
 8001a94:	e79f      	b.n	80019d6 <HAL_I2S_Init+0x52>
    return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
}
 8001a98:	4770      	bx	lr
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a9a:	00ed      	lsls	r5, r5, #3
 8001a9c:	e79b      	b.n	80019d6 <HAL_I2S_Init+0x52>
 8001a9e:	bf00      	nop
 8001aa0:	cccccccd 	.word	0xcccccccd
 8001aa4:	fffff040 	.word	0xfffff040
 8001aa8:	40003800 	.word	0x40003800
 8001aac:	40003400 	.word	0x40003400
 8001ab0:	08001d11 	.word	0x08001d11
 8001ab4:	08001bd1 	.word	0x08001bd1

08001ab8 <HAL_I2S_Receive_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001ab8:	2900      	cmp	r1, #0
 8001aba:	d04f      	beq.n	8001b5c <HAL_I2S_Receive_DMA+0xa4>
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	d04d      	beq.n	8001b5c <HAL_I2S_Receive_DMA+0xa4>
{
 8001ac0:	b530      	push	{r4, r5, lr}
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001ac2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001ac6:	2b01      	cmp	r3, #1
{
 8001ac8:	b083      	sub	sp, #12
 8001aca:	4604      	mov	r4, r0
  __HAL_LOCK(hi2s);
 8001acc:	d04d      	beq.n	8001b6a <HAL_I2S_Receive_DMA+0xb2>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001ad4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d148      	bne.n	8001b6e <HAL_I2S_Receive_DMA+0xb6>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001adc:	2304      	movs	r3, #4
 8001ade:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pRxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001ae2:	6805      	ldr	r5, [r0, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	6443      	str	r3, [r0, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001ae8:	69eb      	ldr	r3, [r5, #28]
  hi2s->pRxBuffPtr = pData;
 8001aea:	62c1      	str	r1, [r0, #44]	; 0x2c
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001aec:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d035      	beq.n	8001b60 <HAL_I2S_Receive_DMA+0xa8>
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d033      	beq.n	8001b60 <HAL_I2S_Receive_DMA+0xa8>
    hi2s->RxXferSize = (Size << 1U);
    hi2s->RxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001af8:	8602      	strh	r2, [r0, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001afa:	8642      	strh	r2, [r0, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001afc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_I2S_Receive_DMA+0xdc>)
 8001b00:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001b02:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <HAL_I2S_Receive_DMA+0xe0>)
 8001b04:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001b06:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <HAL_I2S_Receive_DMA+0xe4>)
 8001b08:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001b0a:	69eb      	ldr	r3, [r5, #28]
 8001b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b14:	d106      	bne.n	8001b24 <HAL_I2S_Receive_DMA+0x6c>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b16:	2300      	movs	r3, #0
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	68eb      	ldr	r3, [r5, #12]
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	68ab      	ldr	r3, [r5, #8]
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	9b01      	ldr	r3, [sp, #4]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
                                 hi2s->RxXferSize))
 8001b24:	8e23      	ldrh	r3, [r4, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001b26:	460a      	mov	r2, r1
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f105 010c 	add.w	r1, r5, #12
 8001b2e:	f7ff fc6f 	bl	8001410 <HAL_DMA_Start_IT>
 8001b32:	bb10      	cbnz	r0, 8001b7a <HAL_I2S_Receive_DMA+0xc2>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	0551      	lsls	r1, r2, #21
 8001b3a:	d403      	bmi.n	8001b44 <HAL_I2S_Receive_DMA+0x8c>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001b3c:	69da      	ldr	r2, [r3, #28]
 8001b3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b42:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	07d2      	lsls	r2, r2, #31
 8001b48:	d403      	bmi.n	8001b52 <HAL_I2S_Receive_DMA+0x9a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001b52:	2300      	movs	r3, #0
 8001b54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 8001b58:	b003      	add	sp, #12
 8001b5a:	bd30      	pop	{r4, r5, pc}
    return  HAL_ERROR;
 8001b5c:	2001      	movs	r0, #1
}
 8001b5e:	4770      	bx	lr
    hi2s->RxXferSize = (Size << 1U);
 8001b60:	0053      	lsls	r3, r2, #1
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	8623      	strh	r3, [r4, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001b66:	8663      	strh	r3, [r4, #50]	; 0x32
 8001b68:	e7c8      	b.n	8001afc <HAL_I2S_Receive_DMA+0x44>
  __HAL_LOCK(hi2s);
 8001b6a:	2002      	movs	r0, #2
 8001b6c:	e7f4      	b.n	8001b58 <HAL_I2S_Receive_DMA+0xa0>
    __HAL_UNLOCK(hi2s);
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 8001b74:	2002      	movs	r0, #2
}
 8001b76:	b003      	add	sp, #12
 8001b78:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001b7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001b7c:	2201      	movs	r2, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001b7e:	f043 0308 	orr.w	r3, r3, #8
    __HAL_UNLOCK(hi2s);
 8001b82:	2100      	movs	r1, #0
    return HAL_ERROR;
 8001b84:	4610      	mov	r0, r2
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001b86:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001b88:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 8001b8c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
}
 8001b90:	b003      	add	sp, #12
 8001b92:	bd30      	pop	{r4, r5, pc}
 8001b94:	08001ba1 	.word	0x08001ba1
 8001b98:	08001bad 	.word	0x08001bad
 8001b9c:	08001cd9 	.word	0x08001cd9

08001ba0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001ba0:	b508      	push	{r3, lr}

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001ba2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001ba4:	f7ff fa64 	bl	8001070 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001ba8:	bd08      	pop	{r3, pc}
 8001baa:	bf00      	nop

08001bac <I2S_DMARxCplt>:
{
 8001bac:	b508      	push	{r3, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 8001bae:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001bb0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8001bb2:	b94b      	cbnz	r3, 8001bc8 <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001bb4:	6801      	ldr	r1, [r0, #0]
 8001bb6:	684a      	ldr	r2, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001bb8:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	604a      	str	r2, [r1, #4]
    hi2s->RxXferCount = 0U;
 8001bc2:	8643      	strh	r3, [r0, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001bc4:	f880 c041 	strb.w	ip, [r0, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8001bc8:	f7ff fa4e 	bl	8001068 <HAL_I2S_RxCpltCallback>
}
 8001bcc:	bd08      	pop	{r3, pc}
 8001bce:	bf00      	nop

08001bd0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001bd0:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bd2:	6803      	ldr	r3, [r0, #0]
{
 8001bd4:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001bda:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001bde:	2a04      	cmp	r2, #4
{
 8001be0:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001be2:	d005      	beq.n	8001bf0 <I2S_IRQHandler+0x20>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001be4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d031      	beq.n	8001c50 <I2S_IRQHandler+0x80>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001bec:	b004      	add	sp, #16
 8001bee:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001bf0:	9a01      	ldr	r2, [sp, #4]
 8001bf2:	07d1      	lsls	r1, r2, #31
 8001bf4:	d50f      	bpl.n	8001c16 <I2S_IRQHandler+0x46>
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	0652      	lsls	r2, r2, #25
 8001bfa:	d50c      	bpl.n	8001c16 <I2S_IRQHandler+0x46>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001bfc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 8001c04:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 8001c06:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	b292      	uxth	r2, r2
 8001c0c:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8001c0e:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001c10:	b292      	uxth	r2, r2
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	d04a      	beq.n	8001cac <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c16:	9b01      	ldr	r3, [sp, #4]
 8001c18:	0659      	lsls	r1, r3, #25
 8001c1a:	d5e3      	bpl.n	8001be4 <I2S_IRQHandler+0x14>
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	0692      	lsls	r2, r2, #26
 8001c22:	d5df      	bpl.n	8001be4 <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c24:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c26:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001c2c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c2e:	9102      	str	r1, [sp, #8]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001c38:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c3a:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001c3c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c40:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c42:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8001c46:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c48:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001c4a:	f7ff fa17 	bl	800107c <HAL_I2S_ErrorCallback>
 8001c4e:	e7c9      	b.n	8001be4 <I2S_IRQHandler+0x14>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001c50:	9b01      	ldr	r3, [sp, #4]
 8001c52:	079b      	lsls	r3, r3, #30
 8001c54:	d50f      	bpl.n	8001c76 <I2S_IRQHandler+0xa6>
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	0610      	lsls	r0, r2, #24
 8001c5c:	d50b      	bpl.n	8001c76 <I2S_IRQHandler+0xa6>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001c5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c60:	f831 2b02 	ldrh.w	r2, [r1], #2
 8001c64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001c66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 8001c68:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 8001c6a:	3a01      	subs	r2, #1
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001c70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001c72:	b292      	uxth	r2, r2
 8001c74:	b322      	cbz	r2, 8001cc0 <I2S_IRQHandler+0xf0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c76:	9b01      	ldr	r3, [sp, #4]
 8001c78:	0719      	lsls	r1, r3, #28
 8001c7a:	d5b7      	bpl.n	8001bec <I2S_IRQHandler+0x1c>
 8001c7c:	6823      	ldr	r3, [r4, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	0692      	lsls	r2, r2, #26
 8001c82:	d5b3      	bpl.n	8001bec <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c84:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c86:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c8c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c8e:	9103      	str	r1, [sp, #12]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8001c94:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001c96:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8001c98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001c9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
      HAL_I2S_ErrorCallback(hi2s);
 8001ca2:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ca4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001ca6:	f7ff f9e9 	bl	800107c <HAL_I2S_ErrorCallback>
}
 8001caa:	e79f      	b.n	8001bec <I2S_IRQHandler+0x1c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cac:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001cae:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001cb4:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001cb6:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001cba:	f7ff f9d5 	bl	8001068 <HAL_I2S_RxCpltCallback>
 8001cbe:	e7aa      	b.n	8001c16 <I2S_IRQHandler+0x46>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cc0:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001cc2:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cc8:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8001cca:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8001ccc:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001cd0:	f7ff f876 	bl	8000dc0 <HAL_I2S_TxCpltCallback>
 8001cd4:	e7cf      	b.n	8001c76 <I2S_IRQHandler+0xa6>
 8001cd6:	bf00      	nop

08001cd8 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001cd8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001cda:	6801      	ldr	r1, [r0, #0]
{
 8001cdc:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001cde:	684b      	ldr	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8001ce0:	2200      	movs	r2, #0
  hi2s->State = HAL_I2S_STATE_READY;
 8001ce2:	f04f 0c01 	mov.w	ip, #1
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001ce6:	f023 0303 	bic.w	r3, r3, #3
 8001cea:	604b      	str	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8001cec:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001cee:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8001cf0:	f880 c041 	strb.w	ip, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001cf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001cf6:	f043 0308 	orr.w	r3, r3, #8
 8001cfa:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8001cfc:	f7ff f9be 	bl	800107c <HAL_I2S_ErrorCallback>
}
 8001d00:	bd08      	pop	{r3, pc}
 8001d02:	bf00      	nop

08001d04 <HAL_I2S_GetState>:
  return hi2s->State;
 8001d04:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop

08001d0c <HAL_I2SEx_TxRxCpltCallback>:
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop

08001d10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d10:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d12:	6801      	ldr	r1, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d14:	4a93      	ldr	r2, [pc, #588]	; (8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d16:	688b      	ldr	r3, [r1, #8]
{
 8001d18:	b086      	sub	sp, #24
 8001d1a:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d1c:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d1e:	4b92      	ldr	r3, [pc, #584]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8001d20:	4291      	cmp	r1, r2
 8001d22:	bf18      	it	ne
 8001d24:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	9201      	str	r2, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d2c:	684a      	ldr	r2, [r1, #4]
 8001d2e:	9202      	str	r2, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	9203      	str	r2, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d34:	6842      	ldr	r2, [r0, #4]
 8001d36:	f432 7200 	bics.w	r2, r2, #512	; 0x200
 8001d3a:	d078      	beq.n	8001e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x11e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001d3c:	9a01      	ldr	r2, [sp, #4]
 8001d3e:	0792      	lsls	r2, r2, #30
 8001d40:	d51a      	bpl.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 8001d42:	9a03      	ldr	r2, [sp, #12]
 8001d44:	0611      	lsls	r1, r2, #24
 8001d46:	d517      	bpl.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001d48:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001d4a:	1c91      	adds	r1, r2, #2
 8001d4c:	8812      	ldrh	r2, [r2, #0]
 8001d4e:	6241      	str	r1, [r0, #36]	; 0x24
 8001d50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001d52:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001d54:	3a01      	subs	r2, #1
 8001d56:	b292      	uxth	r2, r2
 8001d58:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d5a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	b95a      	cbnz	r2, 8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d66:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8001d68:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	b923      	cbnz	r3, 8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001d74:	f7ff ffca 	bl	8001d0c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001d78:	9b00      	ldr	r3, [sp, #0]
 8001d7a:	07da      	lsls	r2, r3, #31
 8001d7c:	d51c      	bpl.n	8001db8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 8001d7e:	9b02      	ldr	r3, [sp, #8]
 8001d80:	065b      	lsls	r3, r3, #25
 8001d82:	d519      	bpl.n	8001db8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d86:	6822      	ldr	r2, [r4, #0]
 8001d88:	1c98      	adds	r0, r3, #2
 8001d8a:	68d1      	ldr	r1, [r2, #12]
 8001d8c:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001d8e:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001d90:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001d92:	3b01      	subs	r3, #1
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d98:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b963      	cbnz	r3, 8001db8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d9e:	6853      	ldr	r3, [r2, #4]
 8001da0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001da4:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8001da6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	b92b      	cbnz	r3, 8001db8 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001db2:	4620      	mov	r0, r4
 8001db4:	f7ff ffaa 	bl	8001d0c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001db8:	9b00      	ldr	r3, [sp, #0]
 8001dba:	0658      	lsls	r0, r3, #25
 8001dbc:	d51b      	bpl.n	8001df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 8001dbe:	9b02      	ldr	r3, [sp, #8]
 8001dc0:	0699      	lsls	r1, r3, #26
 8001dc2:	d518      	bpl.n	8001df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dc4:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dc6:	4867      	ldr	r0, [pc, #412]	; (8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dc8:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dca:	4b67      	ldr	r3, [pc, #412]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dcc:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dd0:	4282      	cmp	r2, r0
 8001dd2:	bf18      	it	ne
 8001dd4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dd8:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dda:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001ddc:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001dde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001de2:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001de4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001de8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dea:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8001dee:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001df0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001df2:	f7ff f943 	bl	800107c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001df6:	9b01      	ldr	r3, [sp, #4]
 8001df8:	071a      	lsls	r2, r3, #28
 8001dfa:	d571      	bpl.n	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8001dfc:	9b03      	ldr	r3, [sp, #12]
 8001dfe:	069b      	lsls	r3, r3, #26
 8001e00:	d56e      	bpl.n	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	4957      	ldr	r1, [pc, #348]	; (8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001e06:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8001e08:	428a      	cmp	r2, r1
 8001e0a:	bf18      	it	ne
 8001e0c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 8001e10:	f04f 0c01 	mov.w	ip, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001e1a:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e1c:	6853      	ldr	r3, [r2, #4]
 8001e1e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001e22:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e24:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e28:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	e050      	b.n	8001ed0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c0>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001e2e:	9b00      	ldr	r3, [sp, #0]
 8001e30:	079a      	lsls	r2, r3, #30
 8001e32:	d502      	bpl.n	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
 8001e34:	9b02      	ldr	r3, [sp, #8]
 8001e36:	061b      	lsls	r3, r3, #24
 8001e38:	d454      	bmi.n	8001ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001e3a:	9b01      	ldr	r3, [sp, #4]
 8001e3c:	07d8      	lsls	r0, r3, #31
 8001e3e:	d502      	bpl.n	8001e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8001e40:	9b03      	ldr	r3, [sp, #12]
 8001e42:	0659      	lsls	r1, r3, #25
 8001e44:	d469      	bmi.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x20a>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e46:	9b01      	ldr	r3, [sp, #4]
 8001e48:	065a      	lsls	r2, r3, #25
 8001e4a:	d522      	bpl.n	8001e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x182>
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	069b      	lsls	r3, r3, #26
 8001e50:	d51f      	bpl.n	8001e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x182>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	4943      	ldr	r1, [pc, #268]	; (8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001e56:	4a44      	ldr	r2, [pc, #272]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8001e58:	428b      	cmp	r3, r1
 8001e5a:	bf18      	it	ne
 8001e5c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e60:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e62:	6851      	ldr	r1, [r2, #4]
 8001e64:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001e68:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e70:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e72:	9004      	str	r0, [sp, #16]
 8001e74:	68da      	ldr	r2, [r3, #12]
 8001e76:	9204      	str	r2, [sp, #16]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e7c:	2101      	movs	r1, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e7e:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e80:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e84:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e86:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8001e8a:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e8c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e8e:	f7ff f8f5 	bl	800107c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e92:	9b00      	ldr	r3, [sp, #0]
 8001e94:	0718      	lsls	r0, r3, #28
 8001e96:	d523      	bpl.n	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
 8001e98:	9b02      	ldr	r3, [sp, #8]
 8001e9a:	0699      	lsls	r1, r3, #26
 8001e9c:	d520      	bpl.n	8001ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e9e:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea0:	4830      	ldr	r0, [pc, #192]	; (8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea2:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ea4:	4a30      	ldr	r2, [pc, #192]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ea6:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eaa:	4283      	cmp	r3, r0
 8001eac:	bf18      	it	ne
 8001eae:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001eb2:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb4:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001eb6:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb8:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001ebc:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ebe:	9005      	str	r0, [sp, #20]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec4:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ec6:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8001ec8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ecc:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001ece:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001ed6:	b006      	add	sp, #24
 8001ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8001edc:	f7ff b8ce 	b.w	800107c <HAL_I2S_ErrorCallback>
}
 8001ee0:	b006      	add	sp, #24
 8001ee2:	bd10      	pop	{r4, pc}
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001ee4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001ee6:	1c9a      	adds	r2, r3, #2
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	6242      	str	r2, [r0, #36]	; 0x24
 8001eec:	60cb      	str	r3, [r1, #12]
  hi2s->TxXferCount--;
 8001eee:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001ef6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d19d      	bne.n	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001efe:	684b      	ldr	r3, [r1, #4]
 8001f00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001f04:	604b      	str	r3, [r1, #4]
    if (hi2s->RxXferCount == 0U)
 8001f06:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d195      	bne.n	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
      hi2s->State = HAL_I2S_STATE_READY;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f14:	f7ff fefa 	bl	8001d0c <HAL_I2SEx_TxRxCpltCallback>
 8001f18:	e78f      	b.n	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x12a>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001f1a:	6820      	ldr	r0, [r4, #0]
 8001f1c:	4911      	ldr	r1, [pc, #68]	; (8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x258>)
 8001f20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f22:	4288      	cmp	r0, r1
 8001f24:	bf18      	it	ne
 8001f26:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001f2a:	1c98      	adds	r0, r3, #2
 8001f2c:	68d1      	ldr	r1, [r2, #12]
 8001f2e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8001f30:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8001f32:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001f3a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d181      	bne.n	8001e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f42:	6853      	ldr	r3, [r2, #4]
 8001f44:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001f48:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8001f4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f47f af79 	bne.w	8001e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8001f54:	2301      	movs	r3, #1
 8001f56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7ff fed6 	bl	8001d0c <HAL_I2SEx_TxRxCpltCallback>
 8001f60:	e771      	b.n	8001e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x136>
 8001f62:	bf00      	nop
 8001f64:	40003800 	.word	0x40003800
 8001f68:	40003400 	.word	0x40003400

08001f6c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	f000 81a2 	beq.w	80022b6 <HAL_RCC_OscConfig+0x34a>
{
 8001f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	6803      	ldr	r3, [r0, #0]
 8001f78:	07dd      	lsls	r5, r3, #31
{
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	d52f      	bpl.n	8001fe0 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f80:	499e      	ldr	r1, [pc, #632]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 8001f82:	688a      	ldr	r2, [r1, #8]
 8001f84:	f002 020c 	and.w	r2, r2, #12
 8001f88:	2a04      	cmp	r2, #4
 8001f8a:	f000 80ed 	beq.w	8002168 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8e:	688a      	ldr	r2, [r1, #8]
 8001f90:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f94:	2a08      	cmp	r2, #8
 8001f96:	f000 80e3 	beq.w	8002160 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	6863      	ldr	r3, [r4, #4]
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	f000 80ec 	beq.w	800217c <HAL_RCC_OscConfig+0x210>
 8001fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fa8:	f000 8175 	beq.w	8002296 <HAL_RCC_OscConfig+0x32a>
 8001fac:	4d93      	ldr	r5, [pc, #588]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 8001fae:	682a      	ldr	r2, [r5, #0]
 8001fb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fb4:	602a      	str	r2, [r5, #0]
 8001fb6:	682a      	ldr	r2, [r5, #0]
 8001fb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fbc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 80e1 	bne.w	8002186 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8b6 	bl	8001134 <HAL_GetTick>
 8001fc8:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	e005      	b.n	8001fd8 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff f8b2 	bl	8001134 <HAL_GetTick>
 8001fd0:	1b80      	subs	r0, r0, r6
 8001fd2:	2864      	cmp	r0, #100	; 0x64
 8001fd4:	f200 8101 	bhi.w	80021da <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd8:	682b      	ldr	r3, [r5, #0]
 8001fda:	039b      	lsls	r3, r3, #14
 8001fdc:	d4f6      	bmi.n	8001fcc <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	079f      	lsls	r7, r3, #30
 8001fe2:	d528      	bpl.n	8002036 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe4:	4a85      	ldr	r2, [pc, #532]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 8001fe6:	6891      	ldr	r1, [r2, #8]
 8001fe8:	f011 0f0c 	tst.w	r1, #12
 8001fec:	f000 8090 	beq.w	8002110 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff0:	6891      	ldr	r1, [r2, #8]
 8001ff2:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ff6:	2908      	cmp	r1, #8
 8001ff8:	f000 8086 	beq.w	8002108 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ffc:	68e3      	ldr	r3, [r4, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 810e 	beq.w	8002220 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002004:	4b7e      	ldr	r3, [pc, #504]	; (8002200 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4e7d      	ldr	r6, [pc, #500]	; (80021fc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800200c:	f7ff f892 	bl	8001134 <HAL_GetTick>
 8002010:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	e005      	b.n	8002020 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff f88e 	bl	8001134 <HAL_GetTick>
 8002018:	1b40      	subs	r0, r0, r5
 800201a:	2802      	cmp	r0, #2
 800201c:	f200 80dd 	bhi.w	80021da <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	6833      	ldr	r3, [r6, #0]
 8002022:	0798      	lsls	r0, r3, #30
 8002024:	d5f6      	bpl.n	8002014 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	6833      	ldr	r3, [r6, #0]
 8002028:	6922      	ldr	r2, [r4, #16]
 800202a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800202e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002032:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	071a      	lsls	r2, r3, #28
 8002038:	d451      	bmi.n	80020de <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203a:	0758      	lsls	r0, r3, #29
 800203c:	d52f      	bpl.n	800209e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800203e:	4a6f      	ldr	r2, [pc, #444]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 8002040:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002042:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002046:	d07f      	beq.n	8002148 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8002048:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204a:	4e6e      	ldr	r6, [pc, #440]	; (8002204 <HAL_RCC_OscConfig+0x298>)
 800204c:	6833      	ldr	r3, [r6, #0]
 800204e:	05d9      	lsls	r1, r3, #23
 8002050:	f140 80b3 	bpl.w	80021ba <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002054:	68a3      	ldr	r3, [r4, #8]
 8002056:	2b01      	cmp	r3, #1
 8002058:	f000 80c3 	beq.w	80021e2 <HAL_RCC_OscConfig+0x276>
 800205c:	2b05      	cmp	r3, #5
 800205e:	f000 812c 	beq.w	80022ba <HAL_RCC_OscConfig+0x34e>
 8002062:	4e66      	ldr	r6, [pc, #408]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 8002064:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	6732      	str	r2, [r6, #112]	; 0x70
 800206c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800206e:	f022 0204 	bic.w	r2, r2, #4
 8002072:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002074:	2b00      	cmp	r3, #0
 8002076:	f040 80b9 	bne.w	80021ec <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff f85b 	bl	8001134 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002082:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	e005      	b.n	8002092 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7ff f855 	bl	8001134 <HAL_GetTick>
 800208a:	1bc0      	subs	r0, r0, r7
 800208c:	4540      	cmp	r0, r8
 800208e:	f200 80a4 	bhi.w	80021da <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002092:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002094:	0798      	lsls	r0, r3, #30
 8002096:	d4f6      	bmi.n	8002086 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002098:	2d00      	cmp	r5, #0
 800209a:	f040 8106 	bne.w	80022aa <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209e:	69a0      	ldr	r0, [r4, #24]
 80020a0:	b1c8      	cbz	r0, 80020d6 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a2:	4d56      	ldr	r5, [pc, #344]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 80020a4:	68ab      	ldr	r3, [r5, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	f000 80c9 	beq.w	8002242 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b0:	4b53      	ldr	r3, [pc, #332]	; (8002200 <HAL_RCC_OscConfig+0x294>)
 80020b2:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80020b6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b8:	f000 8109 	beq.w	80022ce <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff f83a 	bl	8001134 <HAL_GetTick>
 80020c0:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	e005      	b.n	80020d0 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c4:	f7ff f836 	bl	8001134 <HAL_GetTick>
 80020c8:	1b00      	subs	r0, r0, r4
 80020ca:	2802      	cmp	r0, #2
 80020cc:	f200 8085 	bhi.w	80021da <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	682b      	ldr	r3, [r5, #0]
 80020d2:	019b      	lsls	r3, r3, #6
 80020d4:	d4f6      	bmi.n	80020c4 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2000      	movs	r0, #0
}
 80020d8:	b002      	add	sp, #8
 80020da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020de:	6963      	ldr	r3, [r4, #20]
 80020e0:	b30b      	cbz	r3, 8002126 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e4:	4e45      	ldr	r6, [pc, #276]	; (80021fc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80020e6:	2201      	movs	r2, #1
 80020e8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80020ec:	f7ff f822 	bl	8001134 <HAL_GetTick>
 80020f0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f2:	e004      	b.n	80020fe <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020f4:	f7ff f81e 	bl	8001134 <HAL_GetTick>
 80020f8:	1b40      	subs	r0, r0, r5
 80020fa:	2802      	cmp	r0, #2
 80020fc:	d86d      	bhi.n	80021da <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fe:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002100:	079b      	lsls	r3, r3, #30
 8002102:	d5f7      	bpl.n	80020f4 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002104:	6823      	ldr	r3, [r4, #0]
 8002106:	e798      	b.n	800203a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002108:	6852      	ldr	r2, [r2, #4]
 800210a:	0256      	lsls	r6, r2, #9
 800210c:	f53f af76 	bmi.w	8001ffc <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002110:	4a3a      	ldr	r2, [pc, #232]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	0795      	lsls	r5, r2, #30
 8002116:	d544      	bpl.n	80021a2 <HAL_RCC_OscConfig+0x236>
 8002118:	68e2      	ldr	r2, [r4, #12]
 800211a:	2a01      	cmp	r2, #1
 800211c:	d041      	beq.n	80021a2 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800211e:	2001      	movs	r0, #1
}
 8002120:	b002      	add	sp, #8
 8002122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002126:	4a36      	ldr	r2, [pc, #216]	; (8002200 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4e34      	ldr	r6, [pc, #208]	; (80021fc <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800212a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800212e:	f7ff f801 	bl	8001134 <HAL_GetTick>
 8002132:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	e004      	b.n	8002140 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe fffd 	bl	8001134 <HAL_GetTick>
 800213a:	1b40      	subs	r0, r0, r5
 800213c:	2802      	cmp	r0, #2
 800213e:	d84c      	bhi.n	80021da <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002142:	079f      	lsls	r7, r3, #30
 8002144:	d4f7      	bmi.n	8002136 <HAL_RCC_OscConfig+0x1ca>
 8002146:	e7dd      	b.n	8002104 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800215c:	2501      	movs	r5, #1
 800215e:	e774      	b.n	800204a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002160:	684a      	ldr	r2, [r1, #4]
 8002162:	0250      	lsls	r0, r2, #9
 8002164:	f57f af19 	bpl.w	8001f9a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002168:	4a24      	ldr	r2, [pc, #144]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	0391      	lsls	r1, r2, #14
 800216e:	f57f af37 	bpl.w	8001fe0 <HAL_RCC_OscConfig+0x74>
 8002172:	6862      	ldr	r2, [r4, #4]
 8002174:	2a00      	cmp	r2, #0
 8002176:	f47f af33 	bne.w	8001fe0 <HAL_RCC_OscConfig+0x74>
 800217a:	e7d0      	b.n	800211e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217c:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002186:	f7fe ffd5 	bl	8001134 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4e1c      	ldr	r6, [pc, #112]	; (80021fc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800218c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	e004      	b.n	800219a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002190:	f7fe ffd0 	bl	8001134 <HAL_GetTick>
 8002194:	1b40      	subs	r0, r0, r5
 8002196:	2864      	cmp	r0, #100	; 0x64
 8002198:	d81f      	bhi.n	80021da <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219a:	6833      	ldr	r3, [r6, #0]
 800219c:	039a      	lsls	r2, r3, #14
 800219e:	d5f7      	bpl.n	8002190 <HAL_RCC_OscConfig+0x224>
 80021a0:	e71d      	b.n	8001fde <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a2:	4916      	ldr	r1, [pc, #88]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 80021a4:	6920      	ldr	r0, [r4, #16]
 80021a6:	680a      	ldr	r2, [r1, #0]
 80021a8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80021ac:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80021b0:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021b2:	071a      	lsls	r2, r3, #28
 80021b4:	f57f af41 	bpl.w	800203a <HAL_RCC_OscConfig+0xce>
 80021b8:	e791      	b.n	80020de <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ba:	6833      	ldr	r3, [r6, #0]
 80021bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80021c2:	f7fe ffb7 	bl	8001134 <HAL_GetTick>
 80021c6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	6833      	ldr	r3, [r6, #0]
 80021ca:	05da      	lsls	r2, r3, #23
 80021cc:	f53f af42 	bmi.w	8002054 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d0:	f7fe ffb0 	bl	8001134 <HAL_GetTick>
 80021d4:	1bc0      	subs	r0, r0, r7
 80021d6:	2802      	cmp	r0, #2
 80021d8:	d9f6      	bls.n	80021c8 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 80021da:	2003      	movs	r0, #3
}
 80021dc:	b002      	add	sp, #8
 80021de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e2:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_RCC_OscConfig+0x290>)
 80021e4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80021ec:	f7fe ffa2 	bl	8001134 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	4f02      	ldr	r7, [pc, #8]	; (80021fc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80021f2:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	e00b      	b.n	8002212 <HAL_RCC_OscConfig+0x2a6>
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	42470000 	.word	0x42470000
 8002204:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7fe ff94 	bl	8001134 <HAL_GetTick>
 800220c:	1b80      	subs	r0, r0, r6
 800220e:	4540      	cmp	r0, r8
 8002210:	d8e3      	bhi.n	80021da <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002214:	079b      	lsls	r3, r3, #30
 8002216:	d5f7      	bpl.n	8002208 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8002218:	2d00      	cmp	r5, #0
 800221a:	f43f af40 	beq.w	800209e <HAL_RCC_OscConfig+0x132>
 800221e:	e044      	b.n	80022aa <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8002220:	4a42      	ldr	r2, [pc, #264]	; (800232c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	4e43      	ldr	r6, [pc, #268]	; (8002330 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8002224:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002226:	f7fe ff85 	bl	8001134 <HAL_GetTick>
 800222a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222c:	e004      	b.n	8002238 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe ff81 	bl	8001134 <HAL_GetTick>
 8002232:	1b40      	subs	r0, r0, r5
 8002234:	2802      	cmp	r0, #2
 8002236:	d8d0      	bhi.n	80021da <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002238:	6833      	ldr	r3, [r6, #0]
 800223a:	0799      	lsls	r1, r3, #30
 800223c:	d4f7      	bmi.n	800222e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	e6f9      	b.n	8002036 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002242:	2801      	cmp	r0, #1
 8002244:	f43f af48 	beq.w	80020d8 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8002248:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002250:	4291      	cmp	r1, r2
 8002252:	f47f af64 	bne.w	800211e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002258:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225c:	4291      	cmp	r1, r2
 800225e:	f47f af5e 	bne.w	800211e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002262:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002264:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002268:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800226a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800226e:	f47f af56 	bne.w	800211e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002272:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002274:	0852      	lsrs	r2, r2, #1
 8002276:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800227a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002280:	f47f af4d 	bne.w	800211e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002284:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002286:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800228a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800228e:	bf14      	ite	ne
 8002290:	2001      	movne	r0, #1
 8002292:	2000      	moveq	r0, #0
 8002294:	e720      	b.n	80020d8 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x3c4>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022a6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a8:	e76d      	b.n	8002186 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_RCC_OscConfig+0x3c4>)
 80022ac:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b2:	6413      	str	r3, [r2, #64]	; 0x40
 80022b4:	e6f3      	b.n	800209e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 80022b6:	2001      	movs	r0, #1
}
 80022b8:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ba:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <HAL_RCC_OscConfig+0x3c4>)
 80022bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022be:	f042 0204 	orr.w	r2, r2, #4
 80022c2:	671a      	str	r2, [r3, #112]	; 0x70
 80022c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022cc:	e78e      	b.n	80021ec <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 80022ce:	f7fe ff31 	bl	8001134 <HAL_GetTick>
 80022d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d4:	e005      	b.n	80022e2 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022d6:	f7fe ff2d 	bl	8001134 <HAL_GetTick>
 80022da:	1b80      	subs	r0, r0, r6
 80022dc:	2802      	cmp	r0, #2
 80022de:	f63f af7c 	bhi.w	80021da <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e2:	682b      	ldr	r3, [r5, #0]
 80022e4:	0199      	lsls	r1, r3, #6
 80022e6:	d4f6      	bmi.n	80022d6 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022e8:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80022ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022ee:	430b      	orrs	r3, r1
 80022f0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80022f4:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 80022f8:	0852      	lsrs	r2, r2, #1
 80022fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80022fe:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002300:	490a      	ldr	r1, [pc, #40]	; (800232c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002306:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002308:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800230a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800230c:	f7fe ff12 	bl	8001134 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002310:	4d07      	ldr	r5, [pc, #28]	; (8002330 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8002312:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002314:	e005      	b.n	8002322 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002316:	f7fe ff0d 	bl	8001134 <HAL_GetTick>
 800231a:	1b00      	subs	r0, r0, r4
 800231c:	2802      	cmp	r0, #2
 800231e:	f63f af5c 	bhi.w	80021da <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	682b      	ldr	r3, [r5, #0]
 8002324:	019a      	lsls	r2, r3, #6
 8002326:	d5f6      	bpl.n	8002316 <HAL_RCC_OscConfig+0x3aa>
 8002328:	e6d5      	b.n	80020d6 <HAL_RCC_OscConfig+0x16a>
 800232a:	bf00      	nop
 800232c:	42470000 	.word	0x42470000
 8002330:	40023800 	.word	0x40023800

08002334 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002334:	4916      	ldr	r1, [pc, #88]	; (8002390 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002336:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002338:	688b      	ldr	r3, [r1, #8]
 800233a:	f003 030c 	and.w	r3, r3, #12
 800233e:	2b04      	cmp	r3, #4
 8002340:	d01b      	beq.n	800237a <HAL_RCC_GetSysClockFreq+0x46>
 8002342:	2b08      	cmp	r3, #8
 8002344:	d117      	bne.n	8002376 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002346:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002348:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002350:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002354:	d113      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	480f      	ldr	r0, [pc, #60]	; (8002394 <HAL_RCC_GetSysClockFreq+0x60>)
 8002358:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800235c:	fba1 0100 	umull	r0, r1, r1, r0
 8002360:	f7fe f9aa 	bl	80006b8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002364:	4b0a      	ldr	r3, [pc, #40]	; (8002390 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800236c:	3301      	adds	r3, #1
 800236e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002370:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002374:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002376:	4807      	ldr	r0, [pc, #28]	; (8002394 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002378:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800237a:	4807      	ldr	r0, [pc, #28]	; (8002398 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800237c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237e:	4806      	ldr	r0, [pc, #24]	; (8002398 <HAL_RCC_GetSysClockFreq+0x64>)
 8002380:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002384:	2300      	movs	r3, #0
 8002386:	fba1 0100 	umull	r0, r1, r1, r0
 800238a:	f7fe f995 	bl	80006b8 <__aeabi_uldivmod>
 800238e:	e7e9      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x30>
 8002390:	40023800 	.word	0x40023800
 8002394:	00f42400 	.word	0x00f42400
 8002398:	007a1200 	.word	0x007a1200

0800239c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800239c:	2800      	cmp	r0, #0
 800239e:	f000 8087 	beq.w	80024b0 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a2:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_RCC_ClockConfig+0x128>)
 80023a4:	6813      	ldr	r3, [r2, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	428b      	cmp	r3, r1
{
 80023ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b0:	460d      	mov	r5, r1
 80023b2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b4:	d209      	bcs.n	80023ca <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	b2cb      	uxtb	r3, r1
 80023b8:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	6813      	ldr	r3, [r2, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	428b      	cmp	r3, r1
 80023c2:	d002      	beq.n	80023ca <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80023c4:	2001      	movs	r0, #1
}
 80023c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	0798      	lsls	r0, r3, #30
 80023ce:	d514      	bpl.n	80023fa <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	0759      	lsls	r1, r3, #29
 80023d2:	d504      	bpl.n	80023de <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d4:	493c      	ldr	r1, [pc, #240]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 80023d6:	688a      	ldr	r2, [r1, #8]
 80023d8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80023dc:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023de:	071a      	lsls	r2, r3, #28
 80023e0:	d504      	bpl.n	80023ec <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023e2:	4939      	ldr	r1, [pc, #228]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 80023e4:	688a      	ldr	r2, [r1, #8]
 80023e6:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80023ea:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023ec:	4936      	ldr	r1, [pc, #216]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 80023ee:	68a0      	ldr	r0, [r4, #8]
 80023f0:	688a      	ldr	r2, [r1, #8]
 80023f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80023f6:	4302      	orrs	r2, r0
 80023f8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	07df      	lsls	r7, r3, #31
 80023fc:	d521      	bpl.n	8002442 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fe:	6862      	ldr	r2, [r4, #4]
 8002400:	2a01      	cmp	r2, #1
 8002402:	d057      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002404:	1e93      	subs	r3, r2, #2
 8002406:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 800240a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240c:	d94d      	bls.n	80024aa <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	0799      	lsls	r1, r3, #30
 8002410:	d5d8      	bpl.n	80023c4 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002412:	4e2d      	ldr	r6, [pc, #180]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 8002414:	68b3      	ldr	r3, [r6, #8]
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	4313      	orrs	r3, r2
 800241c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800241e:	f7fe fe89 	bl	8001134 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002422:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002426:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002428:	e004      	b.n	8002434 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242a:	f7fe fe83 	bl	8001134 <HAL_GetTick>
 800242e:	1bc0      	subs	r0, r0, r7
 8002430:	4540      	cmp	r0, r8
 8002432:	d844      	bhi.n	80024be <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002434:	68b3      	ldr	r3, [r6, #8]
 8002436:	6862      	ldr	r2, [r4, #4]
 8002438:	f003 030c 	and.w	r3, r3, #12
 800243c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002440:	d1f3      	bne.n	800242a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002442:	4a20      	ldr	r2, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x128>)
 8002444:	6813      	ldr	r3, [r2, #0]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	42ab      	cmp	r3, r5
 800244c:	d906      	bls.n	800245c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	b2eb      	uxtb	r3, r5
 8002450:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	6813      	ldr	r3, [r2, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	42ab      	cmp	r3, r5
 800245a:	d1b3      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	075a      	lsls	r2, r3, #29
 8002460:	d506      	bpl.n	8002470 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002462:	4919      	ldr	r1, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 8002464:	68e0      	ldr	r0, [r4, #12]
 8002466:	688a      	ldr	r2, [r1, #8]
 8002468:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800246c:	4302      	orrs	r2, r0
 800246e:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	071b      	lsls	r3, r3, #28
 8002472:	d507      	bpl.n	8002484 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002474:	4a14      	ldr	r2, [pc, #80]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 8002476:	6921      	ldr	r1, [r4, #16]
 8002478:	6893      	ldr	r3, [r2, #8]
 800247a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800247e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002482:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002484:	f7ff ff56 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 8002488:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 800248a:	4c10      	ldr	r4, [pc, #64]	; (80024cc <HAL_RCC_ClockConfig+0x130>)
 800248c:	6892      	ldr	r2, [r2, #8]
 800248e:	4910      	ldr	r1, [pc, #64]	; (80024d0 <HAL_RCC_ClockConfig+0x134>)
 8002490:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002494:	4603      	mov	r3, r0
 8002496:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8002498:	480e      	ldr	r0, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800249a:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 800249c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800249e:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80024a0:	f7fe fe02 	bl	80010a8 <HAL_InitTick>
  return HAL_OK;
 80024a4:	2000      	movs	r0, #0
}
 80024a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	0198      	lsls	r0, r3, #6
 80024ac:	d4b1      	bmi.n	8002412 <HAL_RCC_ClockConfig+0x76>
 80024ae:	e789      	b.n	80023c4 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
}
 80024b2:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <HAL_RCC_ClockConfig+0x12c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	039e      	lsls	r6, r3, #14
 80024ba:	d4aa      	bmi.n	8002412 <HAL_RCC_ClockConfig+0x76>
 80024bc:	e782      	b.n	80023c4 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80024be:	2003      	movs	r0, #3
 80024c0:	e781      	b.n	80023c6 <HAL_RCC_ClockConfig+0x2a>
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	0800cf08 	.word	0x0800cf08
 80024d0:	20000420 	.word	0x20000420
 80024d4:	20000414 	.word	0x20000414

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80024da:	4905      	ldr	r1, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80024e0:	6808      	ldr	r0, [r1, #0]
 80024e2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80024e6:	5cd3      	ldrb	r3, [r2, r3]
}
 80024e8:	40d8      	lsrs	r0, r3
 80024ea:	4770      	bx	lr
 80024ec:	40023800 	.word	0x40023800
 80024f0:	20000420 	.word	0x20000420
 80024f4:	0800cf18 	.word	0x0800cf18

080024f8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80024fa:	4905      	ldr	r1, [pc, #20]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002500:	6808      	ldr	r0, [r1, #0]
 8002502:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002506:	5cd3      	ldrb	r3, [r2, r3]
}
 8002508:	40d8      	lsrs	r0, r3
 800250a:	4770      	bx	lr
 800250c:	40023800 	.word	0x40023800
 8002510:	20000420 	.word	0x20000420
 8002514:	0800cf18 	.word	0x0800cf18

08002518 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002518:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800251a:	6803      	ldr	r3, [r0, #0]
 800251c:	f013 0f05 	tst.w	r3, #5
{
 8002520:	b083      	sub	sp, #12
 8002522:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002524:	d105      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1a>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002526:	f013 0302 	ands.w	r3, r3, #2
 800252a:	d13b      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800252c:	4618      	mov	r0, r3
}
 800252e:	b003      	add	sp, #12
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002532:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x134>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002534:	4e46      	ldr	r6, [pc, #280]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002536:	2200      	movs	r2, #0
 8002538:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800253a:	f7fe fdfb 	bl	8001134 <HAL_GetTick>
 800253e:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002540:	e004      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x34>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002542:	f7fe fdf7 	bl	8001134 <HAL_GetTick>
 8002546:	1b43      	subs	r3, r0, r5
 8002548:	2b02      	cmp	r3, #2
 800254a:	d828      	bhi.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x86>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800254c:	6833      	ldr	r3, [r6, #0]
 800254e:	011f      	lsls	r7, r3, #4
 8002550:	d4f7      	bmi.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002552:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 8002556:	071b      	lsls	r3, r3, #28
 8002558:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 800255c:	4a3b      	ldr	r2, [pc, #236]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800255e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002562:	2301      	movs	r3, #1
 8002564:	6693      	str	r3, [r2, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002566:	f7fe fde5 	bl	8001134 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800256a:	4e39      	ldr	r6, [pc, #228]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    tickstart = HAL_GetTick();
 800256c:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800256e:	e004      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002570:	f7fe fde0 	bl	8001134 <HAL_GetTick>
 8002574:	1b40      	subs	r0, r0, r5
 8002576:	2802      	cmp	r0, #2
 8002578:	d811      	bhi.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x86>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800257a:	6833      	ldr	r3, [r6, #0]
 800257c:	0118      	lsls	r0, r3, #4
 800257e:	d5f7      	bpl.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x58>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	e7d0      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8002584:	f7fe fdd6 	bl	8001134 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002588:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800258c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002590:	079b      	lsls	r3, r3, #30
 8002592:	d43c      	bmi.n	800260e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fdce 	bl	8001134 <HAL_GetTick>
 8002598:	1b80      	subs	r0, r0, r6
 800259a:	42b8      	cmp	r0, r7
 800259c:	d9f7      	bls.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x76>
        return HAL_TIMEOUT;
 800259e:	2003      	movs	r0, #3
}
 80025a0:	b003      	add	sp, #12
 80025a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a4:	4b2a      	ldr	r3, [pc, #168]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    PWR->CR |= PWR_CR_DBP;
 80025a6:	4d2b      	ldr	r5, [pc, #172]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80025a8:	2200      	movs	r2, #0
 80025aa:	9201      	str	r2, [sp, #4]
 80025ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80025be:	682b      	ldr	r3, [r5, #0]
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80025c6:	f7fe fdb5 	bl	8001134 <HAL_GetTick>
 80025ca:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025cc:	e004      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025ce:	f7fe fdb1 	bl	8001134 <HAL_GetTick>
 80025d2:	1b83      	subs	r3, r0, r6
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d8e2      	bhi.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x86>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025d8:	682b      	ldr	r3, [r5, #0]
 80025da:	05d9      	lsls	r1, r3, #23
 80025dc:	d5f7      	bpl.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xb6>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025de:	4d1c      	ldr	r5, [pc, #112]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025e0:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025e4:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80025e8:	d012      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80025ea:	f403 7140 	and.w	r1, r3, #768	; 0x300
 80025ee:	4291      	cmp	r1, r2
 80025f0:	d010      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f4:	4a15      	ldr	r2, [pc, #84]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025f6:	2101      	movs	r1, #1
 80025f8:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002600:	2100      	movs	r1, #0
 8002602:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8002606:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002608:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800260a:	07da      	lsls	r2, r3, #31
 800260c:	d4ba      	bmi.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800260e:	68e3      	ldr	r3, [r4, #12]
 8002610:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002614:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002618:	d00d      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800261a:	490d      	ldr	r1, [pc, #52]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 800261c:	688a      	ldr	r2, [r1, #8]
 800261e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002622:	608a      	str	r2, [r1, #8]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002626:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002628:	f3c3 030b 	ubfx	r3, r3, #0, #12
  return HAL_OK;
 800262c:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262e:	430b      	orrs	r3, r1
 8002630:	6713      	str	r3, [r2, #112]	; 0x70
}
 8002632:	b003      	add	sp, #12
 8002634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002638:	6882      	ldr	r2, [r0, #8]
 800263a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800263e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002642:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002646:	430a      	orrs	r2, r1
 8002648:	6082      	str	r2, [r0, #8]
 800264a:	e7eb      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800264c:	42470000 	.word	0x42470000
 8002650:	40023800 	.word	0x40023800
 8002654:	40007000 	.word	0x40007000

08002658 <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002658:	4a0a      	ldr	r2, [pc, #40]	; (8002684 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 800265a:	2303      	movs	r3, #3
 800265c:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800265e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002662:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002666:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002668:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800266c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002670:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8002672:	6891      	ldr	r1, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8002674:	6f13      	ldr	r3, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8002676:	f401 12f8 	and.w	r2, r1, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800267a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267e:	4313      	orrs	r3, r2
 8002680:	60c3      	str	r3, [r0, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8002682:	4770      	bx	lr
 8002684:	40023800 	.word	0x40023800

08002688 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002688:	2801      	cmp	r0, #1
 800268a:	d001      	beq.n	8002690 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 800268c:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800268e:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
 8002692:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8002694:	0212      	lsls	r2, r2, #8
 8002696:	d4f9      	bmi.n	800268c <HAL_RCCEx_GetPeriphCLKFreq+0x4>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800269e:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80026a0:	4b0a      	ldr	r3, [pc, #40]	; (80026cc <HAL_RCCEx_GetPeriphCLKFreq+0x44>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80026a2:	bf14      	ite	ne
 80026a4:	480a      	ldrne	r0, [pc, #40]	; (80026d0 <HAL_RCCEx_GetPeriphCLKFreq+0x48>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80026a6:	480b      	ldreq	r0, [pc, #44]	; (80026d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80026a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80026ac:	fbb0 f2f2 	udiv	r2, r0, r2
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80026b0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80026b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80026b8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80026bc:	fb02 f000 	mul.w	r0, r2, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80026c0:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80026c4:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	007a1200 	.word	0x007a1200
 80026d4:	00f42400 	.word	0x00f42400

080026d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026d8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026da:	f102 030c 	add.w	r3, r2, #12
 80026de:	e853 3f00 	ldrex	r3, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	f102 0c0c 	add.w	ip, r2, #12
 80026ea:	e84c 3100 	strex	r1, r3, [ip]
 80026ee:	2900      	cmp	r1, #0
 80026f0:	d1f3      	bne.n	80026da <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	f102 0314 	add.w	r3, r2, #20
 80026f6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026fa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fe:	f102 0c14 	add.w	ip, r2, #20
 8002702:	e84c 3100 	strex	r1, r3, [ip]
 8002706:	2900      	cmp	r1, #0
 8002708:	d1f3      	bne.n	80026f2 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800270a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800270c:	2b01      	cmp	r3, #1
 800270e:	d005      	beq.n	800271c <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002710:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002712:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8002714:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002718:	6303      	str	r3, [r0, #48]	; 0x30
}
 800271a:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800271c:	f102 030c 	add.w	r3, r2, #12
 8002720:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002724:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002728:	f102 0c0c 	add.w	ip, r2, #12
 800272c:	e84c 3100 	strex	r1, r3, [ip]
 8002730:	2900      	cmp	r1, #0
 8002732:	d1f3      	bne.n	800271c <UART_EndRxTransfer+0x44>
 8002734:	e7ec      	b.n	8002710 <UART_EndRxTransfer+0x38>
 8002736:	bf00      	nop

08002738 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002738:	6802      	ldr	r2, [r0, #0]
 800273a:	6911      	ldr	r1, [r2, #16]
{
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002740:	68c0      	ldr	r0, [r0, #12]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002742:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002744:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002748:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800274a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274c:	6111      	str	r1, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800274e:	4303      	orrs	r3, r0
 8002750:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8002752:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002754:	4303      	orrs	r3, r0
 8002756:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002758:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800275c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002760:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002762:	430b      	orrs	r3, r1
 8002764:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002766:	6953      	ldr	r3, [r2, #20]
 8002768:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800276a:	4928      	ldr	r1, [pc, #160]	; (800280c <UART_SetConfig+0xd4>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	4303      	orrs	r3, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002772:	428a      	cmp	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002774:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002776:	d029      	beq.n	80027cc <UART_SetConfig+0x94>
 8002778:	4b25      	ldr	r3, [pc, #148]	; (8002810 <UART_SetConfig+0xd8>)
 800277a:	429a      	cmp	r2, r3
 800277c:	d026      	beq.n	80027cc <UART_SetConfig+0x94>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800277e:	f7ff feab 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002782:	69e3      	ldr	r3, [r4, #28]
 8002784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002788:	d126      	bne.n	80027d8 <UART_SetConfig+0xa0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800278a:	6862      	ldr	r2, [r4, #4]
 800278c:	4d21      	ldr	r5, [pc, #132]	; (8002814 <UART_SetConfig+0xdc>)
 800278e:	1892      	adds	r2, r2, r2
 8002790:	f04f 0119 	mov.w	r1, #25
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	415b      	adcs	r3, r3
 800279a:	fba0 0101 	umull	r0, r1, r0, r1
 800279e:	f7fd ff8b 	bl	80006b8 <__aeabi_uldivmod>
 80027a2:	fba5 3200 	umull	r3, r2, r5, r0
 80027a6:	0951      	lsrs	r1, r2, #5
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	fb03 0311 	mls	r3, r3, r1, r0
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	3332      	adds	r3, #50	; 0x32
 80027b2:	fba5 2303 	umull	r2, r3, r5, r3
 80027b6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80027ba:	091b      	lsrs	r3, r3, #4
 80027bc:	6824      	ldr	r4, [r4, #0]
 80027be:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80027c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027c6:	4413      	add	r3, r2
 80027c8:	60a3      	str	r3, [r4, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027ca:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff fe94 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d0:	69e3      	ldr	r3, [r4, #28]
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d6:	d0d8      	beq.n	800278a <UART_SetConfig+0x52>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027d8:	6863      	ldr	r3, [r4, #4]
 80027da:	2119      	movs	r1, #25
 80027dc:	009a      	lsls	r2, r3, #2
 80027de:	fba0 0101 	umull	r0, r1, r0, r1
 80027e2:	0f9b      	lsrs	r3, r3, #30
 80027e4:	f7fd ff68 	bl	80006b8 <__aeabi_uldivmod>
 80027e8:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <UART_SetConfig+0xdc>)
 80027ea:	fba2 1300 	umull	r1, r3, r2, r0
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	6821      	ldr	r1, [r4, #0]
 80027f2:	2464      	movs	r4, #100	; 0x64
 80027f4:	fb04 0013 	mls	r0, r4, r3, r0
 80027f8:	0100      	lsls	r0, r0, #4
 80027fa:	3032      	adds	r0, #50	; 0x32
 80027fc:	fba2 2000 	umull	r2, r0, r2, r0
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8002806:	6088      	str	r0, [r1, #8]
}
 8002808:	bd38      	pop	{r3, r4, r5, pc}
 800280a:	bf00      	nop
 800280c:	40011000 	.word	0x40011000
 8002810:	40011400 	.word	0x40011400
 8002814:	51eb851f 	.word	0x51eb851f

08002818 <HAL_UART_Init>:
  if (huart == NULL)
 8002818:	b360      	cbz	r0, 8002874 <HAL_UART_Init+0x5c>
{
 800281a:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800281c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002820:	4604      	mov	r4, r0
 8002822:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002826:	b303      	cbz	r3, 800286a <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8002828:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800282a:	2324      	movs	r3, #36	; 0x24
 800282c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002830:	68d3      	ldr	r3, [r2, #12]
 8002832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  UART_SetConfig(huart);
 8002836:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002838:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800283a:	f7ff ff7d 	bl	8002738 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800283e:	6823      	ldr	r3, [r4, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002846:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800284e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002850:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002852:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002854:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002856:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800285a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800285e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002862:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8002866:	4628      	mov	r0, r5
}
 8002868:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800286a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800286e:	f000 fcc5 	bl	80031fc <HAL_UART_MspInit>
 8002872:	e7d9      	b.n	8002828 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8002874:	2001      	movs	r0, #1
}
 8002876:	4770      	bx	lr

08002878 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002878:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800287c:	2b20      	cmp	r3, #32
 800287e:	d11b      	bne.n	80028b8 <HAL_UART_Transmit_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8002880:	b1c1      	cbz	r1, 80028b4 <HAL_UART_Transmit_IT+0x3c>
 8002882:	b1ba      	cbz	r2, 80028b4 <HAL_UART_Transmit_IT+0x3c>
    __HAL_LOCK(huart);
 8002884:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002888:	2b01      	cmp	r3, #1
 800288a:	d015      	beq.n	80028b8 <HAL_UART_Transmit_IT+0x40>
{
 800288c:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288e:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002890:	2421      	movs	r4, #33	; 0x21
    huart->TxXferCount = Size;
 8002892:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002894:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002896:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800289a:	6804      	ldr	r4, [r0, #0]
    __HAL_UNLOCK(huart);
 800289c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->TxXferSize = Size;
 80028a0:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028a2:	68e2      	ldr	r2, [r4, #12]
    huart->pTxBuffPtr = pData;
 80028a4:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 80028aa:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80028ac:	60e2      	str	r2, [r4, #12]
}
 80028ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028b2:	4770      	bx	lr
      return HAL_ERROR;
 80028b4:	2001      	movs	r0, #1
 80028b6:	4770      	bx	lr
    return HAL_BUSY;
 80028b8:	2002      	movs	r0, #2
}
 80028ba:	4770      	bx	lr

080028bc <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80028bc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d11f      	bne.n	8002904 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 80028c4:	b1e1      	cbz	r1, 8002900 <HAL_UART_Receive_IT+0x44>
 80028c6:	b1da      	cbz	r2, 8002900 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 80028c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d019      	beq.n	8002904 <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d0:	2300      	movs	r3, #0
 80028d2:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 80028d4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 80028d8:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028da:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 80028dc:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 80028de:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028e0:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 80028e2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028e4:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 80028e8:	b973      	cbnz	r3, 8002908 <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028ea:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 80028fa:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028fc:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 80028fe:	4770      	bx	lr
      return HAL_ERROR;
 8002900:	2001      	movs	r0, #1
 8002902:	4770      	bx	lr
    return HAL_BUSY;
 8002904:	2002      	movs	r0, #2
}
 8002906:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002908:	6803      	ldr	r3, [r0, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	e7eb      	b.n	80028ec <HAL_UART_Receive_IT+0x30>

08002914 <UART_DMAAbortOnError>:
{
 8002914:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002916:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002918:	2300      	movs	r3, #0
 800291a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800291c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800291e:	f000 fe11 	bl	8003544 <HAL_UART_ErrorCallback>
}
 8002922:	bd08      	pop	{r3, pc}

08002924 <HAL_UARTEx_RxEventCallback>:
}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop

08002928 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002928:	6883      	ldr	r3, [r0, #8]
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292e:	d044      	beq.n	80029ba <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002930:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002932:	2b00      	cmp	r3, #0
 8002934:	d039      	beq.n	80029aa <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002936:	6803      	ldr	r3, [r0, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800293e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8002940:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002942:	3301      	adds	r3, #1
 8002944:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8002946:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002948:	3b01      	subs	r3, #1
 800294a:	b29b      	uxth	r3, r3
 800294c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800294e:	2b00      	cmp	r3, #0
 8002950:	d132      	bne.n	80029b8 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002952:	6802      	ldr	r2, [r0, #0]
 8002954:	68d1      	ldr	r1, [r2, #12]
 8002956:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800295a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800295c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800295e:	68d1      	ldr	r1, [r2, #12]
 8002960:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002964:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002966:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002968:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800296c:	f021 0101 	bic.w	r1, r1, #1
 8002970:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002972:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002976:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002978:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800297a:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800297c:	d128      	bne.n	80029d0 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800297e:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002980:	f102 030c 	add.w	r3, r2, #12
 8002984:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002988:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298c:	f102 0c0c 	add.w	ip, r2, #12
 8002990:	e84c 3100 	strex	r1, r3, [ip]
 8002994:	2900      	cmp	r1, #0
 8002996:	d1f3      	bne.n	8002980 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002998:	6813      	ldr	r3, [r2, #0]
 800299a:	06db      	lsls	r3, r3, #27
 800299c:	d422      	bmi.n	80029e4 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800299e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80029a0:	f7ff ffc0 	bl	8002924 <HAL_UARTEx_RxEventCallback>
}
 80029a4:	b003      	add	sp, #12
 80029a6:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029aa:	6903      	ldr	r3, [r0, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1c2      	bne.n	8002936 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029b0:	6803      	ldr	r3, [r0, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	7013      	strb	r3, [r2, #0]
 80029b6:	e7c3      	b.n	8002940 <UART_Receive_IT.part.0.isra.0+0x18>
 80029b8:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029ba:	6903      	ldr	r3, [r0, #16]
 80029bc:	b96b      	cbnz	r3, 80029da <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029be:	6802      	ldr	r2, [r0, #0]
 80029c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80029c2:	6852      	ldr	r2, [r2, #4]
 80029c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029c8:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80029cc:	6283      	str	r3, [r0, #40]	; 0x28
 80029ce:	e7ba      	b.n	8002946 <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 80029d0:	f000 fdb0 	bl	8003534 <HAL_UART_RxCpltCallback>
}
 80029d4:	b003      	add	sp, #12
 80029d6:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029da:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	7013      	strb	r3, [r2, #0]
 80029e2:	e7ad      	b.n	8002940 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80029e4:	9101      	str	r1, [sp, #4]
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	6853      	ldr	r3, [r2, #4]
 80029ec:	9301      	str	r3, [sp, #4]
 80029ee:	9b01      	ldr	r3, [sp, #4]
 80029f0:	e7d5      	b.n	800299e <UART_Receive_IT.part.0.isra.0+0x76>
 80029f2:	bf00      	nop

080029f4 <HAL_UART_IRQHandler>:
{
 80029f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029f6:	6803      	ldr	r3, [r0, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029fa:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029fc:	695e      	ldr	r6, [r3, #20]
  if (errorflags == RESET)
 80029fe:	f012 0f0f 	tst.w	r2, #15
{
 8002a02:	b082      	sub	sp, #8
 8002a04:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a06:	461d      	mov	r5, r3
  if (errorflags == RESET)
 8002a08:	d16e      	bne.n	8002ae8 <HAL_UART_IRQHandler+0xf4>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a0a:	0693      	lsls	r3, r2, #26
 8002a0c:	d502      	bpl.n	8002a14 <HAL_UART_IRQHandler+0x20>
 8002a0e:	068e      	lsls	r6, r1, #26
 8002a10:	f100 80d4 	bmi.w	8002bbc <HAL_UART_IRQHandler+0x1c8>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d00b      	beq.n	8002a32 <HAL_UART_IRQHandler+0x3e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a1a:	0616      	lsls	r6, r2, #24
 8002a1c:	d502      	bpl.n	8002a24 <HAL_UART_IRQHandler+0x30>
 8002a1e:	0608      	lsls	r0, r1, #24
 8002a20:	f100 80a2 	bmi.w	8002b68 <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a24:	0652      	lsls	r2, r2, #25
 8002a26:	d502      	bpl.n	8002a2e <HAL_UART_IRQHandler+0x3a>
 8002a28:	064b      	lsls	r3, r1, #25
 8002a2a:	f100 80bc 	bmi.w	8002ba6 <HAL_UART_IRQHandler+0x1b2>
}
 8002a2e:	b002      	add	sp, #8
 8002a30:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a32:	06d6      	lsls	r6, r2, #27
 8002a34:	d5f1      	bpl.n	8002a1a <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002a36:	06c8      	lsls	r0, r1, #27
 8002a38:	d5ef      	bpl.n	8002a1a <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	682b      	ldr	r3, [r5, #0]
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	686b      	ldr	r3, [r5, #4]
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a48:	696b      	ldr	r3, [r5, #20]
 8002a4a:	065b      	lsls	r3, r3, #25
 8002a4c:	f140 80e5 	bpl.w	8002c1a <HAL_UART_IRQHandler+0x226>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a52:	6803      	ldr	r3, [r0, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0e8      	beq.n	8002a2e <HAL_UART_IRQHandler+0x3a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a5c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d9e5      	bls.n	8002a2e <HAL_UART_IRQHandler+0x3a>
        huart->RxXferCount = nb_remaining_rx_data;
 8002a62:	85e3      	strh	r3, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a64:	69c3      	ldr	r3, [r0, #28]
 8002a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a6a:	d036      	beq.n	8002ada <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	f105 030c 	add.w	r3, r5, #12
 8002a70:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a78:	f105 010c 	add.w	r1, r5, #12
 8002a7c:	e841 3200 	strex	r2, r3, [r1]
 8002a80:	2a00      	cmp	r2, #0
 8002a82:	d1f3      	bne.n	8002a6c <HAL_UART_IRQHandler+0x78>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a84:	f105 0314 	add.w	r3, r5, #20
 8002a88:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a90:	f105 0114 	add.w	r1, r5, #20
 8002a94:	e841 3200 	strex	r2, r3, [r1]
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d1f3      	bne.n	8002a84 <HAL_UART_IRQHandler+0x90>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	f105 0314 	add.w	r3, r5, #20
 8002aa0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa8:	f105 0114 	add.w	r1, r5, #20
 8002aac:	e841 3200 	strex	r2, r3, [r1]
 8002ab0:	2a00      	cmp	r2, #0
 8002ab2:	d1f3      	bne.n	8002a9c <HAL_UART_IRQHandler+0xa8>
          huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aba:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002abc:	f105 030c 	add.w	r3, r5, #12
 8002ac0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	f105 010c 	add.w	r1, r5, #12
 8002acc:	e841 3200 	strex	r2, r3, [r1]
 8002ad0:	2a00      	cmp	r2, #0
 8002ad2:	d1f3      	bne.n	8002abc <HAL_UART_IRQHandler+0xc8>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ad4:	f7fe fcdc 	bl	8001490 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ad8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8002ada:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002adc:	1ad2      	subs	r2, r2, r3
 8002ade:	4620      	mov	r0, r4
 8002ae0:	b291      	uxth	r1, r2
 8002ae2:	f7ff ff1f 	bl	8002924 <HAL_UARTEx_RxEventCallback>
 8002ae6:	e7a2      	b.n	8002a2e <HAL_UART_IRQHandler+0x3a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ae8:	f006 0601 	and.w	r6, r6, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002aec:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8002af0:	4330      	orrs	r0, r6
 8002af2:	d08f      	beq.n	8002a14 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002af4:	07d0      	lsls	r0, r2, #31
 8002af6:	d505      	bpl.n	8002b04 <HAL_UART_IRQHandler+0x110>
 8002af8:	05cd      	lsls	r5, r1, #23
 8002afa:	d503      	bpl.n	8002b04 <HAL_UART_IRQHandler+0x110>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002afc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002afe:	f040 0001 	orr.w	r0, r0, #1
 8002b02:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b04:	0750      	lsls	r0, r2, #29
 8002b06:	d526      	bpl.n	8002b56 <HAL_UART_IRQHandler+0x162>
 8002b08:	b12e      	cbz	r6, 8002b16 <HAL_UART_IRQHandler+0x122>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b0a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b0c:	0795      	lsls	r5, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b0e:	f040 0002 	orr.w	r0, r0, #2
 8002b12:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b14:	d423      	bmi.n	8002b5e <HAL_UART_IRQHandler+0x16a>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b16:	0715      	lsls	r5, r2, #28
 8002b18:	d507      	bpl.n	8002b2a <HAL_UART_IRQHandler+0x136>
 8002b1a:	f001 0020 	and.w	r0, r1, #32
 8002b1e:	4330      	orrs	r0, r6
 8002b20:	d003      	beq.n	8002b2a <HAL_UART_IRQHandler+0x136>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b22:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002b24:	f040 0008 	orr.w	r0, r0, #8
 8002b28:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b2a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	f43f af7e 	beq.w	8002a2e <HAL_UART_IRQHandler+0x3a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b32:	0690      	lsls	r0, r2, #26
 8002b34:	d502      	bpl.n	8002b3c <HAL_UART_IRQHandler+0x148>
 8002b36:	068a      	lsls	r2, r1, #26
 8002b38:	f100 80a8 	bmi.w	8002c8c <HAL_UART_IRQHandler+0x298>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3c:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b3e:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b44:	f005 0508 	and.w	r5, r5, #8
 8002b48:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8002b4a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b4c:	d140      	bne.n	8002bd0 <HAL_UART_IRQHandler+0x1dc>
        HAL_UART_ErrorCallback(huart);
 8002b4e:	f000 fcf9 	bl	8003544 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b52:	6425      	str	r5, [r4, #64]	; 0x40
 8002b54:	e76b      	b.n	8002a2e <HAL_UART_IRQHandler+0x3a>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b56:	0790      	lsls	r0, r2, #30
 8002b58:	d5dd      	bpl.n	8002b16 <HAL_UART_IRQHandler+0x122>
 8002b5a:	2e00      	cmp	r6, #0
 8002b5c:	d0db      	beq.n	8002b16 <HAL_UART_IRQHandler+0x122>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b5e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002b60:	f040 0004 	orr.w	r0, r0, #4
 8002b64:	6420      	str	r0, [r4, #64]	; 0x40
 8002b66:	e7d6      	b.n	8002b16 <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b68:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8002b6c:	2b21      	cmp	r3, #33	; 0x21
 8002b6e:	f47f af5e 	bne.w	8002a2e <HAL_UART_IRQHandler+0x3a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b72:	68a3      	ldr	r3, [r4, #8]
 8002b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b78:	f000 8092 	beq.w	8002ca0 <HAL_UART_IRQHandler+0x2ac>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b7c:	6a23      	ldr	r3, [r4, #32]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	6222      	str	r2, [r4, #32]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	606b      	str	r3, [r5, #4]
    if (--huart->TxXferCount == 0U)
 8002b86:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	84e3      	strh	r3, [r4, #38]	; 0x26
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f47f af4d 	bne.w	8002a2e <HAL_UART_IRQHandler+0x3a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b94:	68eb      	ldr	r3, [r5, #12]
 8002b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b9a:	60eb      	str	r3, [r5, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b9c:	68eb      	ldr	r3, [r5, #12]
 8002b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba2:	60eb      	str	r3, [r5, #12]
 8002ba4:	e743      	b.n	8002a2e <HAL_UART_IRQHandler+0x3a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ba6:	68eb      	ldr	r3, [r5, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002ba8:	2220      	movs	r2, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bae:	60eb      	str	r3, [r5, #12]
  HAL_UART_TxCpltCallback(huart);
 8002bb0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8002bb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002bb6:	f000 fcb5 	bl	8003524 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8002bba:	e738      	b.n	8002a2e <HAL_UART_IRQHandler+0x3a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bbc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002bc0:	2b22      	cmp	r3, #34	; 0x22
 8002bc2:	f47f af34 	bne.w	8002a2e <HAL_UART_IRQHandler+0x3a>
}
 8002bc6:	b002      	add	sp, #8
 8002bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002bcc:	f7ff beac 	b.w	8002928 <UART_Receive_IT.part.0.isra.0>
        UART_EndRxTransfer(huart);
 8002bd0:	f7ff fd82 	bl	80026d8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd4:	6825      	ldr	r5, [r4, #0]
 8002bd6:	696b      	ldr	r3, [r5, #20]
 8002bd8:	065b      	lsls	r3, r3, #25
 8002bda:	d51a      	bpl.n	8002c12 <HAL_UART_IRQHandler+0x21e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bdc:	f105 0314 	add.w	r3, r5, #20
 8002be0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	f105 0114 	add.w	r1, r5, #20
 8002bec:	e841 3200 	strex	r2, r3, [r1]
 8002bf0:	2a00      	cmp	r2, #0
 8002bf2:	d1f3      	bne.n	8002bdc <HAL_UART_IRQHandler+0x1e8>
          if (huart->hdmarx != NULL)
 8002bf4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002bf6:	b160      	cbz	r0, 8002c12 <HAL_UART_IRQHandler+0x21e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <HAL_UART_IRQHandler+0x2c4>)
 8002bfa:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bfc:	f7fe fc90 	bl	8001520 <HAL_DMA_Abort_IT>
 8002c00:	2800      	cmp	r0, #0
 8002c02:	f43f af14 	beq.w	8002a2e <HAL_UART_IRQHandler+0x3a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002c08:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8002c0a:	b002      	add	sp, #8
 8002c0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c10:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002c12:	4620      	mov	r0, r4
 8002c14:	f000 fc96 	bl	8003544 <HAL_UART_ErrorCallback>
 8002c18:	e709      	b.n	8002a2e <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c1a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8002c1c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8002c1e:	b29b      	uxth	r3, r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c20:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f43f af03 	beq.w	8002a2e <HAL_UART_IRQHandler+0x3a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c28:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8002c2a:	1a8a      	subs	r2, r1, r2
 8002c2c:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8002c2e:	2900      	cmp	r1, #0
 8002c30:	f43f aefd 	beq.w	8002a2e <HAL_UART_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c34:	f105 030c 	add.w	r3, r5, #12
 8002c38:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	f105 000c 	add.w	r0, r5, #12
 8002c44:	e840 3200 	strex	r2, r3, [r0]
 8002c48:	2a00      	cmp	r2, #0
 8002c4a:	d1f3      	bne.n	8002c34 <HAL_UART_IRQHandler+0x240>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	f105 0314 	add.w	r3, r5, #20
 8002c50:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c54:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c58:	f105 0014 	add.w	r0, r5, #20
 8002c5c:	e840 3200 	strex	r2, r3, [r0]
 8002c60:	2a00      	cmp	r2, #0
 8002c62:	d1f3      	bne.n	8002c4c <HAL_UART_IRQHandler+0x258>
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	2320      	movs	r3, #32
 8002c66:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6a:	6322      	str	r2, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	f105 030c 	add.w	r3, r5, #12
 8002c70:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c74:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	f105 000c 	add.w	r0, r5, #12
 8002c7c:	e840 3200 	strex	r2, r3, [r0]
 8002c80:	2a00      	cmp	r2, #0
 8002c82:	d1f3      	bne.n	8002c6c <HAL_UART_IRQHandler+0x278>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c84:	4620      	mov	r0, r4
 8002c86:	f7ff fe4d 	bl	8002924 <HAL_UARTEx_RxEventCallback>
 8002c8a:	e6d0      	b.n	8002a2e <HAL_UART_IRQHandler+0x3a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002c8c:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8002c90:	2a22      	cmp	r2, #34	; 0x22
 8002c92:	f47f af53 	bne.w	8002b3c <HAL_UART_IRQHandler+0x148>
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff fe46 	bl	8002928 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	e74d      	b.n	8002b3c <HAL_UART_IRQHandler+0x148>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca0:	6923      	ldr	r3, [r4, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f47f af6a 	bne.w	8002b7c <HAL_UART_IRQHandler+0x188>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ca8:	6a23      	ldr	r3, [r4, #32]
 8002caa:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cb2:	606a      	str	r2, [r5, #4]
      huart->pTxBuffPtr += 2U;
 8002cb4:	6223      	str	r3, [r4, #32]
 8002cb6:	e766      	b.n	8002b86 <HAL_UART_IRQHandler+0x192>
 8002cb8:	08002915 	.word	0x08002915

08002cbc <inference_callback>:
    printf("[wake word]\n");
    BSP_LED_On(LED4);
}
//extern void dance(), walk();

static void inference_callback(pv_inference_t *inference) {
 8002cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc0:	4605      	mov	r5, r0
	BSP_LED_Off(LED4);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fe f860 	bl	8000d88 <BSP_LED_Off>
    printf("{\n");
 8002cc8:	483f      	ldr	r0, [pc, #252]	; (8002dc8 <inference_callback+0x10c>)
 8002cca:	f007 fe47 	bl	800a95c <puts>
    printf("    is_understood : '%s',\n", (inference->is_understood ? "true" : "false"));
 8002cce:	4b3f      	ldr	r3, [pc, #252]	; (8002dcc <inference_callback+0x110>)
 8002cd0:	7829      	ldrb	r1, [r5, #0]
 8002cd2:	4a3f      	ldr	r2, [pc, #252]	; (8002dd0 <inference_callback+0x114>)
 8002cd4:	483f      	ldr	r0, [pc, #252]	; (8002dd4 <inference_callback+0x118>)
 8002cd6:	2900      	cmp	r1, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	4611      	movne	r1, r2
 8002cdc:	4619      	moveq	r1, r3
 8002cde:	f007 fdb7 	bl	800a850 <iprintf>
    if (inference->is_understood) {
 8002ce2:	782b      	ldrb	r3, [r5, #0]
 8002ce4:	bb5b      	cbnz	r3, 8002d3e <inference_callback+0x82>
 8002ce6:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8002dec <inference_callback+0x130>
        		}
            }
            printf("    }\n");
        }
    }
    printf("}\n\n");
 8002cea:	483b      	ldr	r0, [pc, #236]	; (8002dd8 <inference_callback+0x11c>)
 8002cec:	f007 fe36 	bl	800a95c <puts>
 8002cf0:	240a      	movs	r4, #10
    for (int32_t i = 0; i < 10; i++) {
    	BSP_LED_Toggle(LED3);
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	f7fe f856 	bl	8000da4 <BSP_LED_Toggle>
    	BSP_LED_Toggle(LED4);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7fe f853 	bl	8000da4 <BSP_LED_Toggle>
    	BSP_LED_Toggle(LED5);
 8002cfe:	2002      	movs	r0, #2
 8002d00:	f7fe f850 	bl	8000da4 <BSP_LED_Toggle>
    	BSP_LED_Toggle(LED6);
 8002d04:	2003      	movs	r0, #3
 8002d06:	f7fe f84d 	bl	8000da4 <BSP_LED_Toggle>
    	HAL_Delay(30);
 8002d0a:	201e      	movs	r0, #30
 8002d0c:	f7fe fa18 	bl	8001140 <HAL_Delay>
    for (int32_t i = 0; i < 10; i++) {
 8002d10:	3c01      	subs	r4, #1
 8002d12:	d1ee      	bne.n	8002cf2 <inference_callback+0x36>
    }
    pv_inference_delete(inference);
 8002d14:	4628      	mov	r0, r5
 8002d16:	f002 fb97 	bl	8005448 <pv_inference_delete>
    if (WALK) uartTx(0);
 8002d1a:	f898 3000 	ldrb.w	r3, [r8]
 8002d1e:	b94b      	cbnz	r3, 8002d34 <inference_callback+0x78>
    else if (STAND) uartTx(1);
 8002d20:	4b2e      	ldr	r3, [pc, #184]	; (8002ddc <inference_callback+0x120>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b90b      	cbnz	r3, 8002d2a <inference_callback+0x6e>
}
 8002d26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    else if (STAND) uartTx(1);
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f000 bbbc 	b.w	80034ac <uartTx>
    if (WALK) uartTx(0);
 8002d34:	4620      	mov	r0, r4
}
 8002d36:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (WALK) uartTx(0);
 8002d3a:	f000 bbb7 	b.w	80034ac <uartTx>
        printf("    intent : '%s',\n", inference->intent);
 8002d3e:	6869      	ldr	r1, [r5, #4]
 8002d40:	4827      	ldr	r0, [pc, #156]	; (8002de0 <inference_callback+0x124>)
 8002d42:	f007 fd85 	bl	800a850 <iprintf>
        if (inference->num_slots > 0) {
 8002d46:	68ab      	ldr	r3, [r5, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	ddcc      	ble.n	8002ce6 <inference_callback+0x2a>
            printf("    slots : {\n");
 8002d4c:	4825      	ldr	r0, [pc, #148]	; (8002de4 <inference_callback+0x128>)
 8002d4e:	f007 fe05 	bl	800a95c <puts>
            for (int32_t i = 0; i < inference->num_slots; i++) {
 8002d52:	68ab      	ldr	r3, [r5, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	dd33      	ble.n	8002dc0 <inference_callback+0x104>
                printf("        '%s' : '%s',\n", inference->slots[i], inference->values[i]);
 8002d58:	692e      	ldr	r6, [r5, #16]
 8002d5a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8002dec <inference_callback+0x130>
 8002d5e:	f8df a090 	ldr.w	sl, [pc, #144]	; 8002df0 <inference_callback+0x134>
                if(strcmp(inference->values[i], "penthouse")==0){
 8002d62:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8002df4 <inference_callback+0x138>
                }else if (strcmp(inference->values[i], "p one") == 0){
 8002d66:	f8df b090 	ldr.w	fp, [pc, #144]	; 8002df8 <inference_callback+0x13c>
            for (int32_t i = 0; i < inference->num_slots; i++) {
 8002d6a:	2400      	movs	r4, #0
 8002d6c:	e006      	b.n	8002d7c <inference_callback+0xc0>
                	WALK =1;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	f888 3000 	strb.w	r3, [r8]
            for (int32_t i = 0; i < inference->num_slots; i++) {
 8002d74:	68ab      	ldr	r3, [r5, #8]
 8002d76:	3401      	adds	r4, #1
 8002d78:	42a3      	cmp	r3, r4
 8002d7a:	dd1d      	ble.n	8002db8 <inference_callback+0xfc>
                printf("        '%s' : '%s',\n", inference->slots[i], inference->values[i]);
 8002d7c:	68eb      	ldr	r3, [r5, #12]
 8002d7e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002d82:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8002d86:	4650      	mov	r0, sl
 8002d88:	f007 fd62 	bl	800a850 <iprintf>
                if(strcmp(inference->values[i], "penthouse")==0){
 8002d8c:	692e      	ldr	r6, [r5, #16]
 8002d8e:	f856 7024 	ldr.w	r7, [r6, r4, lsl #2]
 8002d92:	4649      	mov	r1, r9
 8002d94:	4638      	mov	r0, r7
 8002d96:	f7fd fa1b 	bl	80001d0 <strcmp>
 8002d9a:	2800      	cmp	r0, #0
 8002d9c:	d0e7      	beq.n	8002d6e <inference_callback+0xb2>
                }else if (strcmp(inference->values[i], "p one") == 0){
 8002d9e:	4638      	mov	r0, r7
 8002da0:	4659      	mov	r1, fp
 8002da2:	f7fd fa15 	bl	80001d0 <strcmp>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d1e4      	bne.n	8002d74 <inference_callback+0xb8>
                	STAND = 1;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <inference_callback+0x120>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	701a      	strb	r2, [r3, #0]
            for (int32_t i = 0; i < inference->num_slots; i++) {
 8002db0:	68ab      	ldr	r3, [r5, #8]
 8002db2:	3401      	adds	r4, #1
 8002db4:	42a3      	cmp	r3, r4
 8002db6:	dce1      	bgt.n	8002d7c <inference_callback+0xc0>
            printf("    }\n");
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <inference_callback+0x12c>)
 8002dba:	f007 fdcf 	bl	800a95c <puts>
 8002dbe:	e794      	b.n	8002cea <inference_callback+0x2e>
 8002dc0:	f8df 8028 	ldr.w	r8, [pc, #40]	; 8002dec <inference_callback+0x130>
 8002dc4:	e7f8      	b.n	8002db8 <inference_callback+0xfc>
 8002dc6:	bf00      	nop
 8002dc8:	0800b9f4 	.word	0x0800b9f4
 8002dcc:	0800b9b0 	.word	0x0800b9b0
 8002dd0:	0800b9a8 	.word	0x0800b9a8
 8002dd4:	0800b9b8 	.word	0x0800b9b8
 8002dd8:	0800ba2c 	.word	0x0800ba2c
 8002ddc:	20000728 	.word	0x20000728
 8002de0:	0800b9d4 	.word	0x0800b9d4
 8002de4:	0800b9e8 	.word	0x0800b9e8
 8002de8:	0800b9f8 	.word	0x0800b9f8
 8002dec:	20000729 	.word	0x20000729
 8002df0:	0800ba00 	.word	0x0800ba00
 8002df4:	0800ba18 	.word	0x0800ba18
 8002df8:	0800ba24 	.word	0x0800ba24

08002dfc <wake_word_callback>:
static void wake_word_callback(void) {
 8002dfc:	b508      	push	{r3, lr}
    printf("[wake word]\n");
 8002dfe:	4804      	ldr	r0, [pc, #16]	; (8002e10 <wake_word_callback+0x14>)
 8002e00:	f007 fdac 	bl	800a95c <puts>
}
 8002e04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BSP_LED_On(LED4);
 8002e08:	2000      	movs	r0, #0
 8002e0a:	f7fd bfaf 	b.w	8000d6c <BSP_LED_On>
 8002e0e:	bf00      	nop
 8002e10:	0800ba30 	.word	0x0800ba30

08002e14 <main>:

static void error_handler(void) {
    while(true);
}

int main(void) {
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	b08a      	sub	sp, #40	; 0x28

	uartSendInit();
 8002e18:	f000 fad0 	bl	80033bc <uartSendInit>

	pv_status_t status = pv_board_init();
 8002e1c:	f000 f948 	bl	80030b0 <pv_board_init>
    if (status != PV_STATUS_SUCCESS) {
 8002e20:	b100      	cbz	r0, 8002e24 <main+0x10>
    while(true);
 8002e22:	e7fe      	b.n	8002e22 <main+0xe>
        error_handler();
    }

    const uint8_t *board_uuid = pv_get_uuid();
 8002e24:	f000 f93e 	bl	80030a4 <pv_get_uuid>
 8002e28:	4605      	mov	r5, r0
    printf("UUID: ");
 8002e2a:	483b      	ldr	r0, [pc, #236]	; (8002f18 <main+0x104>)
    for (uint32_t i = 0; i < pv_get_uuid_size(); i++) {
        printf(" %.2x", board_uuid[i]);
 8002e2c:	4e3b      	ldr	r6, [pc, #236]	; (8002f1c <main+0x108>)
 8002e2e:	1e6c      	subs	r4, r5, #1
    printf("UUID: ");
 8002e30:	f007 fd0e 	bl	800a850 <iprintf>
    for (uint32_t i = 0; i < pv_get_uuid_size(); i++) {
 8002e34:	f1c5 0501 	rsb	r5, r5, #1
 8002e38:	e003      	b.n	8002e42 <main+0x2e>
        printf(" %.2x", board_uuid[i]);
 8002e3a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8002e3e:	f007 fd07 	bl	800a850 <iprintf>
    for (uint32_t i = 0; i < pv_get_uuid_size(); i++) {
 8002e42:	f000 f933 	bl	80030ac <pv_get_uuid_size>
 8002e46:	192b      	adds	r3, r5, r4
 8002e48:	4298      	cmp	r0, r3
        printf(" %.2x", board_uuid[i]);
 8002e4a:	4630      	mov	r0, r6
    for (uint32_t i = 0; i < pv_get_uuid_size(); i++) {
 8002e4c:	d8f5      	bhi.n	8002e3a <main+0x26>
    }
    printf("\r\n");
 8002e4e:	4834      	ldr	r0, [pc, #208]	; (8002f20 <main+0x10c>)
 8002e50:	f007 fd84 	bl	800a95c <puts>

    status = pv_audio_rec_init();
 8002e54:	f000 f880 	bl	8002f58 <pv_audio_rec_init>
    if (status != PV_STATUS_SUCCESS) {
 8002e58:	b950      	cbnz	r0, 8002e70 <main+0x5c>
        printf("Audio init failed with '%s'", pv_status_to_string(status));
        error_handler();
    }

    status = pv_audio_rec_start();
 8002e5a:	f000 f899 	bl	8002f90 <pv_audio_rec_start>
    if (status != PV_STATUS_SUCCESS) {
 8002e5e:	4604      	mov	r4, r0
 8002e60:	b168      	cbz	r0, 8002e7e <main+0x6a>
        printf("Recording audio failed with '%s'", pv_status_to_string(status));
 8002e62:	f002 fac7 	bl	80053f4 <pv_status_to_string>
 8002e66:	4601      	mov	r1, r0
 8002e68:	482e      	ldr	r0, [pc, #184]	; (8002f24 <main+0x110>)
 8002e6a:	f007 fcf1 	bl	800a850 <iprintf>
    while(true);
 8002e6e:	e7fe      	b.n	8002e6e <main+0x5a>
        printf("Audio init failed with '%s'", pv_status_to_string(status));
 8002e70:	f002 fac0 	bl	80053f4 <pv_status_to_string>
 8002e74:	4601      	mov	r1, r0
 8002e76:	482c      	ldr	r0, [pc, #176]	; (8002f28 <main+0x114>)
 8002e78:	f007 fcea 	bl	800a850 <iprintf>
    while(true);
 8002e7c:	e7fe      	b.n	8002e7c <main+0x68>
        error_handler();
    }

    pv_picovoice_t *handle = NULL;

    status = pv_picovoice_init(
 8002e7e:	4a2b      	ldr	r2, [pc, #172]	; (8002f2c <main+0x118>)
 8002e80:	482b      	ldr	r0, [pc, #172]	; (8002f30 <main+0x11c>)
 8002e82:	492c      	ldr	r1, [pc, #176]	; (8002f34 <main+0x120>)
 8002e84:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <main+0x124>)
    pv_picovoice_t *handle = NULL;
 8002e86:	9408      	str	r4, [sp, #32]
    status = pv_picovoice_init(
 8002e88:	ad08      	add	r5, sp, #32
 8002e8a:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	9204      	str	r2, [sp, #16]
 8002e92:	f640 72dc 	movw	r2, #4060	; 0xfdc
 8002e96:	e9cd 2002 	strd	r2, r0, [sp, #8]
 8002e9a:	e9cd 3100 	strd	r3, r1, [sp]
 8002e9e:	4a27      	ldr	r2, [pc, #156]	; (8002f3c <main+0x128>)
 8002ea0:	4827      	ldr	r0, [pc, #156]	; (8002f40 <main+0x12c>)
 8002ea2:	f44f 736f 	mov.w	r3, #956	; 0x3bc
 8002ea6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002eaa:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002eae:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8002eb2:	f44f 318c 	mov.w	r1, #71680	; 0x11800
 8002eb6:	f002 fb75 	bl	80055a4 <pv_picovoice_init>
            RHINO_SENSITIVITY,
            RHINO_ENDPOINT_DURATION_SEC,
            RHINO_REQUIRE_ENDPOINT,
            inference_callback,
            &handle);
    if (status != PV_STATUS_SUCCESS) {
 8002eba:	4603      	mov	r3, r0
 8002ebc:	b960      	cbnz	r0, 8002ed8 <main+0xc4>
        printf("Picovoice init failed with '%s'", pv_status_to_string(status));
        error_handler();
    }

    const char *rhino_context = NULL;
    status = pv_picovoice_context_info(handle, &rhino_context);
 8002ebe:	9808      	ldr	r0, [sp, #32]
    const char *rhino_context = NULL;
 8002ec0:	9309      	str	r3, [sp, #36]	; 0x24
    status = pv_picovoice_context_info(handle, &rhino_context);
 8002ec2:	a909      	add	r1, sp, #36	; 0x24
 8002ec4:	f002 fc48 	bl	8005758 <pv_picovoice_context_info>
    if (status != PV_STATUS_SUCCESS) {
 8002ec8:	b168      	cbz	r0, 8002ee6 <main+0xd2>
        printf("retrieving context info failed with '%s'", pv_status_to_string(status));
 8002eca:	f002 fa93 	bl	80053f4 <pv_status_to_string>
 8002ece:	4601      	mov	r1, r0
 8002ed0:	481c      	ldr	r0, [pc, #112]	; (8002f44 <main+0x130>)
 8002ed2:	f007 fcbd 	bl	800a850 <iprintf>
    while(true);
 8002ed6:	e7fe      	b.n	8002ed6 <main+0xc2>
        printf("Picovoice init failed with '%s'", pv_status_to_string(status));
 8002ed8:	f002 fa8c 	bl	80053f4 <pv_status_to_string>
 8002edc:	4601      	mov	r1, r0
 8002ede:	481a      	ldr	r0, [pc, #104]	; (8002f48 <main+0x134>)
 8002ee0:	f007 fcb6 	bl	800a850 <iprintf>
    while(true);
 8002ee4:	e7fe      	b.n	8002ee4 <main+0xd0>
        error_handler();
    }
    printf("Rhino context info: %s\r\n", rhino_context);
 8002ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ee8:	4818      	ldr	r0, [pc, #96]	; (8002f4c <main+0x138>)
 8002eea:	f007 fcb1 	bl	800a850 <iprintf>
    printf("hello hello hello");
 8002eee:	4818      	ldr	r0, [pc, #96]	; (8002f50 <main+0x13c>)
 8002ef0:	f007 fcae 	bl	800a850 <iprintf>

    while (true) {
        const int16_t *buffer = pv_audio_rec_get_new_buffer();
 8002ef4:	f000 f85c 	bl	8002fb0 <pv_audio_rec_get_new_buffer>
        if (buffer) {
 8002ef8:	4601      	mov	r1, r0
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d0fa      	beq.n	8002ef4 <main+0xe0>
            const pv_status_t status = pv_picovoice_process(handle, buffer);
 8002efe:	9808      	ldr	r0, [sp, #32]
 8002f00:	f002 fb58 	bl	80055b4 <pv_picovoice_process>
            if (status != PV_STATUS_SUCCESS) {
 8002f04:	2800      	cmp	r0, #0
 8002f06:	d0f5      	beq.n	8002ef4 <main+0xe0>
                printf("Picovoice process failed with '%s'", pv_status_to_string(status));
 8002f08:	f002 fa74 	bl	80053f4 <pv_status_to_string>
 8002f0c:	4601      	mov	r1, r0
 8002f0e:	4811      	ldr	r0, [pc, #68]	; (8002f54 <main+0x140>)
 8002f10:	f007 fc9e 	bl	800a850 <iprintf>
    while(true);
 8002f14:	e7fe      	b.n	8002f14 <main+0x100>
 8002f16:	bf00      	nop
 8002f18:	0800ba3c 	.word	0x0800ba3c
 8002f1c:	0800ba44 	.word	0x0800ba44
 8002f20:	0800ba4c 	.word	0x0800ba4c
 8002f24:	0800ba6c 	.word	0x0800ba6c
 8002f28:	0800ba50 	.word	0x0800ba50
 8002f2c:	08002cbd 	.word	0x08002cbd
 8002f30:	0800bb70 	.word	0x0800bb70
 8002f34:	08002dfd 	.word	0x08002dfd
 8002f38:	0800cb4c 	.word	0x0800cb4c
 8002f3c:	20000730 	.word	0x20000730
 8002f40:	0800ba90 	.word	0x0800ba90
 8002f44:	0800baec 	.word	0x0800baec
 8002f48:	0800bacc 	.word	0x0800bacc
 8002f4c:	0800bb18 	.word	0x0800bb18
 8002f50:	0800bb34 	.word	0x0800bb34
 8002f54:	0800bb48 	.word	0x0800bb48

08002f58 <pv_audio_rec_init>:
    uint16_t *record_pcm_buffer;
    bool is_recording;
} pv_audio_rec;

pv_status_t pv_audio_rec_init(void) {
    pv_audio_rec.channel_number = PV_AUDIO_REC_CHANNEL_NUMBER;
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <pv_audio_rec_init+0x30>)
    pv_audio_rec.audio_frequency = PV_AUDIO_REC_AUDIO_FREQUENCY;
    pv_audio_rec.record_buffer_size = PV_AUDIO_REC_RECORD_BUFFER_SIZE;
 8002f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
pv_status_t pv_audio_rec_init(void) {
 8002f5e:	b510      	push	{r4, lr}
    pv_audio_rec.channel_number = PV_AUDIO_REC_CHANNEL_NUMBER;
 8002f60:	2201      	movs	r2, #1
    pv_audio_rec.record_pcm_buffer = record_pcm_buffer;
 8002f62:	4c0a      	ldr	r4, [pc, #40]	; (8002f8c <pv_audio_rec_init+0x34>)
    pv_audio_rec.record_buffer_size = PV_AUDIO_REC_RECORD_BUFFER_SIZE;
 8002f64:	6099      	str	r1, [r3, #8]
    pv_audio_rec.audio_frequency = PV_AUDIO_REC_AUDIO_FREQUENCY;
 8002f66:	f44f 507a 	mov.w	r0, #16000	; 0x3e80

    if (BSP_AUDIO_IN_Init(PV_AUDIO_REC_AUDIO_FREQUENCY, DEFAULT_AUDIO_IN_BIT_RESOLUTION, PV_AUDIO_REC_CHANNEL_NUMBER) != AUDIO_OK) {
 8002f6a:	2110      	movs	r1, #16
    pv_audio_rec.audio_frequency = PV_AUDIO_REC_AUDIO_FREQUENCY;
 8002f6c:	e9c3 2000 	strd	r2, r0, [r3]
    pv_audio_rec.record_pcm_buffer = record_pcm_buffer;
 8002f70:	60dc      	str	r4, [r3, #12]
    if (BSP_AUDIO_IN_Init(PV_AUDIO_REC_AUDIO_FREQUENCY, DEFAULT_AUDIO_IN_BIT_RESOLUTION, PV_AUDIO_REC_CHANNEL_NUMBER) != AUDIO_OK) {
 8002f72:	f7fd ffff 	bl	8000f74 <BSP_AUDIO_IN_Init>
 8002f76:	b920      	cbnz	r0, 8002f82 <pv_audio_rec_init+0x2a>
        return PV_STATUS_INVALID_STATE;
    }
    if (BSP_AUDIO_IN_SetVolume(PV_AUDIO_REC_VOLUME_LEVEL) != AUDIO_OK) {
 8002f78:	2064      	movs	r0, #100	; 0x64
 8002f7a:	f7fd ff3b 	bl	8000df4 <BSP_AUDIO_IN_SetVolume>
 8002f7e:	b900      	cbnz	r0, 8002f82 <pv_audio_rec_init+0x2a>
        return PV_STATUS_INVALID_STATE;
    }
    return PV_STATUS_SUCCESS;
}
 8002f80:	bd10      	pop	{r4, pc}
        return PV_STATUS_INVALID_STATE;
 8002f82:	2006      	movs	r0, #6
}
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	bf00      	nop
 8002f88:	20012734 	.word	0x20012734
 8002f8c:	20012748 	.word	0x20012748

08002f90 <pv_audio_rec_start>:

pv_status_t pv_audio_rec_start(void) {
 8002f90:	b508      	push	{r3, lr}
    if (BSP_AUDIO_IN_Record((uint16_t*)(record_pdm_buffer), AUDIO_IN_PDM_BUFFER_SIZE) != AUDIO_OK) {
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <pv_audio_rec_start+0x18>)
 8002f94:	2180      	movs	r1, #128	; 0x80
 8002f96:	f7fd ff21 	bl	8000ddc <BSP_AUDIO_IN_Record>
 8002f9a:	b918      	cbnz	r0, 8002fa4 <pv_audio_rec_start+0x14>
        return PV_STATUS_INVALID_STATE;
    }
    pv_audio_rec.is_recording = true;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <pv_audio_rec_start+0x1c>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	741a      	strb	r2, [r3, #16]
    return PV_STATUS_SUCCESS;
}
 8002fa2:	bd08      	pop	{r3, pc}
        return PV_STATUS_INVALID_STATE;
 8002fa4:	2006      	movs	r0, #6
}
 8002fa6:	bd08      	pop	{r3, pc}
 8002fa8:	20012788 	.word	0x20012788
 8002fac:	20012734 	.word	0x20012734

08002fb0 <pv_audio_rec_get_new_buffer>:

const int16_t *pv_audio_rec_get_new_buffer(void) {
    if (read_index == -1) {
 8002fb0:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <pv_audio_rec_get_new_buffer+0x20>)
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	1c43      	adds	r3, r0, #1
 8002fb6:	d008      	beq.n	8002fca <pv_audio_rec_get_new_buffer+0x1a>
        return NULL;
    }

    if (last_read_index == read_index) {
 8002fb8:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <pv_audio_rec_get_new_buffer+0x24>)
 8002fba:	6813      	ldr	r3, [r2, #0]
 8002fbc:	4298      	cmp	r0, r3
 8002fbe:	d004      	beq.n	8002fca <pv_audio_rec_get_new_buffer+0x1a>
        return NULL;
    }

    last_read_index = read_index;

    return ping_pong_buffer[read_index];
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <pv_audio_rec_get_new_buffer+0x28>)
    last_read_index = read_index;
 8002fc2:	6010      	str	r0, [r2, #0]
    return ping_pong_buffer[read_index];
 8002fc4:	eb03 2080 	add.w	r0, r3, r0, lsl #10
 8002fc8:	4770      	bx	lr
        return NULL;
 8002fca:	2000      	movs	r0, #0
}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	2000041c 	.word	0x2000041c
 8002fd4:	20000418 	.word	0x20000418
 8002fd8:	20011f34 	.word	0x20011f34

08002fdc <BSP_AUDIO_IN_TransferComplete_CallBack>:

void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BSP_AUDIO_IN_PDMToPCM((uint16_t*) &record_pdm_buffer[AUDIO_IN_PDM_BUFFER_SIZE / 2],
            record_pcm_buffer);
    for (uint32_t i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE; i++) {
        ping_pong_buffer[write_index][buffer_index++] = record_pcm_buffer[i * 2];
 8002fde:	4f12      	ldr	r7, [pc, #72]	; (8003028 <BSP_AUDIO_IN_TransferComplete_CallBack+0x4c>)
 8002fe0:	4d12      	ldr	r5, [pc, #72]	; (800302c <BSP_AUDIO_IN_TransferComplete_CallBack+0x50>)
    BSP_AUDIO_IN_PDMToPCM((uint16_t*) &record_pdm_buffer[AUDIO_IN_PDM_BUFFER_SIZE / 2],
 8002fe2:	4913      	ldr	r1, [pc, #76]	; (8003030 <BSP_AUDIO_IN_TransferComplete_CallBack+0x54>)
 8002fe4:	4813      	ldr	r0, [pc, #76]	; (8003034 <BSP_AUDIO_IN_TransferComplete_CallBack+0x58>)
 8002fe6:	f7fd ff0b 	bl	8000e00 <BSP_AUDIO_IN_PDMToPCM>
        ping_pong_buffer[write_index][buffer_index++] = record_pcm_buffer[i * 2];
 8002fea:	683e      	ldr	r6, [r7, #0]
 8002fec:	682c      	ldr	r4, [r5, #0]
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <BSP_AUDIO_IN_TransferComplete_CallBack+0x5c>)
 8002ff0:	480f      	ldr	r0, [pc, #60]	; (8003030 <BSP_AUDIO_IN_TransferComplete_CallBack+0x54>)
 8002ff2:	eb04 2346 	add.w	r3, r4, r6, lsl #9
 8002ff6:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8002ffa:	3a02      	subs	r2, #2
    for (uint32_t i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE; i++) {
 8002ffc:	2300      	movs	r3, #0
        ping_pong_buffer[write_index][buffer_index++] = record_pcm_buffer[i * 2];
 8002ffe:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8003002:	f822 1f02 	strh.w	r1, [r2, #2]!
    for (uint32_t i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE; i++) {
 8003006:	3301      	adds	r3, #1
 8003008:	2b10      	cmp	r3, #16
 800300a:	d1f8      	bne.n	8002ffe <BSP_AUDIO_IN_TransferComplete_CallBack+0x22>
        ping_pong_buffer[write_index][buffer_index++] = record_pcm_buffer[i * 2];
 800300c:	3410      	adds	r4, #16
    }
    if (buffer_index >= PV_AUDIO_REC_RECORD_BUFFER_SIZE) {
 800300e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8003012:	602c      	str	r4, [r5, #0]
 8003014:	db06      	blt.n	8003024 <BSP_AUDIO_IN_TransferComplete_CallBack+0x48>
        read_index = write_index;
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <BSP_AUDIO_IN_TransferComplete_CallBack+0x60>)
        write_index = 1 - write_index;
 8003018:	f1c6 0201 	rsb	r2, r6, #1
        read_index = write_index;
 800301c:	601e      	str	r6, [r3, #0]
        buffer_index = 0;
 800301e:	2300      	movs	r3, #0
        write_index = 1 - write_index;
 8003020:	603a      	str	r2, [r7, #0]
        buffer_index = 0;
 8003022:	602b      	str	r3, [r5, #0]
    }
}
 8003024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003026:	bf00      	nop
 8003028:	20012888 	.word	0x20012888
 800302c:	20011f30 	.word	0x20011f30
 8003030:	20012748 	.word	0x20012748
 8003034:	20012808 	.word	0x20012808
 8003038:	20011f34 	.word	0x20011f34
 800303c:	2000041c 	.word	0x2000041c

08003040 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BSP_AUDIO_IN_PDMToPCM((uint16_t*) &record_pdm_buffer[0],
            record_pcm_buffer);
    for (uint32_t i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE; i++) {
        ping_pong_buffer[write_index][buffer_index++] = record_pcm_buffer[i * 2];
 8003042:	4f12      	ldr	r7, [pc, #72]	; (800308c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x4c>)
 8003044:	4d12      	ldr	r5, [pc, #72]	; (8003090 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x50>)
    BSP_AUDIO_IN_PDMToPCM((uint16_t*) &record_pdm_buffer[0],
 8003046:	4913      	ldr	r1, [pc, #76]	; (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x54>)
 8003048:	4813      	ldr	r0, [pc, #76]	; (8003098 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x58>)
 800304a:	f7fd fed9 	bl	8000e00 <BSP_AUDIO_IN_PDMToPCM>
        ping_pong_buffer[write_index][buffer_index++] = record_pcm_buffer[i * 2];
 800304e:	683e      	ldr	r6, [r7, #0]
 8003050:	682c      	ldr	r4, [r5, #0]
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x5c>)
 8003054:	480f      	ldr	r0, [pc, #60]	; (8003094 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x54>)
 8003056:	eb04 2346 	add.w	r3, r4, r6, lsl #9
 800305a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800305e:	3a02      	subs	r2, #2
    for (uint32_t i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE; i++) {
 8003060:	2300      	movs	r3, #0
        ping_pong_buffer[write_index][buffer_index++] = record_pcm_buffer[i * 2];
 8003062:	f830 1023 	ldrh.w	r1, [r0, r3, lsl #2]
 8003066:	f822 1f02 	strh.w	r1, [r2, #2]!
    for (uint32_t i = 0; i < AUDIO_IN_PCM_BUFFER_SIZE; i++) {
 800306a:	3301      	adds	r3, #1
 800306c:	2b10      	cmp	r3, #16
 800306e:	d1f8      	bne.n	8003062 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x22>
        ping_pong_buffer[write_index][buffer_index++] = record_pcm_buffer[i * 2];
 8003070:	3410      	adds	r4, #16
    }
    if (buffer_index >= PV_AUDIO_REC_RECORD_BUFFER_SIZE) {
 8003072:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8003076:	602c      	str	r4, [r5, #0]
 8003078:	db06      	blt.n	8003088 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x48>
        read_index = write_index;
 800307a:	4b09      	ldr	r3, [pc, #36]	; (80030a0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x60>)
        write_index = 1 - write_index;
 800307c:	f1c6 0201 	rsb	r2, r6, #1
        read_index = write_index;
 8003080:	601e      	str	r6, [r3, #0]
        buffer_index = 0;
 8003082:	2300      	movs	r3, #0
        write_index = 1 - write_index;
 8003084:	603a      	str	r2, [r7, #0]
        buffer_index = 0;
 8003086:	602b      	str	r3, [r5, #0]
    }
}
 8003088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800308a:	bf00      	nop
 800308c:	20012888 	.word	0x20012888
 8003090:	20011f30 	.word	0x20011f30
 8003094:	20012748 	.word	0x20012748
 8003098:	20012788 	.word	0x20012788
 800309c:	20011f34 	.word	0x20011f34
 80030a0:	2000041c 	.word	0x2000041c

080030a4 <pv_get_uuid>:
    return PV_STATUS_SUCCESS;
}

const uint8_t *pv_get_uuid(void) {
    return (const uint8_t *) uuid;
}
 80030a4:	4800      	ldr	r0, [pc, #0]	; (80030a8 <pv_get_uuid+0x4>)
 80030a6:	4770      	bx	lr
 80030a8:	2001288c 	.word	0x2001288c

080030ac <pv_get_uuid_size>:

const uint32_t pv_get_uuid_size(void) {
    return UUID_SIZE;
}
 80030ac:	200c      	movs	r0, #12
 80030ae:	4770      	bx	lr

080030b0 <pv_board_init>:

pv_status_t pv_board_init() {
 80030b0:	b530      	push	{r4, r5, lr}
 80030b2:	b095      	sub	sp, #84	; 0x54
    if (HAL_Init() != HAL_OK) {
 80030b4:	f7fe f81c 	bl	80010f0 <HAL_Init>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d156      	bne.n	800316a <pv_board_init+0xba>
    __HAL_RCC_PWR_CLK_ENABLE();
 80030bc:	4a30      	ldr	r2, [pc, #192]	; (8003180 <pv_board_init+0xd0>)
 80030be:	9001      	str	r0, [sp, #4]
 80030c0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c2:	4b30      	ldr	r3, [pc, #192]	; (8003184 <pv_board_init+0xd4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80030c8:	6411      	str	r1, [r2, #64]	; 0x40
 80030ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030cc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80030d0:	9201      	str	r2, [sp, #4]
 80030d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030d4:	9002      	str	r0, [sp, #8]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e4:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030e6:	2402      	movs	r4, #2
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030e8:	2201      	movs	r2, #1
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ee:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030f6:	e9cd 400e 	strd	r4, r0, [sp, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80030fa:	2307      	movs	r3, #7
    RCC_OscInitStruct.PLL.PLLM = 8;
 80030fc:	2108      	movs	r1, #8
    RCC_OscInitStruct.PLL.PLLN = 336;
 80030fe:	f44f 72a8 	mov.w	r2, #336	; 0x150
    if ( HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003102:	a808      	add	r0, sp, #32
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8003104:	9313      	str	r3, [sp, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003106:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800310a:	9d02      	ldr	r5, [sp, #8]
    RCC_OscInitStruct.PLL.PLLM = 8;
 800310c:	9110      	str	r1, [sp, #64]	; 0x40
    if ( HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800310e:	f7fe ff2d 	bl	8001f6c <HAL_RCC_OscConfig>
 8003112:	4603      	mov	r3, r0
 8003114:	bb48      	cbnz	r0, 800316a <pv_board_init+0xba>
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003116:	210f      	movs	r1, #15
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003118:	e9cd 1403 	strd	r1, r4, [sp, #12]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800311c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003120:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
        if ( HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003124:	2105      	movs	r1, #5
 8003126:	a803      	add	r0, sp, #12
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003128:	e9cd 3505 	strd	r3, r5, [sp, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800312c:	9207      	str	r2, [sp, #28]
        if ( HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800312e:	f7ff f935 	bl	800239c <HAL_RCC_ClockConfig>
 8003132:	4604      	mov	r4, r0
 8003134:	b9c8      	cbnz	r0, 800316a <pv_board_init+0xba>
    if (HAL_GetREVID() == 0x1001)
 8003136:	f7fe f815 	bl	8001164 <HAL_GetREVID>
 800313a:	f241 0301 	movw	r3, #4097	; 0x1001
 800313e:	4298      	cmp	r0, r3
 8003140:	d017      	beq.n	8003172 <pv_board_init+0xc2>
    }
    if (pv_clock_config() != PV_STATUS_SUCCESS) {
        return PV_STATUS_INVALID_STATE;
    }

    BSP_LED_Init(LED3);
 8003142:	2001      	movs	r0, #1
 8003144:	f7fd fdb8 	bl	8000cb8 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fd fdb5 	bl	8000cb8 <BSP_LED_Init>
    BSP_LED_Init(LED5);
 800314e:	2002      	movs	r0, #2
 8003150:	f7fd fdb2 	bl	8000cb8 <BSP_LED_Init>
    BSP_LED_Init(LED6);
 8003154:	2003      	movs	r0, #3
 8003156:	f7fd fdaf 	bl	8000cb8 <BSP_LED_Init>

    memcpy(uuid, (uint8_t *) UUID_ADDRESS, UUID_SIZE);
 800315a:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <pv_board_init+0xd8>)
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <pv_board_init+0xdc>)
 800315e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    return PV_STATUS_SUCCESS;
}
 8003164:	4620      	mov	r0, r4
 8003166:	b015      	add	sp, #84	; 0x54
 8003168:	bd30      	pop	{r4, r5, pc}
        return PV_STATUS_INVALID_STATE;
 800316a:	2406      	movs	r4, #6
}
 800316c:	4620      	mov	r0, r4
 800316e:	b015      	add	sp, #84	; 0x54
 8003170:	bd30      	pop	{r4, r5, pc}
        __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003172:	4a07      	ldr	r2, [pc, #28]	; (8003190 <pv_board_init+0xe0>)
 8003174:	6813      	ldr	r3, [r2, #0]
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e7e1      	b.n	8003142 <pv_board_init+0x92>
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800
 8003184:	40007000 	.word	0x40007000
 8003188:	1fff7a10 	.word	0x1fff7a10
 800318c:	2001288c 	.word	0x2001288c
 8003190:	40023c00 	.word	0x40023c00

08003194 <__io_putchar>:
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003194:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003198:	f8d3 2e80 	ldr.w	r2, [r3, #3712]	; 0xe80
 800319c:	07d1      	lsls	r1, r2, #31
 800319e:	d503      	bpl.n	80031a8 <__io_putchar+0x14>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80031a0:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80031a4:	07d2      	lsls	r2, r2, #31
 80031a6:	d402      	bmi.n	80031ae <__io_putchar+0x1a>
}

int __io_putchar(uint8_t ch) {
    ITM_SendChar(ch);
    return 0;
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	4770      	bx	lr
  {
    while (ITM->PORT[0U].u32 == 0UL)
    {
      __NOP();
 80031ac:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2a00      	cmp	r2, #0
 80031b2:	d0fb      	beq.n	80031ac <__io_putchar+0x18>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80031b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80031b8:	7018      	strb	r0, [r3, #0]
 80031ba:	2000      	movs	r0, #0
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop

080031c0 <HAL_MspInit>:
  */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031c0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <HAL_MspInit+0x38>)
 80031c4:	2100      	movs	r1, #0
 80031c6:	9100      	str	r1, [sp, #0]
 80031c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031ce:	645a      	str	r2, [r3, #68]	; 0x44
 80031d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80031d6:	9200      	str	r2, [sp, #0]
 80031d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	9101      	str	r1, [sp, #4]
 80031dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031ee:	2007      	movs	r0, #7
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031f0:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80031f2:	f7fd bfbd 	b.w	8001170 <HAL_NVIC_SetPriorityGrouping>
 80031f6:	bf00      	nop
 80031f8:	40023800 	.word	0x40023800

080031fc <HAL_UART_MspInit>:
  *           - NVIC configuration for UART interrupt request enable
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{  
 80031fc:	b530      	push	{r4, r5, lr}
 80031fe:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8003200:	4b1e      	ldr	r3, [pc, #120]	; (800327c <HAL_UART_MspInit+0x80>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8003202:	481f      	ldr	r0, [pc, #124]	; (8003280 <HAL_UART_MspInit+0x84>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8003204:	2400      	movs	r4, #0
 8003206:	9400      	str	r4, [sp, #0]
 8003208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320a:	f042 0201 	orr.w	r2, r2, #1
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
 8003210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003212:	f002 0201 	and.w	r2, r2, #1
 8003216:	9200      	str	r2, [sp, #0]
 8003218:	9a00      	ldr	r2, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 800321a:	9401      	str	r4, [sp, #4]
 800321c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
 8003224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003226:	f002 0201 	and.w	r2, r2, #1
 800322a:	9201      	str	r2, [sp, #4]
 800322c:	9a01      	ldr	r2, [sp, #4]
  USARTx_CLK_ENABLE(); 
 800322e:	9402      	str	r4, [sp, #8]
 8003230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003232:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003236:	641a      	str	r2, [r3, #64]	; 0x40
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800323a:	2102      	movs	r1, #2
  USARTx_CLK_ENABLE(); 
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003242:	e9cd 4105 	strd	r4, r1, [sp, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003246:	9104      	str	r1, [sp, #16]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003248:	2507      	movs	r5, #7
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800324a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800324c:	2304      	movs	r3, #4
 800324e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003250:	9507      	str	r5, [sp, #28]
  USARTx_CLK_ENABLE(); 
 8003252:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8003254:	f7fe fa66 	bl	8001724 <HAL_GPIO_Init>
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8003258:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800325a:	a903      	add	r1, sp, #12
 800325c:	4808      	ldr	r0, [pc, #32]	; (8003280 <HAL_UART_MspInit+0x84>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 800325e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003260:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8003262:	f7fe fa5f 	bl	8001724 <HAL_GPIO_Init>
    
  /*##-3- Configure the NVIC for UART ########################################*/
  /* NVIC for USART1 */
  HAL_NVIC_SetPriority(USARTx_IRQn, 0, 1);
 8003266:	2201      	movs	r2, #1
 8003268:	4621      	mov	r1, r4
 800326a:	2026      	movs	r0, #38	; 0x26
 800326c:	f7fd ff92 	bl	8001194 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8003270:	2026      	movs	r0, #38	; 0x26
 8003272:	f7fd ffcd 	bl	8001210 <HAL_NVIC_EnableIRQ>
}
 8003276:	b009      	add	sp, #36	; 0x24
 8003278:	bd30      	pop	{r4, r5, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40020000 	.word	0x40020000

08003284 <NMI_Handler>:
/* External variables --------------------------------------------------------*/
extern HCD_HandleTypeDef hhcd_USB_OTG_FS;
/* USER CODE BEGIN EV */

void NMI_Handler(void) {
}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop

08003288 <HardFault_Handler>:

void HardFault_Handler(void) {
  while (1);
 8003288:	e7fe      	b.n	8003288 <HardFault_Handler>
 800328a:	bf00      	nop

0800328c <MemManage_Handler>:
}

void MemManage_Handler(void) {
  while (1);
 800328c:	e7fe      	b.n	800328c <MemManage_Handler>
 800328e:	bf00      	nop

08003290 <BusFault_Handler>:
}

void BusFault_Handler(void) {
  while (1);
 8003290:	e7fe      	b.n	8003290 <BusFault_Handler>
 8003292:	bf00      	nop

08003294 <UsageFault_Handler>:
}

void UsageFault_Handler(void) {
  while (1);
 8003294:	e7fe      	b.n	8003294 <UsageFault_Handler>
 8003296:	bf00      	nop

08003298 <SVC_Handler>:
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop

0800329c <DebugMon_Handler>:
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <PendSV_Handler>:
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop

080032a4 <SysTick_Handler>:

void PendSV_Handler(void) {
}

void SysTick_Handler(void) {
  HAL_IncTick();
 80032a4:	f7fd bf3a 	b.w	800111c <HAL_IncTick>

080032a8 <DMA1_Stream7_IRQHandler>:
}

void I2S3_IRQHandler(void) {
  HAL_DMA_IRQHandler(hAudioOutI2s.hdmatx);
 80032a8:	4b01      	ldr	r3, [pc, #4]	; (80032b0 <DMA1_Stream7_IRQHandler+0x8>)
 80032aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80032ac:	f7fe b94a 	b.w	8001544 <HAL_DMA_IRQHandler>
 80032b0:	2000067c 	.word	0x2000067c

080032b4 <DMA1_Stream3_IRQHandler>:
}

void I2S2_IRQHandler(void) {
  HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 80032b4:	4b01      	ldr	r3, [pc, #4]	; (80032bc <DMA1_Stream3_IRQHandler+0x8>)
 80032b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80032b8:	f7fe b944 	b.w	8001544 <HAL_DMA_IRQHandler>
 80032bc:	20000634 	.word	0x20000634

080032c0 <USART2_IRQHandler>:
  * @Note   This function is redefined in "main.h" and related to DMA stream
  *         used for USART data transmission
  */
void USARTx_IRQHandler(void)
{
  HAL_UART_IRQHandler(& UartHandle);
 80032c0:	4801      	ldr	r0, [pc, #4]	; (80032c8 <USART2_IRQHandler+0x8>)
 80032c2:	f7ff bb97 	b.w	80029f4 <HAL_UART_IRQHandler>
 80032c6:	bf00      	nop
 80032c8:	2001289c 	.word	0x2001289c

080032cc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 80032cc:	490d      	ldr	r1, [pc, #52]	; (8003304 <_sbrk+0x38>)
{
 80032ce:	b508      	push	{r3, lr}
 80032d0:	4603      	mov	r3, r0
	if (heap_end == 0)
 80032d2:	6808      	ldr	r0, [r1, #0]
 80032d4:	b158      	cbz	r0, 80032ee <_sbrk+0x22>

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80032d6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 80032da:	4403      	add	r3, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80032dc:	f8d2 2d08 	ldr.w	r2, [r2, #3336]	; 0xd08
 80032e0:	6812      	ldr	r2, [r2, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 80032e2:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
	if (heap_end + incr > min_stack_ptr)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d804      	bhi.n	80032f4 <_sbrk+0x28>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 80032ea:	600b      	str	r3, [r1, #0]

	return (caddr_t) prev_heap_end;
}
 80032ec:	bd08      	pop	{r3, pc}
		heap_end = &end;
 80032ee:	4806      	ldr	r0, [pc, #24]	; (8003308 <_sbrk+0x3c>)
 80032f0:	6008      	str	r0, [r1, #0]
 80032f2:	e7f0      	b.n	80032d6 <_sbrk+0xa>
		errno = ENOMEM;
 80032f4:	f006 fe54 	bl	8009fa0 <__errno>
 80032f8:	230c      	movs	r3, #12
 80032fa:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003300:	bd08      	pop	{r3, pc}
 8003302:	bf00      	nop
 8003304:	20012898 	.word	0x20012898
 8003308:	200128f8 	.word	0x200128f8

0800330c <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800330c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330e:	1e16      	subs	r6, r2, #0
 8003310:	dd07      	ble.n	8003322 <_write+0x16>
 8003312:	460c      	mov	r4, r1
 8003314:	198d      	adds	r5, r1, r6
		{
		   __io_putchar( *ptr++ );
 8003316:	f814 0b01 	ldrb.w	r0, [r4], #1
 800331a:	f7ff ff3b 	bl	8003194 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800331e:	42a5      	cmp	r5, r4
 8003320:	d1f9      	bne.n	8003316 <_write+0xa>
		}
	return len;
}
 8003322:	4630      	mov	r0, r6
 8003324:	bd70      	pop	{r4, r5, r6, pc}
 8003326:	bf00      	nop

08003328 <_close>:

int _close(int file)
{
	return -1;
}
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop

08003330 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003334:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003336:	2000      	movs	r0, #0
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800333c:	2001      	movs	r0, #1
 800333e:	4770      	bx	lr

08003340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003340:	2000      	movs	r0, #0
 8003342:	4770      	bx	lr

08003344 <_read>:

int _read(int file, char *ptr, int len)
{
 8003344:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003346:	1e16      	subs	r6, r2, #0
 8003348:	dd07      	ble.n	800335a <_read+0x16>
 800334a:	460c      	mov	r4, r1
 800334c:	198d      	adds	r5, r1, r6
	{
	  *ptr++ = __io_getchar();
 800334e:	f3af 8000 	nop.w
 8003352:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003356:	42a5      	cmp	r5, r4
 8003358:	d1f9      	bne.n	800334e <_read+0xa>
	}

   return len;
}
 800335a:	4630      	mov	r0, r6
 800335c:	bd70      	pop	{r4, r5, r6, pc}
 800335e:	bf00      	nop

08003360 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003360:	4910      	ldr	r1, [pc, #64]	; (80033a4 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003364:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003368:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 800336c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800336e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8003372:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003374:	4c0d      	ldr	r4, [pc, #52]	; (80033ac <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8003376:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800337e:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003386:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800338a:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 800338c:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800338e:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003390:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003398:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 800339a:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800339c:	608c      	str	r4, [r1, #8]
#endif
}
 800339e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00
 80033a8:	40023800 	.word	0x40023800
 80033ac:	24003010 	.word	0x24003010

080033b0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80033b0:	b508      	push	{r3, lr}
  /* Turn LED5 on */
  BSP_LED_On(LED5); //red
 80033b2:	2002      	movs	r0, #2
 80033b4:	f7fd fcda 	bl	8000d6c <BSP_LED_On>
  while(1)
 80033b8:	e7fe      	b.n	80033b8 <Error_Handler+0x8>
 80033ba:	bf00      	nop

080033bc <uartSendInit>:
/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
void uartSendInit(void){
 80033bc:	b530      	push	{r4, r5, lr}
 80033be:	b095      	sub	sp, #84	; 0x54
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 80033c0:	f7fd fe96 	bl	80010f0 <HAL_Init>

  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 80033c4:	2001      	movs	r0, #1
 80033c6:	f7fd fc77 	bl	8000cb8 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fc74 	bl	8000cb8 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 80033d0:	2002      	movs	r0, #2
 80033d2:	f7fd fc71 	bl	8000cb8 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 80033d6:	2003      	movs	r0, #3
 80033d8:	f7fd fc6e 	bl	8000cb8 <BSP_LED_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033dc:	4a2e      	ldr	r2, [pc, #184]	; (8003498 <uartSendInit+0xdc>)

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033de:	4b2f      	ldr	r3, [pc, #188]	; (800349c <uartSendInit+0xe0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e0:	2000      	movs	r0, #0
 80033e2:	9001      	str	r0, [sp, #4]
 80033e4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80033e6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80033ea:	6411      	str	r1, [r2, #64]	; 0x40
 80033ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ee:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80033f2:	9201      	str	r2, [sp, #4]
 80033f4:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f6:	9002      	str	r0, [sp, #8]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003406:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003408:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800340a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800340c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003414:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003418:	e9cd 400e 	strd	r4, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800341c:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 336;
 800341e:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003422:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003424:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003426:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800342a:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800342c:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800342e:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003430:	f7fe fd9c 	bl	8001f6c <HAL_RCC_OscConfig>
 8003434:	bb68      	cbnz	r0, 8003492 <uartSendInit+0xd6>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003436:	210f      	movs	r1, #15
 8003438:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800343a:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800343e:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003446:	2105      	movs	r1, #5
 8003448:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800344a:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800344e:	9207      	str	r2, [sp, #28]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003450:	f7fe ffa4 	bl	800239c <HAL_RCC_ClockConfig>
 8003454:	b9e8      	cbnz	r0, 8003492 <uartSendInit+0xd6>
  {
    Error_Handler();
  }

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 8003456:	f7fd fe85 	bl	8001164 <HAL_GetREVID>
 800345a:	f241 0301 	movw	r3, #4097	; 0x1001
 800345e:	4298      	cmp	r0, r3
 8003460:	d104      	bne.n	800346c <uartSendInit+0xb0>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003462:	4a0f      	ldr	r2, [pc, #60]	; (80034a0 <uartSendInit+0xe4>)
 8003464:	6813      	ldr	r3, [r2, #0]
 8003466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346a:	6013      	str	r3, [r2, #0]
  UartHandle.Instance          = USARTx;
 800346c:	480d      	ldr	r0, [pc, #52]	; (80034a4 <uartSendInit+0xe8>)
 800346e:	4c0e      	ldr	r4, [pc, #56]	; (80034a8 <uartSendInit+0xec>)
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 8003470:	2300      	movs	r3, #0
  UartHandle.Init.BaudRate     = 9600;
 8003472:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003476:	220c      	movs	r2, #12
  UartHandle.Init.BaudRate     = 9600;
 8003478:	e9c0 4100 	strd	r4, r1, [r0]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 800347c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8003480:	e9c0 2305 	strd	r2, r3, [r0, #20]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 8003484:	6103      	str	r3, [r0, #16]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8003486:	61c3      	str	r3, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8003488:	f7ff f9c6 	bl	8002818 <HAL_UART_Init>
 800348c:	b908      	cbnz	r0, 8003492 <uartSendInit+0xd6>
}
 800348e:	b015      	add	sp, #84	; 0x54
 8003490:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8003492:	f7ff ff8d 	bl	80033b0 <Error_Handler>
 8003496:	bf00      	nop
 8003498:	40023800 	.word	0x40023800
 800349c:	40007000 	.word	0x40007000
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	2001289c 	.word	0x2001289c
 80034a8:	40004400 	.word	0x40004400

080034ac <uartTx>:
void uartTx(int32_t indx){
 80034ac:	b510      	push	{r4, lr}
	switch ( indx ){
 80034ae:	b340      	cbz	r0, 8003502 <uartTx+0x56>
 80034b0:	2801      	cmp	r0, #1
 80034b2:	d102      	bne.n	80034ba <uartTx+0xe>
			strcpy(aTxBuffer,"s");
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <uartTx+0x64>)
 80034b6:	2273      	movs	r2, #115	; 0x73
 80034b8:	801a      	strh	r2, [r3, #0]
  BSP_LED_Off(LED3);
 80034ba:	2001      	movs	r0, #1
 80034bc:	f7fd fc64 	bl	8000d88 <BSP_LED_Off>
  if(HAL_UART_Transmit_IT(&UartHandle, (uint8_t*)aTxBuffer, 2)!= HAL_OK)
 80034c0:	4913      	ldr	r1, [pc, #76]	; (8003510 <uartTx+0x64>)
 80034c2:	4814      	ldr	r0, [pc, #80]	; (8003514 <uartTx+0x68>)
 80034c4:	2202      	movs	r2, #2
 80034c6:	f7ff f9d7 	bl	8002878 <HAL_UART_Transmit_IT>
 80034ca:	b9f0      	cbnz	r0, 800350a <uartTx+0x5e>
 80034cc:	4c12      	ldr	r4, [pc, #72]	; (8003518 <uartTx+0x6c>)
  while (UartReady != SET)
 80034ce:	7823      	ldrb	r3, [r4, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d1fc      	bne.n	80034ce <uartTx+0x22>
  UartReady = RESET;
 80034d4:	2300      	movs	r3, #0
  if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, 2) != HAL_OK)
 80034d6:	4911      	ldr	r1, [pc, #68]	; (800351c <uartTx+0x70>)
 80034d8:	480e      	ldr	r0, [pc, #56]	; (8003514 <uartTx+0x68>)
  UartReady = RESET;
 80034da:	7023      	strb	r3, [r4, #0]
  if(HAL_UART_Receive_IT(&UartHandle, (uint8_t *)aRxBuffer, 2) != HAL_OK)
 80034dc:	2202      	movs	r2, #2
 80034de:	f7ff f9ed 	bl	80028bc <HAL_UART_Receive_IT>
 80034e2:	b990      	cbnz	r0, 800350a <uartTx+0x5e>
  while (UartReady != SET)
 80034e4:	7823      	ldrb	r3, [r4, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d1fc      	bne.n	80034e4 <uartTx+0x38>
  UartReady = RESET;
 80034ea:	f04f 0c00 	mov.w	ip, #0
 80034ee:	f884 c000 	strb.w	ip, [r4]
  printf("aTxBuffer,aRxBuffer,RXBUFFERSIZE=%s,%s,%d", aTxBuffer,aRxBuffer,RXBUFFERSIZE);
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <uartTx+0x70>)
 80034f4:	4906      	ldr	r1, [pc, #24]	; (8003510 <uartTx+0x64>)
 80034f6:	480a      	ldr	r0, [pc, #40]	; (8003520 <uartTx+0x74>)
}
 80034f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printf("aTxBuffer,aRxBuffer,RXBUFFERSIZE=%s,%s,%d", aTxBuffer,aRxBuffer,RXBUFFERSIZE);
 80034fc:	2303      	movs	r3, #3
 80034fe:	f007 b9a7 	b.w	800a850 <iprintf>
			strcpy(aTxBuffer,  "w");
 8003502:	4b03      	ldr	r3, [pc, #12]	; (8003510 <uartTx+0x64>)
 8003504:	2277      	movs	r2, #119	; 0x77
 8003506:	801a      	strh	r2, [r3, #0]
			break; /* optional */
 8003508:	e7d7      	b.n	80034ba <uartTx+0xe>
    Error_Handler();
 800350a:	f7ff ff51 	bl	80033b0 <Error_Handler>
 800350e:	bf00      	nop
 8003510:	20000424 	.word	0x20000424
 8003514:	2001289c 	.word	0x2001289c
 8003518:	200128e0 	.word	0x200128e0
 800351c:	200128e4 	.word	0x200128e4
 8003520:	0800cf20 	.word	0x0800cf20

08003524 <HAL_UART_TxCpltCallback>:
  * @retval None
  */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8003524:	4b02      	ldr	r3, [pc, #8]	; (8003530 <HAL_UART_TxCpltCallback+0xc>)
 8003526:	2201      	movs	r2, #1

  /* Turn LED6 on: Transfer in transmission process is correct */
  BSP_LED_On(LED6);
 8003528:	2003      	movs	r0, #3
  UartReady = SET;
 800352a:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED6);
 800352c:	f7fd bc1e 	b.w	8000d6c <BSP_LED_On>
 8003530:	200128e0 	.word	0x200128e0

08003534 <HAL_UART_RxCpltCallback>:
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* Set transmission flag: transfer complete */
  UartReady = SET;
 8003534:	4b02      	ldr	r3, [pc, #8]	; (8003540 <HAL_UART_RxCpltCallback+0xc>)
 8003536:	2201      	movs	r2, #1

  /* Turn LED4 on: Transfer in reception process is correct */
  BSP_LED_On(LED4);
 8003538:	2000      	movs	r0, #0
  UartReady = SET;
 800353a:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED4);
 800353c:	f7fd bc16 	b.w	8000d6c <BSP_LED_On>
 8003540:	200128e0 	.word	0x200128e0

08003544 <HAL_UART_ErrorCallback>:
  * @retval None
  */
 void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
  /* Turn LED3 on: Transfer error in reception/transmission process */
  BSP_LED_On(LED3);
 8003544:	2001      	movs	r0, #1
 8003546:	f7fd bc11 	b.w	8000d6c <BSP_LED_On>
 800354a:	bf00      	nop

0800354c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800354c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003584 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003550:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003552:	e003      	b.n	800355c <LoopCopyDataInit>

08003554 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003556:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003558:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800355a:	3104      	adds	r1, #4

0800355c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800355c:	480b      	ldr	r0, [pc, #44]	; (800358c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003560:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003562:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003564:	d3f6      	bcc.n	8003554 <CopyDataInit>
  ldr  r2, =_sbss
 8003566:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003568:	e002      	b.n	8003570 <LoopFillZerobss>

0800356a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800356a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800356c:	f842 3b04 	str.w	r3, [r2], #4

08003570 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003572:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003574:	d3f9      	bcc.n	800356a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003576:	f7ff fef3 	bl	8003360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800357a:	f006 fd17 	bl	8009fac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800357e:	f7ff fc49 	bl	8002e14 <main>
  bx  lr    
 8003582:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003584:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003588:	08048e70 	.word	0x08048e70
  ldr  r0, =_sdata
 800358c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003590:	20000570 	.word	0x20000570
  ldr  r2, =_sbss
 8003594:	20000570 	.word	0x20000570
  ldr  r3, = _ebss
 8003598:	200128f8 	.word	0x200128f8

0800359c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800359c:	e7fe      	b.n	800359c <ADC_IRQHandler>
	...

080035a0 <D16_GENERIC>:
 80035a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a4:	b089      	sub	sp, #36	; 0x24
 80035a6:	68d4      	ldr	r4, [r2, #12]
 80035a8:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80035aa:	6993      	ldr	r3, [r2, #24]
 80035ac:	9407      	str	r4, [sp, #28]
 80035ae:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80035b0:	9306      	str	r3, [sp, #24]
 80035b2:	9402      	str	r4, [sp, #8]
 80035b4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80035b8:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80035bc:	69d3      	ldr	r3, [r2, #28]
 80035be:	6896      	ldr	r6, [r2, #8]
 80035c0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80035c2:	9103      	str	r1, [sp, #12]
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	d066      	beq.n	8003696 <D16_GENERIC+0xf6>
 80035c8:	f004 0510 	and.w	r5, r4, #16
 80035cc:	f004 0420 	and.w	r4, r4, #32
 80035d0:	9504      	str	r5, [sp, #16]
 80035d2:	4938      	ldr	r1, [pc, #224]	; (80036b4 <D16_GENERIC+0x114>)
 80035d4:	9405      	str	r4, [sp, #20]
 80035d6:	f04f 0e00 	mov.w	lr, #0
 80035da:	4635      	mov	r5, r6
 80035dc:	e04f      	b.n	800367e <D16_GENERIC+0xde>
 80035de:	5d87      	ldrb	r7, [r0, r6]
 80035e0:	7804      	ldrb	r4, [r0, #0]
 80035e2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80035e6:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 80035ea:	b2e6      	uxtb	r6, r4
 80035ec:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80035f0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80035f4:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80035f8:	4433      	add	r3, r6
 80035fa:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 80035fe:	f3c4 0609 	ubfx	r6, r4, #0, #10
 8003602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003606:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800360a:	0aa3      	lsrs	r3, r4, #10
 800360c:	4c2a      	ldr	r4, [pc, #168]	; (80036b8 <D16_GENERIC+0x118>)
 800360e:	fb26 5404 	smlad	r4, r6, r4, r5
 8003612:	4d2a      	ldr	r5, [pc, #168]	; (80036bc <D16_GENERIC+0x11c>)
 8003614:	fb26 f505 	smuad	r5, r6, r5
 8003618:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800361c:	eb04 080a 	add.w	r8, r4, sl
 8003620:	eba8 080b 	sub.w	r8, r8, fp
 8003624:	4646      	mov	r6, r8
 8003626:	17f7      	asrs	r7, r6, #31
 8003628:	e9cd 6700 	strd	r6, r7, [sp]
 800362c:	9e04      	ldr	r6, [sp, #16]
 800362e:	f10e 0c01 	add.w	ip, lr, #1
 8003632:	b16e      	cbz	r6, 8003650 <D16_GENERIC+0xb0>
 8003634:	6a16      	ldr	r6, [r2, #32]
 8003636:	9f01      	ldr	r7, [sp, #4]
 8003638:	fba8 8906 	umull	r8, r9, r8, r6
 800363c:	fb06 9907 	mla	r9, r6, r7, r9
 8003640:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003644:	f149 0900 	adc.w	r9, r9, #0
 8003648:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800364c:	46a3      	mov	fp, r4
 800364e:	4654      	mov	r4, sl
 8003650:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8003652:	9f02      	ldr	r7, [sp, #8]
 8003654:	0424      	lsls	r4, r4, #16
 8003656:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800365a:	f04f 0900 	mov.w	r9, #0
 800365e:	fb0e fe06 	mul.w	lr, lr, r6
 8003662:	fbc7 8904 	smlal	r8, r9, r7, r4
 8003666:	9e03      	ldr	r6, [sp, #12]
 8003668:	464f      	mov	r7, r9
 800366a:	10bc      	asrs	r4, r7, #2
 800366c:	f304 040f 	ssat	r4, #16, r4
 8003670:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8003674:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003676:	fa1f fe8c 	uxth.w	lr, ip
 800367a:	4574      	cmp	r4, lr
 800367c:	d90a      	bls.n	8003694 <D16_GENERIC+0xf4>
 800367e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003680:	2c01      	cmp	r4, #1
 8003682:	b2e6      	uxtb	r6, r4
 8003684:	d1ab      	bne.n	80035de <D16_GENERIC+0x3e>
 8003686:	9e05      	ldr	r6, [sp, #20]
 8003688:	f850 4b02 	ldr.w	r4, [r0], #2
 800368c:	2e00      	cmp	r6, #0
 800368e:	d0ac      	beq.n	80035ea <D16_GENERIC+0x4a>
 8003690:	ba64      	rev16	r4, r4
 8003692:	e7aa      	b.n	80035ea <D16_GENERIC+0x4a>
 8003694:	462e      	mov	r6, r5
 8003696:	9907      	ldr	r1, [sp, #28]
 8003698:	61d3      	str	r3, [r2, #28]
 800369a:	9b06      	ldr	r3, [sp, #24]
 800369c:	6096      	str	r6, [r2, #8]
 800369e:	2000      	movs	r0, #0
 80036a0:	60d1      	str	r1, [r2, #12]
 80036a2:	f8c2 a010 	str.w	sl, [r2, #16]
 80036a6:	f8c2 b014 	str.w	fp, [r2, #20]
 80036aa:	6193      	str	r3, [r2, #24]
 80036ac:	b009      	add	sp, #36	; 0x24
 80036ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b2:	bf00      	nop
 80036b4:	20000000 	.word	0x20000000
 80036b8:	00030001 	.word	0x00030001
 80036bc:	00010003 	.word	0x00010003

080036c0 <D24_GENERIC>:
 80036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c4:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80036c6:	6993      	ldr	r3, [r2, #24]
 80036c8:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80036ca:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80036ce:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80036d2:	6894      	ldr	r4, [r2, #8]
 80036d4:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80036d8:	b089      	sub	sp, #36	; 0x24
 80036da:	9307      	str	r3, [sp, #28]
 80036dc:	9503      	str	r5, [sp, #12]
 80036de:	69d3      	ldr	r3, [r2, #28]
 80036e0:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80036e2:	9104      	str	r1, [sp, #16]
 80036e4:	2e00      	cmp	r6, #0
 80036e6:	f000 8096 	beq.w	8003816 <D24_GENERIC+0x156>
 80036ea:	f005 0610 	and.w	r6, r5, #16
 80036ee:	f005 0520 	and.w	r5, r5, #32
 80036f2:	4954      	ldr	r1, [pc, #336]	; (8003844 <D24_GENERIC+0x184>)
 80036f4:	9605      	str	r6, [sp, #20]
 80036f6:	9506      	str	r5, [sp, #24]
 80036f8:	f04f 0e00 	mov.w	lr, #0
 80036fc:	f8cd 9008 	str.w	r9, [sp, #8]
 8003700:	e06a      	b.n	80037d8 <D24_GENERIC+0x118>
 8003702:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8003706:	f810 8007 	ldrb.w	r8, [r0, r7]
 800370a:	f890 c000 	ldrb.w	ip, [r0]
 800370e:	042d      	lsls	r5, r5, #16
 8003710:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8003714:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8003718:	44ac      	add	ip, r5
 800371a:	4438      	add	r0, r7
 800371c:	fa5f f68c 	uxtb.w	r6, ip
 8003720:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8003724:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003728:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800372c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003730:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8003734:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8003738:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800373c:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8003740:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003744:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8003748:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800374c:	4d3e      	ldr	r5, [pc, #248]	; (8003848 <D24_GENERIC+0x188>)
 800374e:	fb26 b705 	smlad	r7, r6, r5, fp
 8003752:	4d3e      	ldr	r5, [pc, #248]	; (800384c <D24_GENERIC+0x18c>)
 8003754:	fb26 4b05 	smlad	fp, r6, r5, r4
 8003758:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800375c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8003760:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8003764:	2401      	movs	r4, #1
 8003766:	fb26 f604 	smuad	r6, r6, r4
 800376a:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800376e:	9f02      	ldr	r7, [sp, #8]
 8003770:	eb0e 0c04 	add.w	ip, lr, r4
 8003774:	eb08 0406 	add.w	r4, r8, r6
 8003778:	eb05 060a 	add.w	r6, r5, sl
 800377c:	1bf6      	subs	r6, r6, r7
 800377e:	4637      	mov	r7, r6
 8003780:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8003784:	e9cd 7800 	strd	r7, r8, [sp]
 8003788:	9f05      	ldr	r7, [sp, #20]
 800378a:	b177      	cbz	r7, 80037aa <D24_GENERIC+0xea>
 800378c:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8003790:	9502      	str	r5, [sp, #8]
 8003792:	fba6 9a08 	umull	r9, sl, r6, r8
 8003796:	9e01      	ldr	r6, [sp, #4]
 8003798:	fb08 aa06 	mla	sl, r8, r6, sl
 800379c:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 80037a0:	f14a 0700 	adc.w	r7, sl, #0
 80037a4:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80037a8:	4655      	mov	r5, sl
 80037aa:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80037ac:	9f03      	ldr	r7, [sp, #12]
 80037ae:	03ad      	lsls	r5, r5, #14
 80037b0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80037b4:	f04f 0900 	mov.w	r9, #0
 80037b8:	fb0e fe06 	mul.w	lr, lr, r6
 80037bc:	fbc7 8905 	smlal	r8, r9, r7, r5
 80037c0:	9e04      	ldr	r6, [sp, #16]
 80037c2:	464f      	mov	r7, r9
 80037c4:	10bd      	asrs	r5, r7, #2
 80037c6:	f305 050f 	ssat	r5, #16, r5
 80037ca:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80037ce:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80037d0:	fa1f fe8c 	uxth.w	lr, ip
 80037d4:	4575      	cmp	r5, lr
 80037d6:	d91c      	bls.n	8003812 <D24_GENERIC+0x152>
 80037d8:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80037da:	b2ef      	uxtb	r7, r5
 80037dc:	2d01      	cmp	r5, #1
 80037de:	b23e      	sxth	r6, r7
 80037e0:	d18f      	bne.n	8003702 <D24_GENERIC+0x42>
 80037e2:	9d06      	ldr	r5, [sp, #24]
 80037e4:	b15d      	cbz	r5, 80037fe <D24_GENERIC+0x13e>
 80037e6:	f01e 0f01 	tst.w	lr, #1
 80037ea:	d122      	bne.n	8003832 <D24_GENERIC+0x172>
 80037ec:	7805      	ldrb	r5, [r0, #0]
 80037ee:	78c7      	ldrb	r7, [r0, #3]
 80037f0:	7846      	ldrb	r6, [r0, #1]
 80037f2:	022d      	lsls	r5, r5, #8
 80037f4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 80037f8:	44b4      	add	ip, r6
 80037fa:	3002      	adds	r0, #2
 80037fc:	e78e      	b.n	800371c <D24_GENERIC+0x5c>
 80037fe:	7846      	ldrb	r6, [r0, #1]
 8003800:	f890 c002 	ldrb.w	ip, [r0, #2]
 8003804:	f810 5b03 	ldrb.w	r5, [r0], #3
 8003808:	0236      	lsls	r6, r6, #8
 800380a:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800380e:	44ac      	add	ip, r5
 8003810:	e784      	b.n	800371c <D24_GENERIC+0x5c>
 8003812:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003816:	61d3      	str	r3, [r2, #28]
 8003818:	9b07      	ldr	r3, [sp, #28]
 800381a:	6094      	str	r4, [r2, #8]
 800381c:	2000      	movs	r0, #0
 800381e:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003822:	f8c2 a010 	str.w	sl, [r2, #16]
 8003826:	f8c2 9014 	str.w	r9, [r2, #20]
 800382a:	6193      	str	r3, [r2, #24]
 800382c:	b009      	add	sp, #36	; 0x24
 800382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003832:	78c5      	ldrb	r5, [r0, #3]
 8003834:	7887      	ldrb	r7, [r0, #2]
 8003836:	f810 6b04 	ldrb.w	r6, [r0], #4
 800383a:	022d      	lsls	r5, r5, #8
 800383c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8003840:	44b4      	add	ip, r6
 8003842:	e76b      	b.n	800371c <D24_GENERIC+0x5c>
 8003844:	20000000 	.word	0x20000000
 8003848:	00030001 	.word	0x00030001
 800384c:	00060007 	.word	0x00060007

08003850 <D32_GENERIC>:
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003856:	6993      	ldr	r3, [r2, #24]
 8003858:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800385a:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800385e:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8003862:	69d6      	ldr	r6, [r2, #28]
 8003864:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003868:	b089      	sub	sp, #36	; 0x24
 800386a:	9307      	str	r3, [sp, #28]
 800386c:	9403      	str	r4, [sp, #12]
 800386e:	6893      	ldr	r3, [r2, #8]
 8003870:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003872:	9104      	str	r1, [sp, #16]
 8003874:	2d00      	cmp	r5, #0
 8003876:	f000 809f 	beq.w	80039b8 <D32_GENERIC+0x168>
 800387a:	f004 0510 	and.w	r5, r4, #16
 800387e:	f004 0420 	and.w	r4, r4, #32
 8003882:	9505      	str	r5, [sp, #20]
 8003884:	4953      	ldr	r1, [pc, #332]	; (80039d4 <D32_GENERIC+0x184>)
 8003886:	9406      	str	r4, [sp, #24]
 8003888:	f04f 0c00 	mov.w	ip, #0
 800388c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003890:	461d      	mov	r5, r3
 8003892:	4617      	mov	r7, r2
 8003894:	e077      	b.n	8003986 <D32_GENERIC+0x136>
 8003896:	f818 3003 	ldrb.w	r3, [r8, r3]
 800389a:	f810 800e 	ldrb.w	r8, [r0, lr]
 800389e:	f810 e002 	ldrb.w	lr, [r0, r2]
 80038a2:	7800      	ldrb	r0, [r0, #0]
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80038aa:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80038ae:	4403      	add	r3, r0
 80038b0:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80038b4:	b2dc      	uxtb	r4, r3
 80038b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80038ba:	f3c3 4807 	ubfx	r8, r3, #16, #8
 80038be:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80038c2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038c6:	0e1b      	lsrs	r3, r3, #24
 80038c8:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 80038cc:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 80038d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038d4:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80038d8:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 80038dc:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 80038e0:	f3c6 0309 	ubfx	r3, r6, #0, #10
 80038e4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80038e8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80038ec:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80038f0:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 80038f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <D32_GENERIC+0x188>)
 80038fa:	fb22 b403 	smlad	r4, r2, r3, fp
 80038fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003902:	fb2e 4803 	smlad	r8, lr, r3, r4
 8003906:	4b35      	ldr	r3, [pc, #212]	; (80039dc <D32_GENERIC+0x18c>)
 8003908:	fb22 5503 	smlad	r5, r2, r3, r5
 800390c:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <D32_GENERIC+0x190>)
 800390e:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8003912:	2301      	movs	r3, #1
 8003914:	fb22 f203 	smuad	r2, r2, r3
 8003918:	4b32      	ldr	r3, [pc, #200]	; (80039e4 <D32_GENERIC+0x194>)
 800391a:	fb2e 2503 	smlad	r5, lr, r3, r2
 800391e:	9b02      	ldr	r3, [sp, #8]
 8003920:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8003924:	eb04 080a 	add.w	r8, r4, sl
 8003928:	eba8 0803 	sub.w	r8, r8, r3
 800392c:	4642      	mov	r2, r8
 800392e:	17d3      	asrs	r3, r2, #31
 8003930:	e9cd 2300 	strd	r2, r3, [sp]
 8003934:	9b05      	ldr	r3, [sp, #20]
 8003936:	f10c 0e01 	add.w	lr, ip, #1
 800393a:	b16b      	cbz	r3, 8003958 <D32_GENERIC+0x108>
 800393c:	6a3a      	ldr	r2, [r7, #32]
 800393e:	9b01      	ldr	r3, [sp, #4]
 8003940:	9402      	str	r4, [sp, #8]
 8003942:	fba8 8902 	umull	r8, r9, r8, r2
 8003946:	fb02 9903 	mla	r9, r2, r3, r9
 800394a:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800394e:	f149 0900 	adc.w	r9, r9, #0
 8003952:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8003956:	4654      	mov	r4, sl
 8003958:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800395a:	9a04      	ldr	r2, [sp, #16]
 800395c:	fb0c fc03 	mul.w	ip, ip, r3
 8003960:	9b03      	ldr	r3, [sp, #12]
 8003962:	0364      	lsls	r4, r4, #13
 8003964:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003968:	f04f 0900 	mov.w	r9, #0
 800396c:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003970:	464b      	mov	r3, r9
 8003972:	109b      	asrs	r3, r3, #2
 8003974:	f303 030f 	ssat	r3, #16, r3
 8003978:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800397c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800397e:	fa1f fc8e 	uxth.w	ip, lr
 8003982:	4563      	cmp	r3, ip
 8003984:	d914      	bls.n	80039b0 <D32_GENERIC+0x160>
 8003986:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8003988:	b2e2      	uxtb	r2, r4
 800398a:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800398e:	eb00 080e 	add.w	r8, r0, lr
 8003992:	4253      	negs	r3, r2
 8003994:	2c01      	cmp	r4, #1
 8003996:	eb08 0403 	add.w	r4, r8, r3
 800399a:	f47f af7c 	bne.w	8003896 <D32_GENERIC+0x46>
 800399e:	1d02      	adds	r2, r0, #4
 80039a0:	6803      	ldr	r3, [r0, #0]
 80039a2:	9806      	ldr	r0, [sp, #24]
 80039a4:	b110      	cbz	r0, 80039ac <D32_GENERIC+0x15c>
 80039a6:	ba5b      	rev16	r3, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	e783      	b.n	80038b4 <D32_GENERIC+0x64>
 80039ac:	4610      	mov	r0, r2
 80039ae:	e781      	b.n	80038b4 <D32_GENERIC+0x64>
 80039b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80039b4:	462b      	mov	r3, r5
 80039b6:	463a      	mov	r2, r7
 80039b8:	6093      	str	r3, [r2, #8]
 80039ba:	9b07      	ldr	r3, [sp, #28]
 80039bc:	f8c2 b00c 	str.w	fp, [r2, #12]
 80039c0:	2000      	movs	r0, #0
 80039c2:	61d6      	str	r6, [r2, #28]
 80039c4:	f8c2 a010 	str.w	sl, [r2, #16]
 80039c8:	f8c2 9014 	str.w	r9, [r2, #20]
 80039cc:	6193      	str	r3, [r2, #24]
 80039ce:	b009      	add	sp, #36	; 0x24
 80039d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039d4:	20000000 	.word	0x20000000
 80039d8:	00060003 	.word	0x00060003
 80039dc:	000a000c 	.word	0x000a000c
 80039e0:	000c000a 	.word	0x000c000a
 80039e4:	00030006 	.word	0x00030006

080039e8 <D48_GENERIC>:
 80039e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ec:	b089      	sub	sp, #36	; 0x24
 80039ee:	6953      	ldr	r3, [r2, #20]
 80039f0:	68d4      	ldr	r4, [r2, #12]
 80039f2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80039f4:	9302      	str	r3, [sp, #8]
 80039f6:	9400      	str	r4, [sp, #0]
 80039f8:	6993      	ldr	r3, [r2, #24]
 80039fa:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80039fc:	9307      	str	r3, [sp, #28]
 80039fe:	9403      	str	r4, [sp, #12]
 8003a00:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003a04:	69d6      	ldr	r6, [r2, #28]
 8003a06:	6893      	ldr	r3, [r2, #8]
 8003a08:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003a0a:	9104      	str	r1, [sp, #16]
 8003a0c:	2d00      	cmp	r5, #0
 8003a0e:	f000 80c5 	beq.w	8003b9c <D48_GENERIC+0x1b4>
 8003a12:	f004 0510 	and.w	r5, r4, #16
 8003a16:	f004 0420 	and.w	r4, r4, #32
 8003a1a:	4967      	ldr	r1, [pc, #412]	; (8003bb8 <D48_GENERIC+0x1d0>)
 8003a1c:	9505      	str	r5, [sp, #20]
 8003a1e:	9406      	str	r4, [sp, #24]
 8003a20:	f04f 0c00 	mov.w	ip, #0
 8003a24:	4657      	mov	r7, sl
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	e09c      	b.n	8003b64 <D48_GENERIC+0x17c>
 8003a2a:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8003a2e:	f810 b009 	ldrb.w	fp, [r0, r9]
 8003a32:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8003a36:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8003a3a:	7800      	ldrb	r0, [r0, #0]
 8003a3c:	0424      	lsls	r4, r4, #16
 8003a3e:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8003a42:	f818 4005 	ldrb.w	r4, [r8, r5]
 8003a46:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8003a4a:	44a8      	add	r8, r5
 8003a4c:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8003a50:	eb0b 0500 	add.w	r5, fp, r0
 8003a54:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8003a58:	fa5f f885 	uxtb.w	r8, r5
 8003a5c:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8003a60:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8003a64:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8003a68:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8003a6c:	0e2d      	lsrs	r5, r5, #24
 8003a6e:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8003a72:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8003a76:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8003a7a:	b2e6      	uxtb	r6, r4
 8003a7c:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8003a80:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003a84:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8003a88:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003a8c:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8003a90:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8003a94:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8003a98:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8003a9c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003aa0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003aa4:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8003aa8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003aac:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003ab0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003ab4:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8003ab8:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8003abc:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8003ac0:	4c3e      	ldr	r4, [pc, #248]	; (8003bbc <D48_GENERIC+0x1d4>)
 8003ac2:	9d00      	ldr	r5, [sp, #0]
 8003ac4:	fb2a 5404 	smlad	r4, sl, r4, r5
 8003ac8:	4d3d      	ldr	r5, [pc, #244]	; (8003bc0 <D48_GENERIC+0x1d8>)
 8003aca:	fb28 4405 	smlad	r4, r8, r5, r4
 8003ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ad2:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8003ad6:	4c3b      	ldr	r4, [pc, #236]	; (8003bc4 <D48_GENERIC+0x1dc>)
 8003ad8:	9b01      	ldr	r3, [sp, #4]
 8003ada:	fb2a 3304 	smlad	r3, sl, r4, r3
 8003ade:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8003ae2:	fb28 3304 	smlad	r3, r8, r4, r3
 8003ae6:	4c38      	ldr	r4, [pc, #224]	; (8003bc8 <D48_GENERIC+0x1e0>)
 8003ae8:	fb2e 3304 	smlad	r3, lr, r4, r3
 8003aec:	2501      	movs	r5, #1
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	fb2a fa05 	smuad	sl, sl, r5
 8003af4:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <D48_GENERIC+0x1e4>)
 8003af6:	fb28 a803 	smlad	r8, r8, r3, sl
 8003afa:	4b35      	ldr	r3, [pc, #212]	; (8003bd0 <D48_GENERIC+0x1e8>)
 8003afc:	fb2e 8303 	smlad	r3, lr, r3, r8
 8003b00:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8003b04:	9301      	str	r3, [sp, #4]
 8003b06:	9b02      	ldr	r3, [sp, #8]
 8003b08:	eb04 0807 	add.w	r8, r4, r7
 8003b0c:	eba8 0803 	sub.w	r8, r8, r3
 8003b10:	9b05      	ldr	r3, [sp, #20]
 8003b12:	4465      	add	r5, ip
 8003b14:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8003b18:	b163      	cbz	r3, 8003b34 <D48_GENERIC+0x14c>
 8003b1a:	6a17      	ldr	r7, [r2, #32]
 8003b1c:	9402      	str	r4, [sp, #8]
 8003b1e:	fba8 8907 	umull	r8, r9, r8, r7
 8003b22:	fb07 990b 	mla	r9, r7, fp, r9
 8003b26:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003b2a:	f149 0900 	adc.w	r9, r9, #0
 8003b2e:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8003b32:	463c      	mov	r4, r7
 8003b34:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8003b38:	9b03      	ldr	r3, [sp, #12]
 8003b3a:	02e4      	lsls	r4, r4, #11
 8003b3c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003b40:	f04f 0900 	mov.w	r9, #0
 8003b44:	fb0c fc0e 	mul.w	ip, ip, lr
 8003b48:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003b4c:	9b04      	ldr	r3, [sp, #16]
 8003b4e:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8003b52:	f304 040f 	ssat	r4, #16, r4
 8003b56:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8003b5a:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003b5c:	fa1f fc85 	uxth.w	ip, r5
 8003b60:	4564      	cmp	r4, ip
 8003b62:	d919      	bls.n	8003b98 <D48_GENERIC+0x1b0>
 8003b64:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003b66:	fa5f fe84 	uxtb.w	lr, r4
 8003b6a:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8003b6e:	f1ce 0500 	rsb	r5, lr, #0
 8003b72:	eb00 0b09 	add.w	fp, r0, r9
 8003b76:	eb0b 0a05 	add.w	sl, fp, r5
 8003b7a:	2c01      	cmp	r4, #1
 8003b7c:	eb0a 0809 	add.w	r8, sl, r9
 8003b80:	f47f af53 	bne.w	8003a2a <D48_GENERIC+0x42>
 8003b84:	9b06      	ldr	r3, [sp, #24]
 8003b86:	6805      	ldr	r5, [r0, #0]
 8003b88:	6844      	ldr	r4, [r0, #4]
 8003b8a:	3006      	adds	r0, #6
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f43f af63 	beq.w	8003a58 <D48_GENERIC+0x70>
 8003b92:	ba6d      	rev16	r5, r5
 8003b94:	ba64      	rev16	r4, r4
 8003b96:	e75f      	b.n	8003a58 <D48_GENERIC+0x70>
 8003b98:	9b01      	ldr	r3, [sp, #4]
 8003b9a:	46ba      	mov	sl, r7
 8003b9c:	6093      	str	r3, [r2, #8]
 8003b9e:	9b00      	ldr	r3, [sp, #0]
 8003ba0:	60d3      	str	r3, [r2, #12]
 8003ba2:	9b02      	ldr	r3, [sp, #8]
 8003ba4:	6153      	str	r3, [r2, #20]
 8003ba6:	9b07      	ldr	r3, [sp, #28]
 8003ba8:	61d6      	str	r6, [r2, #28]
 8003baa:	2000      	movs	r0, #0
 8003bac:	f8c2 a010 	str.w	sl, [r2, #16]
 8003bb0:	6193      	str	r3, [r2, #24]
 8003bb2:	b009      	add	sp, #36	; 0x24
 8003bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb8:	20000000 	.word	0x20000000
 8003bbc:	000f000a 	.word	0x000f000a
 8003bc0:	00060003 	.word	0x00060003
 8003bc4:	00150019 	.word	0x00150019
 8003bc8:	00190015 	.word	0x00190015
 8003bcc:	00030006 	.word	0x00030006
 8003bd0:	000a000f 	.word	0x000a000f

08003bd4 <D64_GENERIC>:
 8003bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	b089      	sub	sp, #36	; 0x24
 8003bda:	6913      	ldr	r3, [r2, #16]
 8003bdc:	6895      	ldr	r5, [r2, #8]
 8003bde:	9303      	str	r3, [sp, #12]
 8003be0:	9501      	str	r5, [sp, #4]
 8003be2:	6953      	ldr	r3, [r2, #20]
 8003be4:	68d5      	ldr	r5, [r2, #12]
 8003be6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003be8:	9304      	str	r3, [sp, #16]
 8003bea:	9500      	str	r5, [sp, #0]
 8003bec:	6993      	ldr	r3, [r2, #24]
 8003bee:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003bf0:	9307      	str	r3, [sp, #28]
 8003bf2:	9505      	str	r5, [sp, #20]
 8003bf4:	69d3      	ldr	r3, [r2, #28]
 8003bf6:	9106      	str	r1, [sp, #24]
 8003bf8:	2c00      	cmp	r4, #0
 8003bfa:	f000 80d9 	beq.w	8003db0 <D64_GENERIC+0x1dc>
 8003bfe:	6a11      	ldr	r1, [r2, #32]
 8003c00:	9102      	str	r1, [sp, #8]
 8003c02:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8003df0 <D64_GENERIC+0x21c>
 8003c06:	f04f 0c00 	mov.w	ip, #0
 8003c0a:	4681      	mov	r9, r0
 8003c0c:	e0c1      	b.n	8003d92 <D64_GENERIC+0x1be>
 8003c0e:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8003c12:	4274      	negs	r4, r6
 8003c14:	eb09 0708 	add.w	r7, r9, r8
 8003c18:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8003c1c:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8003c20:	5d38      	ldrb	r0, [r7, r4]
 8003c22:	5d29      	ldrb	r1, [r5, r4]
 8003c24:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8003c28:	f819 a008 	ldrb.w	sl, [r9, r8]
 8003c2c:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8003c30:	f899 7000 	ldrb.w	r7, [r9]
 8003c34:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8003c38:	4425      	add	r5, r4
 8003c3a:	0409      	lsls	r1, r1, #16
 8003c3c:	0400      	lsls	r0, r0, #16
 8003c3e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8003c42:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8003c46:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8003c4a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8003c4e:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8003c52:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8003c56:	4459      	add	r1, fp
 8003c58:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8003c5c:	4438      	add	r0, r7
 8003c5e:	b2c5      	uxtb	r5, r0
 8003c60:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8003c64:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8003c68:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8003c6c:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8003c70:	0e00      	lsrs	r0, r0, #24
 8003c72:	eb03 0806 	add.w	r8, r3, r6
 8003c76:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8003c7a:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8003c7e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003c82:	b2c8      	uxtb	r0, r1
 8003c84:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8003c88:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003c8c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8003c90:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8003c94:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003c98:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8003c9c:	0e09      	lsrs	r1, r1, #24
 8003c9e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8003ca2:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003ca6:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8003caa:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8003cae:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8003cb2:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8003cb6:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8003cba:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003cbe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003cc2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003cc6:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8003cca:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003cce:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003cd2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003cd6:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8003cda:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8003cde:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8003ce2:	0a8b      	lsrs	r3, r1, #10
 8003ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003ce8:	4939      	ldr	r1, [pc, #228]	; (8003dd0 <D64_GENERIC+0x1fc>)
 8003cea:	9c00      	ldr	r4, [sp, #0]
 8003cec:	fb28 4101 	smlad	r1, r8, r1, r4
 8003cf0:	4c38      	ldr	r4, [pc, #224]	; (8003dd4 <D64_GENERIC+0x200>)
 8003cf2:	fb27 1104 	smlad	r1, r7, r4, r1
 8003cf6:	4c38      	ldr	r4, [pc, #224]	; (8003dd8 <D64_GENERIC+0x204>)
 8003cf8:	fb20 1104 	smlad	r1, r0, r4, r1
 8003cfc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8003d00:	fb2a 1106 	smlad	r1, sl, r6, r1
 8003d04:	4c35      	ldr	r4, [pc, #212]	; (8003ddc <D64_GENERIC+0x208>)
 8003d06:	9d01      	ldr	r5, [sp, #4]
 8003d08:	fb28 5404 	smlad	r4, r8, r4, r5
 8003d0c:	4d33      	ldr	r5, [pc, #204]	; (8003ddc <D64_GENERIC+0x208>)
 8003d0e:	fb2a 4415 	smladx	r4, sl, r5, r4
 8003d12:	4d33      	ldr	r5, [pc, #204]	; (8003de0 <D64_GENERIC+0x20c>)
 8003d14:	fb27 4405 	smlad	r4, r7, r5, r4
 8003d18:	fb20 4415 	smladx	r4, r0, r5, r4
 8003d1c:	2501      	movs	r5, #1
 8003d1e:	9400      	str	r4, [sp, #0]
 8003d20:	fb28 f805 	smuad	r8, r8, r5
 8003d24:	4c2f      	ldr	r4, [pc, #188]	; (8003de4 <D64_GENERIC+0x210>)
 8003d26:	fb27 8704 	smlad	r7, r7, r4, r8
 8003d2a:	4c2f      	ldr	r4, [pc, #188]	; (8003de8 <D64_GENERIC+0x214>)
 8003d2c:	fb20 7004 	smlad	r0, r0, r4, r7
 8003d30:	4c2e      	ldr	r4, [pc, #184]	; (8003dec <D64_GENERIC+0x218>)
 8003d32:	fb2a 0004 	smlad	r0, sl, r4, r0
 8003d36:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8003d3a:	9902      	ldr	r1, [sp, #8]
 8003d3c:	9001      	str	r0, [sp, #4]
 8003d3e:	b189      	cbz	r1, 8003d64 <D64_GENERIC+0x190>
 8003d40:	9803      	ldr	r0, [sp, #12]
 8003d42:	9c04      	ldr	r4, [sp, #16]
 8003d44:	9604      	str	r6, [sp, #16]
 8003d46:	4430      	add	r0, r6
 8003d48:	1b00      	subs	r0, r0, r4
 8003d4a:	17c5      	asrs	r5, r0, #31
 8003d4c:	460f      	mov	r7, r1
 8003d4e:	fba0 0101 	umull	r0, r1, r0, r1
 8003d52:	fb07 1105 	mla	r1, r7, r5, r1
 8003d56:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003d5a:	f141 0100 	adc.w	r1, r1, #0
 8003d5e:	0049      	lsls	r1, r1, #1
 8003d60:	9103      	str	r1, [sp, #12]
 8003d62:	460e      	mov	r6, r1
 8003d64:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8003d66:	9905      	ldr	r1, [sp, #20]
 8003d68:	9806      	ldr	r0, [sp, #24]
 8003d6a:	02b6      	lsls	r6, r6, #10
 8003d6c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003d70:	f04f 0800 	mov.w	r8, #0
 8003d74:	fb0c f404 	mul.w	r4, ip, r4
 8003d78:	fbc1 7806 	smlal	r7, r8, r1, r6
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	1089      	asrs	r1, r1, #2
 8003d80:	f301 010f 	ssat	r1, #16, r1
 8003d84:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8003d88:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8003d8a:	f10c 0c01 	add.w	ip, ip, #1
 8003d8e:	4561      	cmp	r1, ip
 8003d90:	dd0e      	ble.n	8003db0 <D64_GENERIC+0x1dc>
 8003d92:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8003d94:	2e01      	cmp	r6, #1
 8003d96:	f47f af3a 	bne.w	8003c0e <D64_GENERIC+0x3a>
 8003d9a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8003d9c:	06b4      	lsls	r4, r6, #26
 8003d9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8003da2:	f109 0908 	add.w	r9, r9, #8
 8003da6:	f57f af5a 	bpl.w	8003c5e <D64_GENERIC+0x8a>
 8003daa:	ba40      	rev16	r0, r0
 8003dac:	ba49      	rev16	r1, r1
 8003dae:	e756      	b.n	8003c5e <D64_GENERIC+0x8a>
 8003db0:	61d3      	str	r3, [r2, #28]
 8003db2:	9b03      	ldr	r3, [sp, #12]
 8003db4:	9901      	ldr	r1, [sp, #4]
 8003db6:	6113      	str	r3, [r2, #16]
 8003db8:	9b04      	ldr	r3, [sp, #16]
 8003dba:	6091      	str	r1, [r2, #8]
 8003dbc:	6153      	str	r3, [r2, #20]
 8003dbe:	9900      	ldr	r1, [sp, #0]
 8003dc0:	9b07      	ldr	r3, [sp, #28]
 8003dc2:	60d1      	str	r1, [r2, #12]
 8003dc4:	2000      	movs	r0, #0
 8003dc6:	6193      	str	r3, [r2, #24]
 8003dc8:	b009      	add	sp, #36	; 0x24
 8003dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dce:	bf00      	nop
 8003dd0:	001c0015 	.word	0x001c0015
 8003dd4:	000f000a 	.word	0x000f000a
 8003dd8:	00060003 	.word	0x00060003
 8003ddc:	0024002a 	.word	0x0024002a
 8003de0:	002e0030 	.word	0x002e0030
 8003de4:	00030006 	.word	0x00030006
 8003de8:	000a000f 	.word	0x000a000f
 8003dec:	0015001c 	.word	0x0015001c
 8003df0:	20000000 	.word	0x20000000

08003df4 <D80_GENERIC>:
 8003df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df8:	b08b      	sub	sp, #44	; 0x2c
 8003dfa:	6914      	ldr	r4, [r2, #16]
 8003dfc:	9404      	str	r4, [sp, #16]
 8003dfe:	6954      	ldr	r4, [r2, #20]
 8003e00:	9405      	str	r4, [sp, #20]
 8003e02:	6994      	ldr	r4, [r2, #24]
 8003e04:	9409      	str	r4, [sp, #36]	; 0x24
 8003e06:	6894      	ldr	r4, [r2, #8]
 8003e08:	9402      	str	r4, [sp, #8]
 8003e0a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003e0c:	68d4      	ldr	r4, [r2, #12]
 8003e0e:	9401      	str	r4, [sp, #4]
 8003e10:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003e12:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8003e16:	9406      	str	r4, [sp, #24]
 8003e18:	9107      	str	r1, [sp, #28]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f000 810f 	beq.w	800403e <D80_GENERIC+0x24a>
 8003e20:	6a13      	ldr	r3, [r2, #32]
 8003e22:	9308      	str	r3, [sp, #32]
 8003e24:	2300      	movs	r3, #0
 8003e26:	9200      	str	r2, [sp, #0]
 8003e28:	f8df 9264 	ldr.w	r9, [pc, #612]	; 8004090 <D80_GENERIC+0x29c>
 8003e2c:	f8cd b00c 	str.w	fp, [sp, #12]
 8003e30:	461a      	mov	r2, r3
 8003e32:	e0ed      	b.n	8004010 <D80_GENERIC+0x21c>
 8003e34:	fa5f fc8c 	uxtb.w	ip, ip
 8003e38:	fa0f f48c 	sxth.w	r4, ip
 8003e3c:	0066      	lsls	r6, r4, #1
 8003e3e:	eb06 0804 	add.w	r8, r6, r4
 8003e42:	f1cc 0500 	rsb	r5, ip, #0
 8003e46:	eb00 0108 	add.w	r1, r0, r8
 8003e4a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003e4e:	194b      	adds	r3, r1, r5
 8003e50:	5d49      	ldrb	r1, [r1, r5]
 8003e52:	f810 a008 	ldrb.w	sl, [r0, r8]
 8003e56:	f813 b004 	ldrb.w	fp, [r3, r4]
 8003e5a:	f810 c00c 	ldrb.w	ip, [r0, ip]
 8003e5e:	f890 8000 	ldrb.w	r8, [r0]
 8003e62:	eb03 0e04 	add.w	lr, r3, r4
 8003e66:	eb0e 0705 	add.w	r7, lr, r5
 8003e6a:	0409      	lsls	r1, r1, #16
 8003e6c:	f81e 3005 	ldrb.w	r3, [lr, r5]
 8003e70:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8003e74:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8003e78:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8003e7c:	eb0a 0004 	add.w	r0, sl, r4
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	f81a a004 	ldrb.w	sl, [sl, r4]
 8003e86:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8003e8a:	5d44      	ldrb	r4, [r0, r5]
 8003e8c:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8003e90:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8003e94:	4428      	add	r0, r5
 8003e96:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8003e9a:	4441      	add	r1, r8
 8003e9c:	4430      	add	r0, r6
 8003e9e:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8003ea2:	441f      	add	r7, r3
 8003ea4:	b2cd      	uxtb	r5, r1
 8003ea6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003eaa:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8003eae:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 8003eb2:	9b03      	ldr	r3, [sp, #12]
 8003eb4:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8003eb8:	0e09      	lsrs	r1, r1, #24
 8003eba:	4433      	add	r3, r6
 8003ebc:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 8003ec0:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8003ec4:	b2fd      	uxtb	r5, r7
 8003ec6:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8003eca:	469b      	mov	fp, r3
 8003ecc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003ed0:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8003ed4:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8003ed8:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8003edc:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8003ee0:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8003ee4:	0e3b      	lsrs	r3, r7, #24
 8003ee6:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8003eea:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 8003eee:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003ef2:	fa5f fe84 	uxtb.w	lr, r4
 8003ef6:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8003efa:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003efe:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003f02:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8003f06:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8003f0a:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8003f0e:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 8003f12:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8003f16:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003f1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f1e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8003f22:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003f26:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003f2a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003f2e:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 8003f32:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8003f36:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8003f3a:	0aa3      	lsrs	r3, r4, #10
 8003f3c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003f40:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003f44:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003f48:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 8003f52:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8003f56:	4b42      	ldr	r3, [pc, #264]	; (8004060 <D80_GENERIC+0x26c>)
 8003f58:	9901      	ldr	r1, [sp, #4]
 8003f5a:	fb2b 1303 	smlad	r3, fp, r3, r1
 8003f5e:	4941      	ldr	r1, [pc, #260]	; (8004064 <D80_GENERIC+0x270>)
 8003f60:	fb28 3301 	smlad	r3, r8, r1, r3
 8003f64:	4940      	ldr	r1, [pc, #256]	; (8004068 <D80_GENERIC+0x274>)
 8003f66:	fb2c 3301 	smlad	r3, ip, r1, r3
 8003f6a:	4940      	ldr	r1, [pc, #256]	; (800406c <D80_GENERIC+0x278>)
 8003f6c:	fb27 3301 	smlad	r3, r7, r1, r3
 8003f70:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003f74:	fb2e 3301 	smlad	r3, lr, r1, r3
 8003f78:	493d      	ldr	r1, [pc, #244]	; (8004070 <D80_GENERIC+0x27c>)
 8003f7a:	9c02      	ldr	r4, [sp, #8]
 8003f7c:	fb2b 4401 	smlad	r4, fp, r1, r4
 8003f80:	493c      	ldr	r1, [pc, #240]	; (8004074 <D80_GENERIC+0x280>)
 8003f82:	fb28 4401 	smlad	r4, r8, r1, r4
 8003f86:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8003f8a:	fb2c 4101 	smlad	r1, ip, r1, r4
 8003f8e:	4c3a      	ldr	r4, [pc, #232]	; (8004078 <D80_GENERIC+0x284>)
 8003f90:	fb27 1104 	smlad	r1, r7, r4, r1
 8003f94:	4c39      	ldr	r4, [pc, #228]	; (800407c <D80_GENERIC+0x288>)
 8003f96:	fb2e 1104 	smlad	r1, lr, r4, r1
 8003f9a:	9101      	str	r1, [sp, #4]
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fb2b fb01 	smuad	fp, fp, r1
 8003fa2:	4937      	ldr	r1, [pc, #220]	; (8004080 <D80_GENERIC+0x28c>)
 8003fa4:	fb28 b801 	smlad	r8, r8, r1, fp
 8003fa8:	4d36      	ldr	r5, [pc, #216]	; (8004084 <D80_GENERIC+0x290>)
 8003faa:	fb2c 8c05 	smlad	ip, ip, r5, r8
 8003fae:	4d36      	ldr	r5, [pc, #216]	; (8004088 <D80_GENERIC+0x294>)
 8003fb0:	fb27 c705 	smlad	r7, r7, r5, ip
 8003fb4:	4d35      	ldr	r5, [pc, #212]	; (800408c <D80_GENERIC+0x298>)
 8003fb6:	fb2e 7105 	smlad	r1, lr, r5, r7
 8003fba:	9102      	str	r1, [sp, #8]
 8003fbc:	9908      	ldr	r1, [sp, #32]
 8003fbe:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8003fc2:	b181      	cbz	r1, 8003fe6 <D80_GENERIC+0x1f2>
 8003fc4:	9c04      	ldr	r4, [sp, #16]
 8003fc6:	9d05      	ldr	r5, [sp, #20]
 8003fc8:	9305      	str	r3, [sp, #20]
 8003fca:	441c      	add	r4, r3
 8003fcc:	1b64      	subs	r4, r4, r5
 8003fce:	17e7      	asrs	r7, r4, #31
 8003fd0:	fba4 4501 	umull	r4, r5, r4, r1
 8003fd4:	fb01 5507 	mla	r5, r1, r7, r5
 8003fd8:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8003fdc:	f145 0500 	adc.w	r5, r5, #0
 8003fe0:	0069      	lsls	r1, r5, #1
 8003fe2:	9104      	str	r1, [sp, #16]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	9e00      	ldr	r6, [sp, #0]
 8003fe8:	9f06      	ldr	r7, [sp, #24]
 8003fea:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8003fec:	025b      	lsls	r3, r3, #9
 8003fee:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	fb02 f101 	mul.w	r1, r2, r1
 8003ff8:	fbc7 4503 	smlal	r4, r5, r7, r3
 8003ffc:	9c07      	ldr	r4, [sp, #28]
 8003ffe:	10ab      	asrs	r3, r5, #2
 8004000:	f303 030f 	ssat	r3, #16, r3
 8004004:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8004008:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800400a:	3201      	adds	r2, #1
 800400c:	4293      	cmp	r3, r2
 800400e:	dd13      	ble.n	8004038 <D80_GENERIC+0x244>
 8004010:	9b00      	ldr	r3, [sp, #0]
 8004012:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 8004016:	f1bc 0f01 	cmp.w	ip, #1
 800401a:	f47f af0b 	bne.w	8003e34 <D80_GENERIC+0x40>
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	6884      	ldr	r4, [r0, #8]
 8004022:	069b      	lsls	r3, r3, #26
 8004024:	e890 0082 	ldmia.w	r0, {r1, r7}
 8004028:	f100 000a 	add.w	r0, r0, #10
 800402c:	f57f af3a 	bpl.w	8003ea4 <D80_GENERIC+0xb0>
 8004030:	ba49      	rev16	r1, r1
 8004032:	ba7f      	rev16	r7, r7
 8004034:	ba64      	rev16	r4, r4
 8004036:	e735      	b.n	8003ea4 <D80_GENERIC+0xb0>
 8004038:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800403c:	4632      	mov	r2, r6
 800403e:	9b02      	ldr	r3, [sp, #8]
 8004040:	6093      	str	r3, [r2, #8]
 8004042:	9b01      	ldr	r3, [sp, #4]
 8004044:	60d3      	str	r3, [r2, #12]
 8004046:	9b04      	ldr	r3, [sp, #16]
 8004048:	6113      	str	r3, [r2, #16]
 800404a:	9b05      	ldr	r3, [sp, #20]
 800404c:	6153      	str	r3, [r2, #20]
 800404e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004050:	f8c2 b01c 	str.w	fp, [r2, #28]
 8004054:	2000      	movs	r0, #0
 8004056:	6193      	str	r3, [r2, #24]
 8004058:	b00b      	add	sp, #44	; 0x2c
 800405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405e:	bf00      	nop
 8004060:	002d0024 	.word	0x002d0024
 8004064:	001c0015 	.word	0x001c0015
 8004068:	000f000a 	.word	0x000f000a
 800406c:	00060003 	.word	0x00060003
 8004070:	0037003f 	.word	0x0037003f
 8004074:	00450049 	.word	0x00450049
 8004078:	00490045 	.word	0x00490045
 800407c:	003f0037 	.word	0x003f0037
 8004080:	00030006 	.word	0x00030006
 8004084:	000a000f 	.word	0x000a000f
 8004088:	0015001c 	.word	0x0015001c
 800408c:	0024002d 	.word	0x0024002d
 8004090:	20000000 	.word	0x20000000

08004094 <D128_GENERIC>:
 8004094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004098:	b093      	sub	sp, #76	; 0x4c
 800409a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800409c:	9005      	str	r0, [sp, #20]
 800409e:	4610      	mov	r0, r2
 80040a0:	9201      	str	r2, [sp, #4]
 80040a2:	6912      	ldr	r2, [r2, #16]
 80040a4:	920c      	str	r2, [sp, #48]	; 0x30
 80040a6:	4602      	mov	r2, r0
 80040a8:	6940      	ldr	r0, [r0, #20]
 80040aa:	900d      	str	r0, [sp, #52]	; 0x34
 80040ac:	4610      	mov	r0, r2
 80040ae:	4614      	mov	r4, r2
 80040b0:	6992      	ldr	r2, [r2, #24]
 80040b2:	9211      	str	r2, [sp, #68]	; 0x44
 80040b4:	69c2      	ldr	r2, [r0, #28]
 80040b6:	9202      	str	r2, [sp, #8]
 80040b8:	68e2      	ldr	r2, [r4, #12]
 80040ba:	6880      	ldr	r0, [r0, #8]
 80040bc:	9203      	str	r2, [sp, #12]
 80040be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040c0:	9004      	str	r0, [sp, #16]
 80040c2:	920e      	str	r2, [sp, #56]	; 0x38
 80040c4:	910f      	str	r1, [sp, #60]	; 0x3c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 819b 	beq.w	8004402 <D128_GENERIC+0x36e>
 80040cc:	6a23      	ldr	r3, [r4, #32]
 80040ce:	9310      	str	r3, [sp, #64]	; 0x40
 80040d0:	2300      	movs	r3, #0
 80040d2:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800447c <D128_GENERIC+0x3e8>
 80040d6:	9306      	str	r3, [sp, #24]
 80040d8:	e17a      	b.n	80043d0 <D128_GENERIC+0x33c>
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	9d05      	ldr	r5, [sp, #20]
 80040de:	b214      	sxth	r4, r2
 80040e0:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80040e4:	4250      	negs	r0, r2
 80040e6:	eb05 010a 	add.w	r1, r5, sl
 80040ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80040ee:	eb01 0800 	add.w	r8, r1, r0
 80040f2:	eb0b 0c04 	add.w	ip, fp, r4
 80040f6:	eb08 070c 	add.w	r7, r8, ip
 80040fa:	183b      	adds	r3, r7, r0
 80040fc:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8004100:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 8004104:	eb0e 0604 	add.w	r6, lr, r4
 8004108:	9307      	str	r3, [sp, #28]
 800410a:	1833      	adds	r3, r6, r0
 800410c:	9305      	str	r3, [sp, #20]
 800410e:	462b      	mov	r3, r5
 8004110:	f815 a00a 	ldrb.w	sl, [r5, sl]
 8004114:	f8cd a020 	str.w	sl, [sp, #32]
 8004118:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800411c:	f813 c002 	ldrb.w	ip, [r3, r2]
 8004120:	f81e 8004 	ldrb.w	r8, [lr, r4]
 8004124:	5c3a      	ldrb	r2, [r7, r0]
 8004126:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800412a:	781f      	ldrb	r7, [r3, #0]
 800412c:	9b07      	ldr	r3, [sp, #28]
 800412e:	9d05      	ldr	r5, [sp, #20]
 8004130:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8004134:	5c09      	ldrb	r1, [r1, r0]
 8004136:	9709      	str	r7, [sp, #36]	; 0x24
 8004138:	9307      	str	r3, [sp, #28]
 800413a:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800413e:	5c33      	ldrb	r3, [r6, r0]
 8004140:	0412      	lsls	r2, r2, #16
 8004142:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8004146:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800414a:	9d08      	ldr	r5, [sp, #32]
 800414c:	eb06 0a04 	add.w	sl, r6, r4
 8004150:	0409      	lsls	r1, r1, #16
 8004152:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 8004156:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800415a:	5d36      	ldrb	r6, [r6, r4]
 800415c:	9c05      	ldr	r4, [sp, #20]
 800415e:	042d      	lsls	r5, r5, #16
 8004160:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8004164:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8004168:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800416c:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 8004170:	eb0a 0c00 	add.w	ip, sl, r0
 8004174:	041b      	lsls	r3, r3, #16
 8004176:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800417a:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800417e:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 8004182:	9d07      	ldr	r5, [sp, #28]
 8004184:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004188:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800418c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800418e:	4458      	add	r0, fp
 8004190:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8004194:	9005      	str	r0, [sp, #20]
 8004196:	4439      	add	r1, r7
 8004198:	442a      	add	r2, r5
 800419a:	44b2      	add	sl, r6
 800419c:	1918      	adds	r0, r3, r4
 800419e:	b2cb      	uxtb	r3, r1
 80041a0:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80041a4:	9e02      	ldr	r6, [sp, #8]
 80041a6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80041aa:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80041ae:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80041b2:	441e      	add	r6, r3
 80041b4:	0e09      	lsrs	r1, r1, #24
 80041b6:	4633      	mov	r3, r6
 80041b8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80041bc:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 80041c0:	b2d4      	uxtb	r4, r2
 80041c2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80041c6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80041ca:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 80041ce:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80041d2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80041d6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80041da:	0e12      	lsrs	r2, r2, #24
 80041dc:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80041e0:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80041e4:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80041e8:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80041ec:	9702      	str	r7, [sp, #8]
 80041ee:	b2c2      	uxtb	r2, r0
 80041f0:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80041f4:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80041f8:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80041fc:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004200:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8004204:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8004208:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800420c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8004210:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8004214:	0e00      	lsrs	r0, r0, #24
 8004216:	fa5f f68a 	uxtb.w	r6, sl
 800421a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421e:	9309      	str	r3, [sp, #36]	; 0x24
 8004220:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8004224:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8004228:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800422c:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004230:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004234:	950a      	str	r5, [sp, #40]	; 0x28
 8004236:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800423a:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800423e:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004242:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004246:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800424a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800424e:	920b      	str	r2, [sp, #44]	; 0x2c
 8004250:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004256:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800425a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800425e:	9307      	str	r3, [sp, #28]
 8004260:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004264:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004268:	9b02      	ldr	r3, [sp, #8]
 800426a:	f8cd c008 	str.w	ip, [sp, #8]
 800426e:	4694      	mov	ip, r2
 8004270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004272:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8004276:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800427a:	9a02      	ldr	r2, [sp, #8]
 800427c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004280:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004284:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004288:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800428a:	f8cd a020 	str.w	sl, [sp, #32]
 800428e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004292:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004296:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800429a:	9b07      	ldr	r3, [sp, #28]
 800429c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80042a0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80042a4:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 80042a8:	9a08      	ldr	r2, [sp, #32]
 80042aa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80042ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80042b6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80042ba:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 80042be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80042c2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80042c6:	0a96      	lsrs	r6, r2, #10
 80042c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80042cc:	9602      	str	r6, [sp, #8]
 80042ce:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80042d2:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80042d6:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80042da:	4e53      	ldr	r6, [pc, #332]	; (8004428 <D128_GENERIC+0x394>)
 80042dc:	9f03      	ldr	r7, [sp, #12]
 80042de:	fb2c 7606 	smlad	r6, ip, r6, r7
 80042e2:	4f52      	ldr	r7, [pc, #328]	; (800442c <D128_GENERIC+0x398>)
 80042e4:	fb2a 6607 	smlad	r6, sl, r7, r6
 80042e8:	4f51      	ldr	r7, [pc, #324]	; (8004430 <D128_GENERIC+0x39c>)
 80042ea:	fb21 6607 	smlad	r6, r1, r7, r6
 80042ee:	4f51      	ldr	r7, [pc, #324]	; (8004434 <D128_GENERIC+0x3a0>)
 80042f0:	fb24 6607 	smlad	r6, r4, r7, r6
 80042f4:	4f50      	ldr	r7, [pc, #320]	; (8004438 <D128_GENERIC+0x3a4>)
 80042f6:	fb28 6607 	smlad	r6, r8, r7, r6
 80042fa:	4f50      	ldr	r7, [pc, #320]	; (800443c <D128_GENERIC+0x3a8>)
 80042fc:	fb20 6607 	smlad	r6, r0, r7, r6
 8004300:	4f4f      	ldr	r7, [pc, #316]	; (8004440 <D128_GENERIC+0x3ac>)
 8004302:	fb23 6607 	smlad	r6, r3, r7, r6
 8004306:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800430a:	fb25 6607 	smlad	r6, r5, r7, r6
 800430e:	4f4d      	ldr	r7, [pc, #308]	; (8004444 <D128_GENERIC+0x3b0>)
 8004310:	9a04      	ldr	r2, [sp, #16]
 8004312:	fb2c 2e07 	smlad	lr, ip, r7, r2
 8004316:	4a4c      	ldr	r2, [pc, #304]	; (8004448 <D128_GENERIC+0x3b4>)
 8004318:	fb2a ee02 	smlad	lr, sl, r2, lr
 800431c:	4f4b      	ldr	r7, [pc, #300]	; (800444c <D128_GENERIC+0x3b8>)
 800431e:	fb21 ee07 	smlad	lr, r1, r7, lr
 8004322:	4f4b      	ldr	r7, [pc, #300]	; (8004450 <D128_GENERIC+0x3bc>)
 8004324:	fb24 ee07 	smlad	lr, r4, r7, lr
 8004328:	4f4a      	ldr	r7, [pc, #296]	; (8004454 <D128_GENERIC+0x3c0>)
 800432a:	fb28 ee07 	smlad	lr, r8, r7, lr
 800432e:	4f4a      	ldr	r7, [pc, #296]	; (8004458 <D128_GENERIC+0x3c4>)
 8004330:	fb20 ee07 	smlad	lr, r0, r7, lr
 8004334:	4f49      	ldr	r7, [pc, #292]	; (800445c <D128_GENERIC+0x3c8>)
 8004336:	fb23 e707 	smlad	r7, r3, r7, lr
 800433a:	f8df e144 	ldr.w	lr, [pc, #324]	; 8004480 <D128_GENERIC+0x3ec>
 800433e:	fb25 720e 	smlad	r2, r5, lr, r7
 8004342:	f04f 0b01 	mov.w	fp, #1
 8004346:	9203      	str	r2, [sp, #12]
 8004348:	fb2c fb0b 	smuad	fp, ip, fp
 800434c:	4f44      	ldr	r7, [pc, #272]	; (8004460 <D128_GENERIC+0x3cc>)
 800434e:	fb2a ba07 	smlad	sl, sl, r7, fp
 8004352:	4f44      	ldr	r7, [pc, #272]	; (8004464 <D128_GENERIC+0x3d0>)
 8004354:	fb21 aa07 	smlad	sl, r1, r7, sl
 8004358:	4f43      	ldr	r7, [pc, #268]	; (8004468 <D128_GENERIC+0x3d4>)
 800435a:	fb24 aa07 	smlad	sl, r4, r7, sl
 800435e:	4f43      	ldr	r7, [pc, #268]	; (800446c <D128_GENERIC+0x3d8>)
 8004360:	fb28 a707 	smlad	r7, r8, r7, sl
 8004364:	4a42      	ldr	r2, [pc, #264]	; (8004470 <D128_GENERIC+0x3dc>)
 8004366:	fb20 7702 	smlad	r7, r0, r2, r7
 800436a:	4a42      	ldr	r2, [pc, #264]	; (8004474 <D128_GENERIC+0x3e0>)
 800436c:	fb23 7702 	smlad	r7, r3, r2, r7
 8004370:	4b41      	ldr	r3, [pc, #260]	; (8004478 <D128_GENERIC+0x3e4>)
 8004372:	fb25 7303 	smlad	r3, r5, r3, r7
 8004376:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004378:	9304      	str	r3, [sp, #16]
 800437a:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800437e:	b185      	cbz	r5, 80043a2 <D128_GENERIC+0x30e>
 8004380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004382:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004384:	960d      	str	r6, [sp, #52]	; 0x34
 8004386:	4432      	add	r2, r6
 8004388:	1a52      	subs	r2, r2, r1
 800438a:	17d1      	asrs	r1, r2, #31
 800438c:	fba2 2305 	umull	r2, r3, r2, r5
 8004390:	fb05 3301 	mla	r3, r5, r1, r3
 8004394:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004398:	f143 0300 	adc.w	r3, r3, #0
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	930c      	str	r3, [sp, #48]	; 0x30
 80043a0:	461e      	mov	r6, r3
 80043a2:	9801      	ldr	r0, [sp, #4]
 80043a4:	9c06      	ldr	r4, [sp, #24]
 80043a6:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 80043a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80043aa:	01f6      	lsls	r6, r6, #7
 80043ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043b0:	2300      	movs	r3, #0
 80043b2:	fbc5 2306 	smlal	r2, r3, r5, r6
 80043b6:	fb04 f101 	mul.w	r1, r4, r1
 80043ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80043bc:	109b      	asrs	r3, r3, #2
 80043be:	f303 030f 	ssat	r3, #16, r3
 80043c2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80043c6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 80043c8:	1c62      	adds	r2, r4, #1
 80043ca:	4293      	cmp	r3, r2
 80043cc:	9206      	str	r2, [sp, #24]
 80043ce:	dd18      	ble.n	8004402 <D128_GENERIC+0x36e>
 80043d0:	9b01      	ldr	r3, [sp, #4]
 80043d2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80043d4:	2a01      	cmp	r2, #1
 80043d6:	f47f ae80 	bne.w	80040da <D128_GENERIC+0x46>
 80043da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043dc:	9d05      	ldr	r5, [sp, #20]
 80043de:	069b      	lsls	r3, r3, #26
 80043e0:	6829      	ldr	r1, [r5, #0]
 80043e2:	686a      	ldr	r2, [r5, #4]
 80043e4:	68a8      	ldr	r0, [r5, #8]
 80043e6:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 80043ea:	f105 0410 	add.w	r4, r5, #16
 80043ee:	d506      	bpl.n	80043fe <D128_GENERIC+0x36a>
 80043f0:	ba49      	rev16	r1, r1
 80043f2:	ba52      	rev16	r2, r2
 80043f4:	ba40      	rev16	r0, r0
 80043f6:	fa9a fa9a 	rev16.w	sl, sl
 80043fa:	9405      	str	r4, [sp, #20]
 80043fc:	e6cf      	b.n	800419e <D128_GENERIC+0x10a>
 80043fe:	9405      	str	r4, [sp, #20]
 8004400:	e6cd      	b.n	800419e <D128_GENERIC+0x10a>
 8004402:	9a01      	ldr	r2, [sp, #4]
 8004404:	9904      	ldr	r1, [sp, #16]
 8004406:	6091      	str	r1, [r2, #8]
 8004408:	9903      	ldr	r1, [sp, #12]
 800440a:	60d1      	str	r1, [r2, #12]
 800440c:	9b02      	ldr	r3, [sp, #8]
 800440e:	61d3      	str	r3, [r2, #28]
 8004410:	4611      	mov	r1, r2
 8004412:	4613      	mov	r3, r2
 8004414:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004416:	610a      	str	r2, [r1, #16]
 8004418:	990d      	ldr	r1, [sp, #52]	; 0x34
 800441a:	6159      	str	r1, [r3, #20]
 800441c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800441e:	6199      	str	r1, [r3, #24]
 8004420:	2000      	movs	r0, #0
 8004422:	b013      	add	sp, #76	; 0x4c
 8004424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004428:	00780069 	.word	0x00780069
 800442c:	005b004e 	.word	0x005b004e
 8004430:	00420037 	.word	0x00420037
 8004434:	002d0024 	.word	0x002d0024
 8004438:	001c0015 	.word	0x001c0015
 800443c:	000f000a 	.word	0x000f000a
 8004440:	00060003 	.word	0x00060003
 8004444:	00880096 	.word	0x00880096
 8004448:	00a200ac 	.word	0x00a200ac
 800444c:	00b400ba 	.word	0x00b400ba
 8004450:	00be00c0 	.word	0x00be00c0
 8004454:	00c000be 	.word	0x00c000be
 8004458:	00ba00b4 	.word	0x00ba00b4
 800445c:	00ac00a2 	.word	0x00ac00a2
 8004460:	00030006 	.word	0x00030006
 8004464:	000a000f 	.word	0x000a000f
 8004468:	0015001c 	.word	0x0015001c
 800446c:	0024002d 	.word	0x0024002d
 8004470:	00370042 	.word	0x00370042
 8004474:	004e005b 	.word	0x004e005b
 8004478:	00690078 	.word	0x00690078
 800447c:	20000000 	.word	0x20000000
 8004480:	00960088 	.word	0x00960088

08004484 <D16_1CH_HTONS_VOL_HP>:
 8004484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	4691      	mov	r9, r2
 800448a:	b083      	sub	sp, #12
 800448c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800448e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8004492:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	4680      	mov	r8, r0
 800449a:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800449e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80044a2:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80044a6:	f8d9 5008 	ldr.w	r5, [r9, #8]
 80044aa:	9401      	str	r4, [sp, #4]
 80044ac:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80044b0:	f8d9 e020 	ldr.w	lr, [r9, #32]
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	d04e      	beq.n	8004556 <D16_1CH_HTONS_VOL_HP+0xd2>
 80044b8:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8004564 <D16_1CH_HTONS_VOL_HP+0xe0>
 80044bc:	1e8c      	subs	r4, r1, #2
 80044be:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 80044c2:	f858 2b02 	ldr.w	r2, [r8], #2
 80044c6:	ba52      	rev16	r2, r2
 80044c8:	b2d6      	uxtb	r6, r2
 80044ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80044ce:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 80044d2:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80044d6:	4413      	add	r3, r2
 80044d8:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 80044dc:	f3c2 0109 	ubfx	r1, r2, #0, #10
 80044e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80044e8:	0a93      	lsrs	r3, r2, #10
 80044ea:	4a1c      	ldr	r2, [pc, #112]	; (800455c <D16_1CH_HTONS_VOL_HP+0xd8>)
 80044ec:	fb21 5202 	smlad	r2, r1, r2, r5
 80044f0:	4d1b      	ldr	r5, [pc, #108]	; (8004560 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80044f2:	fb21 f505 	smuad	r5, r1, r5
 80044f6:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80044fa:	4410      	add	r0, r2
 80044fc:	1bc0      	subs	r0, r0, r7
 80044fe:	17c7      	asrs	r7, r0, #31
 8004500:	fba0 010e 	umull	r0, r1, r0, lr
 8004504:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004508:	fb0e 1107 	mla	r1, lr, r7, r1
 800450c:	f141 0100 	adc.w	r1, r1, #0
 8004510:	0448      	lsls	r0, r1, #17
 8004512:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004516:	2700      	movs	r7, #0
 8004518:	fbc0 670a 	smlal	r6, r7, r0, sl
 800451c:	45d8      	cmp	r8, fp
 800451e:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8004522:	ea4f 01a7 	mov.w	r1, r7, asr #2
 8004526:	4617      	mov	r7, r2
 8004528:	f301 010f 	ssat	r1, #16, r1
 800452c:	f824 1f02 	strh.w	r1, [r4, #2]!
 8004530:	d1c7      	bne.n	80044c2 <D16_1CH_HTONS_VOL_HP+0x3e>
 8004532:	9901      	ldr	r1, [sp, #4]
 8004534:	f8c9 301c 	str.w	r3, [r9, #28]
 8004538:	9b00      	ldr	r3, [sp, #0]
 800453a:	f8c9 0010 	str.w	r0, [r9, #16]
 800453e:	2000      	movs	r0, #0
 8004540:	f8c9 5008 	str.w	r5, [r9, #8]
 8004544:	f8c9 100c 	str.w	r1, [r9, #12]
 8004548:	f8c9 2014 	str.w	r2, [r9, #20]
 800454c:	f8c9 3018 	str.w	r3, [r9, #24]
 8004550:	b003      	add	sp, #12
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	463a      	mov	r2, r7
 8004558:	4621      	mov	r1, r4
 800455a:	e7eb      	b.n	8004534 <D16_1CH_HTONS_VOL_HP+0xb0>
 800455c:	00030001 	.word	0x00030001
 8004560:	00010003 	.word	0x00010003
 8004564:	20000000 	.word	0x20000000

08004568 <D24_1CH_HTONS_VOL_HP>:
 8004568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456c:	b089      	sub	sp, #36	; 0x24
 800456e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004570:	6996      	ldr	r6, [r2, #24]
 8004572:	9304      	str	r3, [sp, #16]
 8004574:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8004576:	9207      	str	r2, [sp, #28]
 8004578:	6915      	ldr	r5, [r2, #16]
 800457a:	6954      	ldr	r4, [r2, #20]
 800457c:	9606      	str	r6, [sp, #24]
 800457e:	6893      	ldr	r3, [r2, #8]
 8004580:	69d6      	ldr	r6, [r2, #28]
 8004582:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8004586:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800458a:	9a04      	ldr	r2, [sp, #16]
 800458c:	9705      	str	r7, [sp, #20]
 800458e:	2a00      	cmp	r2, #0
 8004590:	d07e      	beq.n	8004690 <D24_1CH_HTONS_VOL_HP+0x128>
 8004592:	f1a1 0b02 	sub.w	fp, r1, #2
 8004596:	2700      	movs	r7, #0
 8004598:	46a8      	mov	r8, r5
 800459a:	f8cd b004 	str.w	fp, [sp, #4]
 800459e:	4655      	mov	r5, sl
 80045a0:	46e3      	mov	fp, ip
 80045a2:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800469c <D24_1CH_HTONS_VOL_HP+0x134>
 80045a6:	46ba      	mov	sl, r7
 80045a8:	469c      	mov	ip, r3
 80045aa:	e055      	b.n	8004658 <D24_1CH_HTONS_VOL_HP+0xf0>
 80045ac:	7802      	ldrb	r2, [r0, #0]
 80045ae:	78c3      	ldrb	r3, [r0, #3]
 80045b0:	7841      	ldrb	r1, [r0, #1]
 80045b2:	0212      	lsls	r2, r2, #8
 80045b4:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 80045b8:	440b      	add	r3, r1
 80045ba:	3002      	adds	r0, #2
 80045bc:	b2d9      	uxtb	r1, r3
 80045be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80045c2:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 80045c6:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80045ca:	0c1b      	lsrs	r3, r3, #16
 80045cc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80045d0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80045d4:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 80045d8:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80045dc:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80045e0:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80045e4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80045e8:	4a2a      	ldr	r2, [pc, #168]	; (8004694 <D24_1CH_HTONS_VOL_HP+0x12c>)
 80045ea:	fb23 b102 	smlad	r1, r3, r2, fp
 80045ee:	4a2a      	ldr	r2, [pc, #168]	; (8004698 <D24_1CH_HTONS_VOL_HP+0x130>)
 80045f0:	fb23 cb02 	smlad	fp, r3, r2, ip
 80045f4:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80045f8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80045fc:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 8004600:	2201      	movs	r2, #1
 8004602:	fb23 f702 	smuad	r7, r3, r2
 8004606:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800460a:	eb01 0208 	add.w	r2, r1, r8
 800460e:	1b12      	subs	r2, r2, r4
 8004610:	17d4      	asrs	r4, r2, #31
 8004612:	fba2 2305 	umull	r2, r3, r2, r5
 8004616:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800461a:	fb05 3304 	mla	r3, r5, r4, r3
 800461e:	f143 0300 	adc.w	r3, r3, #0
 8004622:	9c05      	ldr	r4, [sp, #20]
 8004624:	03da      	lsls	r2, r3, #15
 8004626:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800462a:	f04f 0900 	mov.w	r9, #0
 800462e:	fbc4 8902 	smlal	r8, r9, r4, r2
 8004632:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8004636:	9a01      	ldr	r2, [sp, #4]
 8004638:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800463c:	9b03      	ldr	r3, [sp, #12]
 800463e:	109b      	asrs	r3, r3, #2
 8004640:	f303 030f 	ssat	r3, #16, r3
 8004644:	f822 3f02 	strh.w	r3, [r2, #2]!
 8004648:	9b04      	ldr	r3, [sp, #16]
 800464a:	9201      	str	r2, [sp, #4]
 800464c:	f10a 0a01 	add.w	sl, sl, #1
 8004650:	459a      	cmp	sl, r3
 8004652:	44bc      	add	ip, r7
 8004654:	460c      	mov	r4, r1
 8004656:	d00b      	beq.n	8004670 <D24_1CH_HTONS_VOL_HP+0x108>
 8004658:	f01a 0f01 	tst.w	sl, #1
 800465c:	d0a6      	beq.n	80045ac <D24_1CH_HTONS_VOL_HP+0x44>
 800465e:	78c2      	ldrb	r2, [r0, #3]
 8004660:	7883      	ldrb	r3, [r0, #2]
 8004662:	f810 1b04 	ldrb.w	r1, [r0], #4
 8004666:	0212      	lsls	r2, r2, #8
 8004668:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800466c:	440b      	add	r3, r1
 800466e:	e7a5      	b.n	80045bc <D24_1CH_HTONS_VOL_HP+0x54>
 8004670:	4663      	mov	r3, ip
 8004672:	4645      	mov	r5, r8
 8004674:	46dc      	mov	ip, fp
 8004676:	9807      	ldr	r0, [sp, #28]
 8004678:	6141      	str	r1, [r0, #20]
 800467a:	9906      	ldr	r1, [sp, #24]
 800467c:	6083      	str	r3, [r0, #8]
 800467e:	f8c0 c00c 	str.w	ip, [r0, #12]
 8004682:	61c6      	str	r6, [r0, #28]
 8004684:	6105      	str	r5, [r0, #16]
 8004686:	6181      	str	r1, [r0, #24]
 8004688:	2000      	movs	r0, #0
 800468a:	b009      	add	sp, #36	; 0x24
 800468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004690:	4621      	mov	r1, r4
 8004692:	e7f0      	b.n	8004676 <D24_1CH_HTONS_VOL_HP+0x10e>
 8004694:	00030001 	.word	0x00030001
 8004698:	00060007 	.word	0x00060007
 800469c:	20000000 	.word	0x20000000

080046a0 <D32_1CH_HTONS_VOL_HP>:
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	4692      	mov	sl, r2
 80046a6:	b087      	sub	sp, #28
 80046a8:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80046aa:	f8da 3018 	ldr.w	r3, [sl, #24]
 80046ae:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 80046b2:	9304      	str	r3, [sp, #16]
 80046b4:	f8da 4010 	ldr.w	r4, [sl, #16]
 80046b8:	f8da 8014 	ldr.w	r8, [sl, #20]
 80046bc:	f8da 601c 	ldr.w	r6, [sl, #28]
 80046c0:	f8da 3008 	ldr.w	r3, [sl, #8]
 80046c4:	f8da e00c 	ldr.w	lr, [sl, #12]
 80046c8:	9501      	str	r5, [sp, #4]
 80046ca:	f8da c020 	ldr.w	ip, [sl, #32]
 80046ce:	2a00      	cmp	r2, #0
 80046d0:	d07b      	beq.n	80047ca <D32_1CH_HTONS_VOL_HP+0x12a>
 80046d2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80046d6:	4f3e      	ldr	r7, [pc, #248]	; (80047d0 <D32_1CH_HTONS_VOL_HP+0x130>)
 80046d8:	f8cd c00c 	str.w	ip, [sp, #12]
 80046dc:	9202      	str	r2, [sp, #8]
 80046de:	460d      	mov	r5, r1
 80046e0:	46a1      	mov	r9, r4
 80046e2:	4684      	mov	ip, r0
 80046e4:	f8cd a014 	str.w	sl, [sp, #20]
 80046e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80046ec:	ba49      	rev16	r1, r1
 80046ee:	b2c8      	uxtb	r0, r1
 80046f0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80046f4:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 80046f8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80046fc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8004700:	0e09      	lsrs	r1, r1, #24
 8004702:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8004706:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800470a:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800470e:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8004712:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 8004716:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800471a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800471e:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8004722:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004726:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800472a:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800472e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8004732:	4a28      	ldr	r2, [pc, #160]	; (80047d4 <D32_1CH_HTONS_VOL_HP+0x134>)
 8004734:	fb20 e202 	smlad	r2, r0, r2, lr
 8004738:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800473c:	fb2a 2101 	smlad	r1, sl, r1, r2
 8004740:	4a25      	ldr	r2, [pc, #148]	; (80047d8 <D32_1CH_HTONS_VOL_HP+0x138>)
 8004742:	fb20 3302 	smlad	r3, r0, r2, r3
 8004746:	4a25      	ldr	r2, [pc, #148]	; (80047dc <D32_1CH_HTONS_VOL_HP+0x13c>)
 8004748:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800474c:	2301      	movs	r3, #1
 800474e:	fb20 f003 	smuad	r0, r0, r3
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <D32_1CH_HTONS_VOL_HP+0x140>)
 8004754:	fb2a 0303 	smlad	r3, sl, r3, r0
 8004758:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800475c:	9c03      	ldr	r4, [sp, #12]
 800475e:	eb02 0009 	add.w	r0, r2, r9
 8004762:	eba0 0008 	sub.w	r0, r0, r8
 8004766:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800476a:	fba0 0104 	umull	r0, r1, r0, r4
 800476e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004772:	fb04 110b 	mla	r1, r4, fp, r1
 8004776:	f141 0100 	adc.w	r1, r1, #0
 800477a:	9c01      	ldr	r4, [sp, #4]
 800477c:	0388      	lsls	r0, r1, #14
 800477e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004782:	f04f 0900 	mov.w	r9, #0
 8004786:	fbc0 8904 	smlal	r8, r9, r0, r4
 800478a:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800478e:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8004792:	f300 000f 	ssat	r0, #16, r0
 8004796:	9902      	ldr	r1, [sp, #8]
 8004798:	f825 0b02 	strh.w	r0, [r5], #2
 800479c:	428d      	cmp	r5, r1
 800479e:	4690      	mov	r8, r2
 80047a0:	d1a2      	bne.n	80046e8 <D32_1CH_HTONS_VOL_HP+0x48>
 80047a2:	f8dd a014 	ldr.w	sl, [sp, #20]
 80047a6:	464c      	mov	r4, r9
 80047a8:	f8ca 3008 	str.w	r3, [sl, #8]
 80047ac:	9b04      	ldr	r3, [sp, #16]
 80047ae:	f8ca e00c 	str.w	lr, [sl, #12]
 80047b2:	2000      	movs	r0, #0
 80047b4:	f8ca 601c 	str.w	r6, [sl, #28]
 80047b8:	f8ca 4010 	str.w	r4, [sl, #16]
 80047bc:	f8ca 2014 	str.w	r2, [sl, #20]
 80047c0:	f8ca 3018 	str.w	r3, [sl, #24]
 80047c4:	b007      	add	sp, #28
 80047c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047ca:	4642      	mov	r2, r8
 80047cc:	e7ec      	b.n	80047a8 <D32_1CH_HTONS_VOL_HP+0x108>
 80047ce:	bf00      	nop
 80047d0:	20000000 	.word	0x20000000
 80047d4:	00060003 	.word	0x00060003
 80047d8:	000a000c 	.word	0x000a000c
 80047dc:	000c000a 	.word	0x000c000a
 80047e0:	00030006 	.word	0x00030006

080047e4 <D48_1CH_HTONS_VOL_HP>:
 80047e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047e8:	4613      	mov	r3, r2
 80047ea:	461c      	mov	r4, r3
 80047ec:	b087      	sub	sp, #28
 80047ee:	4625      	mov	r5, r4
 80047f0:	4626      	mov	r6, r4
 80047f2:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 80047f4:	9205      	str	r2, [sp, #20]
 80047f6:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80047f8:	f8d3 9014 	ldr.w	r9, [r3, #20]
 80047fc:	9501      	str	r5, [sp, #4]
 80047fe:	4680      	mov	r8, r0
 8004800:	6a35      	ldr	r5, [r6, #32]
 8004802:	6918      	ldr	r0, [r3, #16]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	9304      	str	r3, [sp, #16]
 8004808:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800480c:	68a3      	ldr	r3, [r4, #8]
 800480e:	9502      	str	r5, [sp, #8]
 8004810:	68e4      	ldr	r4, [r4, #12]
 8004812:	2a00      	cmp	r2, #0
 8004814:	f000 808c 	beq.w	8004930 <D48_1CH_HTONS_VOL_HP+0x14c>
 8004818:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800481c:	4d45      	ldr	r5, [pc, #276]	; (8004934 <D48_1CH_HTONS_VOL_HP+0x150>)
 800481e:	9203      	str	r2, [sp, #12]
 8004820:	468c      	mov	ip, r1
 8004822:	e898 0044 	ldmia.w	r8, {r2, r6}
 8004826:	f108 0806 	add.w	r8, r8, #6
 800482a:	ba52      	rev16	r2, r2
 800482c:	ba76      	rev16	r6, r6
 800482e:	b2d7      	uxtb	r7, r2
 8004830:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004834:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8004838:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800483c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8004840:	0e12      	lsrs	r2, r2, #24
 8004842:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8004846:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800484a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800484e:	fa5f fb86 	uxtb.w	fp, r6
 8004852:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8004856:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800485a:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800485e:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8004862:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8004866:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800486a:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800486e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8004872:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004876:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800487a:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800487e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004882:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004886:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800488a:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800488e:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8004892:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8004896:	4a28      	ldr	r2, [pc, #160]	; (8004938 <D48_1CH_HTONS_VOL_HP+0x154>)
 8004898:	fb2a 4202 	smlad	r2, sl, r2, r4
 800489c:	4927      	ldr	r1, [pc, #156]	; (800493c <D48_1CH_HTONS_VOL_HP+0x158>)
 800489e:	fb27 2201 	smlad	r2, r7, r1, r2
 80048a2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80048a6:	fb26 2201 	smlad	r2, r6, r1, r2
 80048aa:	4925      	ldr	r1, [pc, #148]	; (8004940 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80048ac:	fb2a 3401 	smlad	r4, sl, r1, r3
 80048b0:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 80048b4:	fb27 4403 	smlad	r4, r7, r3, r4
 80048b8:	4b22      	ldr	r3, [pc, #136]	; (8004944 <D48_1CH_HTONS_VOL_HP+0x160>)
 80048ba:	fb26 4403 	smlad	r4, r6, r3, r4
 80048be:	2101      	movs	r1, #1
 80048c0:	fb2a fa01 	smuad	sl, sl, r1
 80048c4:	4b20      	ldr	r3, [pc, #128]	; (8004948 <D48_1CH_HTONS_VOL_HP+0x164>)
 80048c6:	fb27 a703 	smlad	r7, r7, r3, sl
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <D48_1CH_HTONS_VOL_HP+0x168>)
 80048cc:	fb26 7303 	smlad	r3, r6, r3, r7
 80048d0:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 80048d4:	9e02      	ldr	r6, [sp, #8]
 80048d6:	9f01      	ldr	r7, [sp, #4]
 80048d8:	4410      	add	r0, r2
 80048da:	eba0 0009 	sub.w	r0, r0, r9
 80048de:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 80048e2:	fba0 0106 	umull	r0, r1, r0, r6
 80048e6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80048ea:	fb06 110a 	mla	r1, r6, sl, r1
 80048ee:	f141 0100 	adc.w	r1, r1, #0
 80048f2:	0308      	lsls	r0, r1, #12
 80048f4:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 80048f8:	f04f 0a00 	mov.w	sl, #0
 80048fc:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8004900:	4657      	mov	r7, sl
 8004902:	10b8      	asrs	r0, r7, #2
 8004904:	f300 000f 	ssat	r0, #16, r0
 8004908:	f82c 0b02 	strh.w	r0, [ip], #2
 800490c:	0048      	lsls	r0, r1, #1
 800490e:	9903      	ldr	r1, [sp, #12]
 8004910:	458c      	cmp	ip, r1
 8004912:	4691      	mov	r9, r2
 8004914:	d185      	bne.n	8004822 <D48_1CH_HTONS_VOL_HP+0x3e>
 8004916:	9d05      	ldr	r5, [sp, #20]
 8004918:	616a      	str	r2, [r5, #20]
 800491a:	9a04      	ldr	r2, [sp, #16]
 800491c:	6128      	str	r0, [r5, #16]
 800491e:	2000      	movs	r0, #0
 8004920:	60ab      	str	r3, [r5, #8]
 8004922:	60ec      	str	r4, [r5, #12]
 8004924:	f8c5 e01c 	str.w	lr, [r5, #28]
 8004928:	61aa      	str	r2, [r5, #24]
 800492a:	b007      	add	sp, #28
 800492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004930:	464a      	mov	r2, r9
 8004932:	e7f0      	b.n	8004916 <D48_1CH_HTONS_VOL_HP+0x132>
 8004934:	20000000 	.word	0x20000000
 8004938:	000f000a 	.word	0x000f000a
 800493c:	00060003 	.word	0x00060003
 8004940:	00150019 	.word	0x00150019
 8004944:	00190015 	.word	0x00190015
 8004948:	00030006 	.word	0x00030006
 800494c:	000a000f 	.word	0x000a000f

08004950 <D64_1CH_HTONS_VOL_HP>:
 8004950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	b089      	sub	sp, #36	; 0x24
 8004956:	4614      	mov	r4, r2
 8004958:	9207      	str	r2, [sp, #28]
 800495a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800495c:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8004960:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8004964:	6992      	ldr	r2, [r2, #24]
 8004966:	9206      	str	r2, [sp, #24]
 8004968:	68e2      	ldr	r2, [r4, #12]
 800496a:	9201      	str	r2, [sp, #4]
 800496c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800496e:	9203      	str	r2, [sp, #12]
 8004970:	6a22      	ldr	r2, [r4, #32]
 8004972:	69e5      	ldr	r5, [r4, #28]
 8004974:	68a6      	ldr	r6, [r4, #8]
 8004976:	9204      	str	r2, [sp, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 80b0 	beq.w	8004ade <D64_1CH_HTONS_VOL_HP+0x18e>
 800497e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004982:	4f58      	ldr	r7, [pc, #352]	; (8004ae4 <D64_1CH_HTONS_VOL_HP+0x194>)
 8004984:	9305      	str	r3, [sp, #20]
 8004986:	9102      	str	r1, [sp, #8]
 8004988:	f850 2b08 	ldr.w	r2, [r0], #8
 800498c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004990:	ba52      	rev16	r2, r2
 8004992:	fa93 f993 	rev16.w	r9, r3
 8004996:	b2d4      	uxtb	r4, r2
 8004998:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800499c:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 80049a0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80049a4:	9901      	ldr	r1, [sp, #4]
 80049a6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80049aa:	0e12      	lsrs	r2, r2, #24
 80049ac:	44ab      	add	fp, r5
 80049ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80049b2:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 80049b6:	fa5f f289 	uxtb.w	r2, r9
 80049ba:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 80049be:	f3c9 2307 	ubfx	r3, r9, #8, #8
 80049c2:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 80049c6:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 80049ca:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80049ce:	f3c9 4507 	ubfx	r5, r9, #16, #8
 80049d2:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 80049d6:	ea4f 6919 	mov.w	r9, r9, lsr #24
 80049da:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 80049de:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80049e2:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 80049e6:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80049ea:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80049ee:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80049f2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80049f6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80049fa:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80049fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a02:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004a06:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8004a0a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004a0e:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8004a12:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004a16:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8004a1a:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8004a1e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8004a22:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <D64_1CH_HTONS_VOL_HP+0x198>)
 8004a28:	fb2b 1303 	smlad	r3, fp, r3, r1
 8004a2c:	492f      	ldr	r1, [pc, #188]	; (8004aec <D64_1CH_HTONS_VOL_HP+0x19c>)
 8004a2e:	fb24 3301 	smlad	r3, r4, r1, r3
 8004a32:	492f      	ldr	r1, [pc, #188]	; (8004af0 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8004a34:	fb22 3301 	smlad	r3, r2, r1, r3
 8004a38:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8004a3c:	fb2e 390a 	smlad	r9, lr, sl, r3
 8004a40:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8004a42:	fb2b 6603 	smlad	r6, fp, r3, r6
 8004a46:	fb2e 6613 	smladx	r6, lr, r3, r6
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8004a4c:	fb24 6603 	smlad	r6, r4, r3, r6
 8004a50:	fb22 6313 	smladx	r3, r2, r3, r6
 8004a54:	f04f 0a01 	mov.w	sl, #1
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	fb2b fb0a 	smuad	fp, fp, sl
 8004a5e:	4b27      	ldr	r3, [pc, #156]	; (8004afc <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8004a60:	fb24 ba03 	smlad	sl, r4, r3, fp
 8004a64:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8004a66:	fb22 a203 	smlad	r2, r2, r3, sl
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8004a6c:	fb2e 2603 	smlad	r6, lr, r3, r2
 8004a70:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8004a74:	eb0a 020c 	add.w	r2, sl, ip
 8004a78:	9c04      	ldr	r4, [sp, #16]
 8004a7a:	9903      	ldr	r1, [sp, #12]
 8004a7c:	eba2 0208 	sub.w	r2, r2, r8
 8004a80:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8004a84:	fba2 2304 	umull	r2, r3, r2, r4
 8004a88:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004a8c:	fb04 3309 	mla	r3, r4, r9, r3
 8004a90:	f143 0300 	adc.w	r3, r3, #0
 8004a94:	02da      	lsls	r2, r3, #11
 8004a96:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004a9a:	f04f 0900 	mov.w	r9, #0
 8004a9e:	fbc1 8902 	smlal	r8, r9, r1, r2
 8004aa2:	9902      	ldr	r1, [sp, #8]
 8004aa4:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8004aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004aac:	f302 020f 	ssat	r2, #16, r2
 8004ab0:	9b05      	ldr	r3, [sp, #20]
 8004ab2:	f821 2b02 	strh.w	r2, [r1], #2
 8004ab6:	4299      	cmp	r1, r3
 8004ab8:	9102      	str	r1, [sp, #8]
 8004aba:	46d0      	mov	r8, sl
 8004abc:	f47f af64 	bne.w	8004988 <D64_1CH_HTONS_VOL_HP+0x38>
 8004ac0:	9a07      	ldr	r2, [sp, #28]
 8004ac2:	9901      	ldr	r1, [sp, #4]
 8004ac4:	60d1      	str	r1, [r2, #12]
 8004ac6:	9906      	ldr	r1, [sp, #24]
 8004ac8:	6096      	str	r6, [r2, #8]
 8004aca:	2000      	movs	r0, #0
 8004acc:	61d5      	str	r5, [r2, #28]
 8004ace:	f8c2 c010 	str.w	ip, [r2, #16]
 8004ad2:	f8c2 a014 	str.w	sl, [r2, #20]
 8004ad6:	6191      	str	r1, [r2, #24]
 8004ad8:	b009      	add	sp, #36	; 0x24
 8004ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ade:	46c2      	mov	sl, r8
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	e7ee      	b.n	8004ac2 <D64_1CH_HTONS_VOL_HP+0x172>
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	001c0015 	.word	0x001c0015
 8004aec:	000f000a 	.word	0x000f000a
 8004af0:	00060003 	.word	0x00060003
 8004af4:	0024002a 	.word	0x0024002a
 8004af8:	002e0030 	.word	0x002e0030
 8004afc:	00030006 	.word	0x00030006
 8004b00:	000a000f 	.word	0x000a000f
 8004b04:	0015001c 	.word	0x0015001c

08004b08 <D80_1CH_HTONS_VOL_HP>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	4686      	mov	lr, r0
 8004b12:	6918      	ldr	r0, [r3, #16]
 8004b14:	9000      	str	r0, [sp, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	461c      	mov	r4, r3
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	9302      	str	r3, [sp, #8]
 8004b1e:	6983      	ldr	r3, [r0, #24]
 8004b20:	9306      	str	r3, [sp, #24]
 8004b22:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8004b26:	69c3      	ldr	r3, [r0, #28]
 8004b28:	68c0      	ldr	r0, [r0, #12]
 8004b2a:	9207      	str	r2, [sp, #28]
 8004b2c:	9001      	str	r0, [sp, #4]
 8004b2e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004b30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b32:	9003      	str	r0, [sp, #12]
 8004b34:	6a20      	ldr	r0, [r4, #32]
 8004b36:	9004      	str	r0, [sp, #16]
 8004b38:	2a00      	cmp	r2, #0
 8004b3a:	f000 80d2 	beq.w	8004ce2 <D80_1CH_HTONS_VOL_HP+0x1da>
 8004b3e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004b42:	4869      	ldr	r0, [pc, #420]	; (8004ce8 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8004b44:	9205      	str	r2, [sp, #20]
 8004b46:	461c      	mov	r4, r3
 8004b48:	f8de 5000 	ldr.w	r5, [lr]
 8004b4c:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004b50:	f8de 3008 	ldr.w	r3, [lr, #8]
 8004b54:	f10e 0e0a 	add.w	lr, lr, #10
 8004b58:	ba6d      	rev16	r5, r5
 8004b5a:	ba52      	rev16	r2, r2
 8004b5c:	fa93 fb93 	rev16.w	fp, r3
 8004b60:	b2ee      	uxtb	r6, r5
 8004b62:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8004b66:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8004b6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004b6e:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8004b72:	eb04 0a07 	add.w	sl, r4, r7
 8004b76:	0e2d      	lsrs	r5, r5, #24
 8004b78:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8004b7c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8004b80:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8004b84:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8004b88:	b2d5      	uxtb	r5, r2
 8004b8a:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8004b8e:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8004b92:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8004b96:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8004b9a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8004b9e:	0e12      	lsrs	r2, r2, #24
 8004ba0:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8004ba4:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8004ba8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8004bac:	fa5f f48b 	uxtb.w	r4, fp
 8004bb0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004bb4:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004bb8:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004bbc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8004bc0:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8004bc4:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004bc8:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8004bcc:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8004bd0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004bd4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8004bd8:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004bdc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004be0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004be4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004be8:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8004bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf0:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8004bf4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004bf8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004bfc:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8004c00:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8004c04:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8004c08:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004c0c:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8004c10:	4d36      	ldr	r5, [pc, #216]	; (8004cec <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8004c12:	9f01      	ldr	r7, [sp, #4]
 8004c14:	fb23 7505 	smlad	r5, r3, r5, r7
 8004c18:	4f35      	ldr	r7, [pc, #212]	; (8004cf0 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8004c1a:	fb29 5507 	smlad	r5, r9, r7, r5
 8004c1e:	4f35      	ldr	r7, [pc, #212]	; (8004cf4 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8004c20:	fb28 5507 	smlad	r5, r8, r7, r5
 8004c24:	4f34      	ldr	r7, [pc, #208]	; (8004cf8 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8004c26:	fb22 5507 	smlad	r5, r2, r7, r5
 8004c2a:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8004c2e:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8004c32:	4d32      	ldr	r5, [pc, #200]	; (8004cfc <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8004c34:	fb23 cc05 	smlad	ip, r3, r5, ip
 8004c38:	4d31      	ldr	r5, [pc, #196]	; (8004d00 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8004c3a:	fb29 cc05 	smlad	ip, r9, r5, ip
 8004c3e:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8004c42:	fb28 c505 	smlad	r5, r8, r5, ip
 8004c46:	4f2f      	ldr	r7, [pc, #188]	; (8004d04 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8004c48:	fb22 5507 	smlad	r5, r2, r7, r5
 8004c4c:	4f2e      	ldr	r7, [pc, #184]	; (8004d08 <D80_1CH_HTONS_VOL_HP+0x200>)
 8004c4e:	fb26 5507 	smlad	r5, r6, r7, r5
 8004c52:	f04f 0a01 	mov.w	sl, #1
 8004c56:	9501      	str	r5, [sp, #4]
 8004c58:	fb23 fa0a 	smuad	sl, r3, sl
 8004c5c:	4b2b      	ldr	r3, [pc, #172]	; (8004d0c <D80_1CH_HTONS_VOL_HP+0x204>)
 8004c5e:	fb29 a903 	smlad	r9, r9, r3, sl
 8004c62:	4d2b      	ldr	r5, [pc, #172]	; (8004d10 <D80_1CH_HTONS_VOL_HP+0x208>)
 8004c64:	fb28 9805 	smlad	r8, r8, r5, r9
 8004c68:	4d2a      	ldr	r5, [pc, #168]	; (8004d14 <D80_1CH_HTONS_VOL_HP+0x20c>)
 8004c6a:	fb22 8205 	smlad	r2, r2, r5, r8
 8004c6e:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <D80_1CH_HTONS_VOL_HP+0x210>)
 8004c70:	fb26 2c03 	smlad	ip, r6, r3, r2
 8004c74:	9b00      	ldr	r3, [sp, #0]
 8004c76:	9d04      	ldr	r5, [sp, #16]
 8004c78:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8004c7c:	4453      	add	r3, sl
 8004c7e:	461a      	mov	r2, r3
 8004c80:	9b02      	ldr	r3, [sp, #8]
 8004c82:	f8cd a008 	str.w	sl, [sp, #8]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	17d7      	asrs	r7, r2, #31
 8004c8a:	fba2 2305 	umull	r2, r3, r2, r5
 8004c8e:	fb05 3307 	mla	r3, r5, r7, r3
 8004c92:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004c96:	f143 0300 	adc.w	r3, r3, #0
 8004c9a:	9d03      	ldr	r5, [sp, #12]
 8004c9c:	029a      	lsls	r2, r3, #10
 8004c9e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004ca2:	2700      	movs	r7, #0
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fbc5 6702 	smlal	r6, r7, r5, r2
 8004caa:	10ba      	asrs	r2, r7, #2
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	f302 020f 	ssat	r2, #16, r2
 8004cb2:	9b05      	ldr	r3, [sp, #20]
 8004cb4:	f821 2b02 	strh.w	r2, [r1], #2
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	f47f af45 	bne.w	8004b48 <D80_1CH_HTONS_VOL_HP+0x40>
 8004cbe:	4623      	mov	r3, r4
 8004cc0:	9907      	ldr	r1, [sp, #28]
 8004cc2:	9801      	ldr	r0, [sp, #4]
 8004cc4:	60c8      	str	r0, [r1, #12]
 8004cc6:	9a00      	ldr	r2, [sp, #0]
 8004cc8:	f8c1 c008 	str.w	ip, [r1, #8]
 8004ccc:	4608      	mov	r0, r1
 8004cce:	61cb      	str	r3, [r1, #28]
 8004cd0:	610a      	str	r2, [r1, #16]
 8004cd2:	f8c1 a014 	str.w	sl, [r1, #20]
 8004cd6:	9906      	ldr	r1, [sp, #24]
 8004cd8:	6181      	str	r1, [r0, #24]
 8004cda:	2000      	movs	r0, #0
 8004cdc:	b009      	add	sp, #36	; 0x24
 8004cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8004ce6:	e7eb      	b.n	8004cc0 <D80_1CH_HTONS_VOL_HP+0x1b8>
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	002d0024 	.word	0x002d0024
 8004cf0:	001c0015 	.word	0x001c0015
 8004cf4:	000f000a 	.word	0x000f000a
 8004cf8:	00060003 	.word	0x00060003
 8004cfc:	0037003f 	.word	0x0037003f
 8004d00:	00450049 	.word	0x00450049
 8004d04:	00490045 	.word	0x00490045
 8004d08:	003f0037 	.word	0x003f0037
 8004d0c:	00030006 	.word	0x00030006
 8004d10:	000a000f 	.word	0x000a000f
 8004d14:	0015001c 	.word	0x0015001c
 8004d18:	0024002d 	.word	0x0024002d

08004d1c <D128_1CH_HTONS_VOL_HP>:
 8004d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d20:	b093      	sub	sp, #76	; 0x4c
 8004d22:	4614      	mov	r4, r2
 8004d24:	9211      	str	r2, [sp, #68]	; 0x44
 8004d26:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004d28:	6912      	ldr	r2, [r2, #16]
 8004d2a:	9203      	str	r2, [sp, #12]
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	4615      	mov	r5, r2
 8004d30:	6964      	ldr	r4, [r4, #20]
 8004d32:	9406      	str	r4, [sp, #24]
 8004d34:	4614      	mov	r4, r2
 8004d36:	6992      	ldr	r2, [r2, #24]
 8004d38:	9210      	str	r2, [sp, #64]	; 0x40
 8004d3a:	68ea      	ldr	r2, [r5, #12]
 8004d3c:	9204      	str	r2, [sp, #16]
 8004d3e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004d40:	69e6      	ldr	r6, [r4, #28]
 8004d42:	920d      	str	r2, [sp, #52]	; 0x34
 8004d44:	68a4      	ldr	r4, [r4, #8]
 8004d46:	6a2a      	ldr	r2, [r5, #32]
 8004d48:	9405      	str	r4, [sp, #20]
 8004d4a:	920e      	str	r2, [sp, #56]	; 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 8145 	beq.w	8004fdc <D128_1CH_HTONS_VOL_HP+0x2c0>
 8004d52:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004d56:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d58:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 8005038 <D128_1CH_HTONS_VOL_HP+0x31c>
 8004d5c:	9107      	str	r1, [sp, #28]
 8004d5e:	f100 0310 	add.w	r3, r0, #16
 8004d62:	4699      	mov	r9, r3
 8004d64:	f1a9 0110 	sub.w	r1, r9, #16
 8004d68:	c90e      	ldmia	r1, {r1, r2, r3}
 8004d6a:	f859 0c04 	ldr.w	r0, [r9, #-4]
 8004d6e:	ba49      	rev16	r1, r1
 8004d70:	ba52      	rev16	r2, r2
 8004d72:	ba5b      	rev16	r3, r3
 8004d74:	fa90 fa90 	rev16.w	sl, r0
 8004d78:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8004d7c:	b2cc      	uxtb	r4, r1
 8004d7e:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8004d82:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8004d86:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004d8a:	0e09      	lsrs	r1, r1, #24
 8004d8c:	4426      	add	r6, r4
 8004d8e:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004d92:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8004d96:	b2d0      	uxtb	r0, r2
 8004d98:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8004d9c:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 8004da0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004da4:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004da8:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8004dac:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8004db0:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004db4:	0e12      	lsrs	r2, r2, #24
 8004db6:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004dba:	9701      	str	r7, [sp, #4]
 8004dbc:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8004dc0:	4627      	mov	r7, r4
 8004dc2:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8004dc6:	9702      	str	r7, [sp, #8]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8004dce:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8004dd2:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8004dd6:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004dda:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8004dde:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004de2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004de6:	0e1b      	lsrs	r3, r3, #24
 8004de8:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8004dec:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8004df0:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8004df4:	fa5f f38a 	uxtb.w	r3, sl
 8004df8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004dfc:	960a      	str	r6, [sp, #40]	; 0x28
 8004dfe:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004e02:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8004e06:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004e0a:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004e0e:	950b      	str	r5, [sp, #44]	; 0x2c
 8004e10:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004e14:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004e18:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004e1c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8004e20:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8004e24:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004e28:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004e2c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004e30:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8004e34:	9308      	str	r3, [sp, #32]
 8004e36:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004e3a:	9b01      	ldr	r3, [sp, #4]
 8004e3c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004e40:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004e44:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004e48:	9b02      	ldr	r3, [sp, #8]
 8004e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	9b08      	ldr	r3, [sp, #32]
 8004e52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e56:	9308      	str	r3, [sp, #32]
 8004e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e5a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004e5e:	950c      	str	r5, [sp, #48]	; 0x30
 8004e60:	461d      	mov	r5, r3
 8004e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e64:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004e68:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004e6c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8004e70:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	9b02      	ldr	r3, [sp, #8]
 8004e78:	9202      	str	r2, [sp, #8]
 8004e7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e7e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004e82:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004e86:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004e8a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004e8e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8004e92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004e96:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8004e9a:	9b08      	ldr	r3, [sp, #32]
 8004e9c:	9f01      	ldr	r7, [sp, #4]
 8004e9e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004ea2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004ea6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004eaa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004eae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004eb2:	46be      	mov	lr, r7
 8004eb4:	0a96      	lsrs	r6, r2, #10
 8004eb6:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004eba:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8004ebe:	4f49      	ldr	r7, [pc, #292]	; (8004fe4 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8004ec0:	9a04      	ldr	r2, [sp, #16]
 8004ec2:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8004ec6:	4a48      	ldr	r2, [pc, #288]	; (8004fe8 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8004ec8:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004ecc:	4a47      	ldr	r2, [pc, #284]	; (8004fec <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8004ece:	fb21 ee02 	smlad	lr, r1, r2, lr
 8004ed2:	4a47      	ldr	r2, [pc, #284]	; (8004ff0 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8004ed4:	fb24 ee02 	smlad	lr, r4, r2, lr
 8004ed8:	4a46      	ldr	r2, [pc, #280]	; (8004ff4 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8004eda:	9f02      	ldr	r7, [sp, #8]
 8004edc:	fb27 ee02 	smlad	lr, r7, r2, lr
 8004ee0:	4a45      	ldr	r2, [pc, #276]	; (8004ff8 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8004ee2:	fb20 ee02 	smlad	lr, r0, r2, lr
 8004ee6:	4a45      	ldr	r2, [pc, #276]	; (8004ffc <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8004ee8:	fb23 e702 	smlad	r7, r3, r2, lr
 8004eec:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8004ef0:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8004ef4:	9f01      	ldr	r7, [sp, #4]
 8004ef6:	4a42      	ldr	r2, [pc, #264]	; (8005000 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8004ef8:	46bc      	mov	ip, r7
 8004efa:	9f05      	ldr	r7, [sp, #20]
 8004efc:	fb2c 7c02 	smlad	ip, ip, r2, r7
 8004f00:	4a40      	ldr	r2, [pc, #256]	; (8005004 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8004f02:	fb2a cc02 	smlad	ip, sl, r2, ip
 8004f06:	4f40      	ldr	r7, [pc, #256]	; (8005008 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8004f08:	fb21 cc07 	smlad	ip, r1, r7, ip
 8004f0c:	4f3f      	ldr	r7, [pc, #252]	; (800500c <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8004f0e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8004f12:	4f3f      	ldr	r7, [pc, #252]	; (8005010 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8004f14:	9a02      	ldr	r2, [sp, #8]
 8004f16:	fb22 cc07 	smlad	ip, r2, r7, ip
 8004f1a:	4f3e      	ldr	r7, [pc, #248]	; (8005014 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8004f1c:	fb20 cc07 	smlad	ip, r0, r7, ip
 8004f20:	4f3d      	ldr	r7, [pc, #244]	; (8005018 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 8004f22:	fb23 c707 	smlad	r7, r3, r7, ip
 8004f26:	f8df c114 	ldr.w	ip, [pc, #276]	; 800503c <D128_1CH_HTONS_VOL_HP+0x320>
 8004f2a:	fb25 720c 	smlad	r2, r5, ip, r7
 8004f2e:	f04f 0b01 	mov.w	fp, #1
 8004f32:	9204      	str	r2, [sp, #16]
 8004f34:	9f01      	ldr	r7, [sp, #4]
 8004f36:	fb27 fb0b 	smuad	fp, r7, fp
 8004f3a:	4f38      	ldr	r7, [pc, #224]	; (800501c <D128_1CH_HTONS_VOL_HP+0x300>)
 8004f3c:	fb2a ba07 	smlad	sl, sl, r7, fp
 8004f40:	4f37      	ldr	r7, [pc, #220]	; (8005020 <D128_1CH_HTONS_VOL_HP+0x304>)
 8004f42:	fb21 aa07 	smlad	sl, r1, r7, sl
 8004f46:	4f37      	ldr	r7, [pc, #220]	; (8005024 <D128_1CH_HTONS_VOL_HP+0x308>)
 8004f48:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004f4c:	4f36      	ldr	r7, [pc, #216]	; (8005028 <D128_1CH_HTONS_VOL_HP+0x30c>)
 8004f4e:	9a02      	ldr	r2, [sp, #8]
 8004f50:	fb22 a707 	smlad	r7, r2, r7, sl
 8004f54:	4a35      	ldr	r2, [pc, #212]	; (800502c <D128_1CH_HTONS_VOL_HP+0x310>)
 8004f56:	fb20 7702 	smlad	r7, r0, r2, r7
 8004f5a:	4a35      	ldr	r2, [pc, #212]	; (8005030 <D128_1CH_HTONS_VOL_HP+0x314>)
 8004f5c:	fb23 7702 	smlad	r7, r3, r2, r7
 8004f60:	4b34      	ldr	r3, [pc, #208]	; (8005034 <D128_1CH_HTONS_VOL_HP+0x318>)
 8004f62:	fb25 7303 	smlad	r3, r5, r3, r7
 8004f66:	9305      	str	r3, [sp, #20]
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004f6c:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8004f70:	4473      	add	r3, lr
 8004f72:	461a      	mov	r2, r3
 8004f74:	9b06      	ldr	r3, [sp, #24]
 8004f76:	f8cd e018 	str.w	lr, [sp, #24]
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	17d1      	asrs	r1, r2, #31
 8004f7e:	fba2 2304 	umull	r2, r3, r2, r4
 8004f82:	fb04 3301 	mla	r3, r4, r1, r3
 8004f86:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004f8a:	f143 0300 	adc.w	r3, r3, #0
 8004f8e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004f90:	021a      	lsls	r2, r3, #8
 8004f92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004f96:	2100      	movs	r1, #0
 8004f98:	fbc4 0102 	smlal	r0, r1, r4, r2
 8004f9c:	108a      	asrs	r2, r1, #2
 8004f9e:	9907      	ldr	r1, [sp, #28]
 8004fa0:	f302 020f 	ssat	r2, #16, r2
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	f821 2b02 	strh.w	r2, [r1], #2
 8004faa:	9303      	str	r3, [sp, #12]
 8004fac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fae:	9107      	str	r1, [sp, #28]
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	f109 0910 	add.w	r9, r9, #16
 8004fb6:	f47f aed5 	bne.w	8004d64 <D128_1CH_HTONS_VOL_HP+0x48>
 8004fba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004fbc:	9905      	ldr	r1, [sp, #20]
 8004fbe:	6091      	str	r1, [r2, #8]
 8004fc0:	9904      	ldr	r1, [sp, #16]
 8004fc2:	60d1      	str	r1, [r2, #12]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	61d6      	str	r6, [r2, #28]
 8004fc8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004fca:	9a03      	ldr	r2, [sp, #12]
 8004fcc:	611a      	str	r2, [r3, #16]
 8004fce:	2000      	movs	r0, #0
 8004fd0:	f8c3 e014 	str.w	lr, [r3, #20]
 8004fd4:	6199      	str	r1, [r3, #24]
 8004fd6:	b013      	add	sp, #76	; 0x4c
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	f8dd e018 	ldr.w	lr, [sp, #24]
 8004fe0:	e7eb      	b.n	8004fba <D128_1CH_HTONS_VOL_HP+0x29e>
 8004fe2:	bf00      	nop
 8004fe4:	00780069 	.word	0x00780069
 8004fe8:	005b004e 	.word	0x005b004e
 8004fec:	00420037 	.word	0x00420037
 8004ff0:	002d0024 	.word	0x002d0024
 8004ff4:	001c0015 	.word	0x001c0015
 8004ff8:	000f000a 	.word	0x000f000a
 8004ffc:	00060003 	.word	0x00060003
 8005000:	00880096 	.word	0x00880096
 8005004:	00a200ac 	.word	0x00a200ac
 8005008:	00b400ba 	.word	0x00b400ba
 800500c:	00be00c0 	.word	0x00be00c0
 8005010:	00c000be 	.word	0x00c000be
 8005014:	00ba00b4 	.word	0x00ba00b4
 8005018:	00ac00a2 	.word	0x00ac00a2
 800501c:	00030006 	.word	0x00030006
 8005020:	000a000f 	.word	0x000a000f
 8005024:	0015001c 	.word	0x0015001c
 8005028:	0024002d 	.word	0x0024002d
 800502c:	00370042 	.word	0x00370042
 8005030:	004e005b 	.word	0x004e005b
 8005034:	00690078 	.word	0x00690078
 8005038:	20000000 	.word	0x20000000
 800503c:	00960088 	.word	0x00960088

08005040 <PDM_Filter_Init>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	2240      	movs	r2, #64	; 0x40
 8005044:	4604      	mov	r4, r0
 8005046:	2100      	movs	r1, #0
 8005048:	300c      	adds	r0, #12
 800504a:	f005 f80b 	bl	800a064 <memset>
 800504e:	493b      	ldr	r1, [pc, #236]	; (800513c <PDM_Filter_Init+0xfc>)
 8005050:	483b      	ldr	r0, [pc, #236]	; (8005140 <PDM_Filter_Init+0x100>)
 8005052:	f000 f98d 	bl	8005370 <CRC_Lock>
 8005056:	8822      	ldrh	r2, [r4, #0]
 8005058:	8963      	ldrh	r3, [r4, #10]
 800505a:	4938      	ldr	r1, [pc, #224]	; (800513c <PDM_Filter_Init+0xfc>)
 800505c:	8925      	ldrh	r5, [r4, #8]
 800505e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8005060:	2801      	cmp	r0, #1
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	bf18      	it	ne
 8005068:	2100      	movne	r1, #0
 800506a:	2a01      	cmp	r2, #1
 800506c:	6461      	str	r1, [r4, #68]	; 0x44
 800506e:	86e5      	strh	r5, [r4, #54]	; 0x36
 8005070:	61a3      	str	r3, [r4, #24]
 8005072:	6123      	str	r3, [r4, #16]
 8005074:	6163      	str	r3, [r4, #20]
 8005076:	60e3      	str	r3, [r4, #12]
 8005078:	6263      	str	r3, [r4, #36]	; 0x24
 800507a:	61e3      	str	r3, [r4, #28]
 800507c:	6223      	str	r3, [r4, #32]
 800507e:	6423      	str	r3, [r4, #64]	; 0x40
 8005080:	d918      	bls.n	80050b4 <PDM_Filter_Init+0x74>
 8005082:	2003      	movs	r0, #3
 8005084:	2302      	movs	r3, #2
 8005086:	8862      	ldrh	r2, [r4, #2]
 8005088:	2a01      	cmp	r2, #1
 800508a:	d91d      	bls.n	80050c8 <PDM_Filter_Init+0x88>
 800508c:	2140      	movs	r1, #64	; 0x40
 800508e:	2300      	movs	r3, #0
 8005090:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005092:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	bf04      	itt	eq
 800509a:	6421      	streq	r1, [r4, #64]	; 0x40
 800509c:	460b      	moveq	r3, r1
 800509e:	b11a      	cbz	r2, 80050a8 <PDM_Filter_Init+0x68>
 80050a0:	f043 0310 	orr.w	r3, r3, #16
 80050a4:	6423      	str	r3, [r4, #64]	; 0x40
 80050a6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80050a8:	2200      	movs	r2, #0
 80050aa:	8722      	strh	r2, [r4, #56]	; 0x38
 80050ac:	b908      	cbnz	r0, 80050b2 <PDM_Filter_Init+0x72>
 80050ae:	3380      	adds	r3, #128	; 0x80
 80050b0:	6423      	str	r3, [r4, #64]	; 0x40
 80050b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b4:	4d23      	ldr	r5, [pc, #140]	; (8005144 <PDM_Filter_Init+0x104>)
 80050b6:	d010      	beq.n	80050da <PDM_Filter_Init+0x9a>
 80050b8:	782a      	ldrb	r2, [r5, #0]
 80050ba:	2a01      	cmp	r2, #1
 80050bc:	d027      	beq.n	800510e <PDM_Filter_Init+0xce>
 80050be:	8862      	ldrh	r2, [r4, #2]
 80050c0:	2a01      	cmp	r2, #1
 80050c2:	f04f 0001 	mov.w	r0, #1
 80050c6:	d8e1      	bhi.n	800508c <PDM_Filter_Init+0x4c>
 80050c8:	d001      	beq.n	80050ce <PDM_Filter_Init+0x8e>
 80050ca:	4618      	mov	r0, r3
 80050cc:	e7de      	b.n	800508c <PDM_Filter_Init+0x4c>
 80050ce:	2220      	movs	r2, #32
 80050d0:	4618      	mov	r0, r3
 80050d2:	6422      	str	r2, [r4, #64]	; 0x40
 80050d4:	4613      	mov	r3, r2
 80050d6:	2160      	movs	r1, #96	; 0x60
 80050d8:	e7da      	b.n	8005090 <PDM_Filter_Init+0x50>
 80050da:	7829      	ldrb	r1, [r5, #0]
 80050dc:	2900      	cmp	r1, #0
 80050de:	d1ee      	bne.n	80050be <PDM_Filter_Init+0x7e>
 80050e0:	4919      	ldr	r1, [pc, #100]	; (8005148 <PDM_Filter_Init+0x108>)
 80050e2:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8005150 <PDM_Filter_Init+0x110>
 80050e6:	4f19      	ldr	r7, [pc, #100]	; (800514c <PDM_Filter_Init+0x10c>)
 80050e8:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80050ec:	684a      	ldr	r2, [r1, #4]
 80050ee:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80050f2:	ea02 0007 	and.w	r0, r2, r7
 80050f6:	4303      	orrs	r3, r0
 80050f8:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80050fc:	4413      	add	r3, r2
 80050fe:	f841 3f04 	str.w	r3, [r1, #4]!
 8005102:	428e      	cmp	r6, r1
 8005104:	d1f2      	bne.n	80050ec <PDM_Filter_Init+0xac>
 8005106:	2001      	movs	r0, #1
 8005108:	7028      	strb	r0, [r5, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	e7bb      	b.n	8005086 <PDM_Filter_Init+0x46>
 800510e:	490e      	ldr	r1, [pc, #56]	; (8005148 <PDM_Filter_Init+0x108>)
 8005110:	f8df e03c 	ldr.w	lr, [pc, #60]	; 8005150 <PDM_Filter_Init+0x110>
 8005114:	4f0d      	ldr	r7, [pc, #52]	; (800514c <PDM_Filter_Init+0x10c>)
 8005116:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800511a:	684a      	ldr	r2, [r1, #4]
 800511c:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8005120:	ea02 0007 	and.w	r0, r2, r7
 8005124:	4303      	orrs	r3, r0
 8005126:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800512a:	4413      	add	r3, r2
 800512c:	f841 3f04 	str.w	r3, [r1, #4]!
 8005130:	428e      	cmp	r6, r1
 8005132:	d1f2      	bne.n	800511a <PDM_Filter_Init+0xda>
 8005134:	2300      	movs	r3, #0
 8005136:	702b      	strb	r3, [r5, #0]
 8005138:	e7c1      	b.n	80050be <PDM_Filter_Init+0x7e>
 800513a:	bf00      	nop
 800513c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005140:	f407a5c2 	.word	0xf407a5c2
 8005144:	2000058c 	.word	0x2000058c
 8005148:	1ffffffc 	.word	0x1ffffffc
 800514c:	000ffc00 	.word	0x000ffc00
 8005150:	3ff00000 	.word	0x3ff00000

08005154 <PDM_Filter_setConfig>:
 8005154:	4b66      	ldr	r3, [pc, #408]	; (80052f0 <PDM_Filter_setConfig+0x19c>)
 8005156:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <PDM_Filter_setConfig+0xc>
 800515c:	2004      	movs	r0, #4
 800515e:	4770      	bx	lr
 8005160:	b530      	push	{r4, r5, lr}
 8005162:	880a      	ldrh	r2, [r1, #0]
 8005164:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005166:	ed2d 8b04 	vpush	{d8-d9}
 800516a:	4604      	mov	r4, r0
 800516c:	460d      	mov	r5, r1
 800516e:	1e51      	subs	r1, r2, #1
 8005170:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8005174:	2906      	cmp	r1, #6
 8005176:	b083      	sub	sp, #12
 8005178:	6420      	str	r0, [r4, #64]	; 0x40
 800517a:	d91a      	bls.n	80051b2 <PDM_Filter_setConfig+0x5e>
 800517c:	2008      	movs	r0, #8
 800517e:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8005182:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005186:	4299      	cmp	r1, r3
 8005188:	d07e      	beq.n	8005288 <PDM_Filter_setConfig+0x134>
 800518a:	f113 0f0c 	cmn.w	r3, #12
 800518e:	da2a      	bge.n	80051e6 <PDM_Filter_setConfig+0x92>
 8005190:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8005194:	3040      	adds	r0, #64	; 0x40
 8005196:	80ab      	strh	r3, [r5, #4]
 8005198:	8622      	strh	r2, [r4, #48]	; 0x30
 800519a:	886b      	ldrh	r3, [r5, #2]
 800519c:	8663      	strh	r3, [r4, #50]	; 0x32
 800519e:	b920      	cbnz	r0, 80051aa <PDM_Filter_setConfig+0x56>
 80051a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80051a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051a6:	6423      	str	r3, [r4, #64]	; 0x40
 80051a8:	2000      	movs	r0, #0
 80051aa:	b003      	add	sp, #12
 80051ac:	ecbd 8b04 	vpop	{d8-d9}
 80051b0:	bd30      	pop	{r4, r5, pc}
 80051b2:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80051b4:	4291      	cmp	r1, r2
 80051b6:	d06c      	beq.n	8005292 <PDM_Filter_setConfig+0x13e>
 80051b8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f003 0170 	and.w	r1, r3, #112	; 0x70
 80051c6:	6423      	str	r3, [r4, #64]	; 0x40
 80051c8:	2970      	cmp	r1, #112	; 0x70
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80051d2:	d066      	beq.n	80052a2 <PDM_Filter_setConfig+0x14e>
 80051d4:	2b06      	cmp	r3, #6
 80051d6:	f200 8089 	bhi.w	80052ec <PDM_Filter_setConfig+0x198>
 80051da:	e8df f003 	tbb	[pc, r3]
 80051de:	4f52      	.short	0x4f52
 80051e0:	3d43494c 	.word	0x3d43494c
 80051e4:	46          	.byte	0x46
 80051e5:	00          	.byte	0x00
 80051e6:	2b33      	cmp	r3, #51	; 0x33
 80051e8:	dc32      	bgt.n	8005250 <PDM_Filter_setConfig+0xfc>
 80051ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80051ec:	f002 020f 	and.w	r2, r2, #15
 80051f0:	3a01      	subs	r2, #1
 80051f2:	2a06      	cmp	r2, #6
 80051f4:	d872      	bhi.n	80052dc <PDM_Filter_setConfig+0x188>
 80051f6:	493f      	ldr	r1, [pc, #252]	; (80052f4 <PDM_Filter_setConfig+0x1a0>)
 80051f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80051fc:	ed92 9a00 	vldr	s18, [r2]
 8005200:	ed92 8a07 	vldr	s16, [r2, #28]
 8005204:	9001      	str	r0, [sp, #4]
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800520e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8005212:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8005216:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800521a:	f005 ffc3 	bl	800b1a4 <powf>
 800521e:	eddf 0a36 	vldr	s1, [pc, #216]	; 80052f8 <PDM_Filter_setConfig+0x1a4>
 8005222:	eef0 8a40 	vmov.f32	s17, s0
 8005226:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800522a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800522e:	f005 ffb9 	bl	800b1a4 <powf>
 8005232:	ee28 8a28 	vmul.f32	s16, s16, s17
 8005236:	ee28 0a00 	vmul.f32	s0, s16, s0
 800523a:	f005 ff8f 	bl	800b15c <roundf>
 800523e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8005242:	88ab      	ldrh	r3, [r5, #4]
 8005244:	882a      	ldrh	r2, [r5, #0]
 8005246:	9801      	ldr	r0, [sp, #4]
 8005248:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800524c:	8723      	strh	r3, [r4, #56]	; 0x38
 800524e:	e7a3      	b.n	8005198 <PDM_Filter_setConfig+0x44>
 8005250:	2333      	movs	r3, #51	; 0x33
 8005252:	3040      	adds	r0, #64	; 0x40
 8005254:	80ab      	strh	r3, [r5, #4]
 8005256:	e79f      	b.n	8005198 <PDM_Filter_setConfig+0x44>
 8005258:	4b28      	ldr	r3, [pc, #160]	; (80052fc <PDM_Filter_setConfig+0x1a8>)
 800525a:	64a3      	str	r3, [r4, #72]	; 0x48
 800525c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005260:	2000      	movs	r0, #0
 8005262:	e792      	b.n	800518a <PDM_Filter_setConfig+0x36>
 8005264:	4b26      	ldr	r3, [pc, #152]	; (8005300 <PDM_Filter_setConfig+0x1ac>)
 8005266:	64a3      	str	r3, [r4, #72]	; 0x48
 8005268:	e7f8      	b.n	800525c <PDM_Filter_setConfig+0x108>
 800526a:	4b26      	ldr	r3, [pc, #152]	; (8005304 <PDM_Filter_setConfig+0x1b0>)
 800526c:	64a3      	str	r3, [r4, #72]	; 0x48
 800526e:	e7f5      	b.n	800525c <PDM_Filter_setConfig+0x108>
 8005270:	4b25      	ldr	r3, [pc, #148]	; (8005308 <PDM_Filter_setConfig+0x1b4>)
 8005272:	64a3      	str	r3, [r4, #72]	; 0x48
 8005274:	e7f2      	b.n	800525c <PDM_Filter_setConfig+0x108>
 8005276:	4b25      	ldr	r3, [pc, #148]	; (800530c <PDM_Filter_setConfig+0x1b8>)
 8005278:	64a3      	str	r3, [r4, #72]	; 0x48
 800527a:	e7ef      	b.n	800525c <PDM_Filter_setConfig+0x108>
 800527c:	4b24      	ldr	r3, [pc, #144]	; (8005310 <PDM_Filter_setConfig+0x1bc>)
 800527e:	64a3      	str	r3, [r4, #72]	; 0x48
 8005280:	e7ec      	b.n	800525c <PDM_Filter_setConfig+0x108>
 8005282:	4b24      	ldr	r3, [pc, #144]	; (8005314 <PDM_Filter_setConfig+0x1c0>)
 8005284:	64a3      	str	r3, [r4, #72]	; 0x48
 8005286:	e7e9      	b.n	800525c <PDM_Filter_setConfig+0x108>
 8005288:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800528a:	4291      	cmp	r1, r2
 800528c:	f47f af7d 	bne.w	800518a <PDM_Filter_setConfig+0x36>
 8005290:	e783      	b.n	800519a <PDM_Filter_setConfig+0x46>
 8005292:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8005296:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800529a:	4299      	cmp	r1, r3
 800529c:	d023      	beq.n	80052e6 <PDM_Filter_setConfig+0x192>
 800529e:	2000      	movs	r0, #0
 80052a0:	e773      	b.n	800518a <PDM_Filter_setConfig+0x36>
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d822      	bhi.n	80052ec <PDM_Filter_setConfig+0x198>
 80052a6:	e8df f003 	tbb	[pc, r3]
 80052aa:	1316      	.short	0x1316
 80052ac:	070a0d10 	.word	0x070a0d10
 80052b0:	04          	.byte	0x04
 80052b1:	00          	.byte	0x00
 80052b2:	4b19      	ldr	r3, [pc, #100]	; (8005318 <PDM_Filter_setConfig+0x1c4>)
 80052b4:	64a3      	str	r3, [r4, #72]	; 0x48
 80052b6:	e7d1      	b.n	800525c <PDM_Filter_setConfig+0x108>
 80052b8:	4b18      	ldr	r3, [pc, #96]	; (800531c <PDM_Filter_setConfig+0x1c8>)
 80052ba:	64a3      	str	r3, [r4, #72]	; 0x48
 80052bc:	e7ce      	b.n	800525c <PDM_Filter_setConfig+0x108>
 80052be:	4b18      	ldr	r3, [pc, #96]	; (8005320 <PDM_Filter_setConfig+0x1cc>)
 80052c0:	64a3      	str	r3, [r4, #72]	; 0x48
 80052c2:	e7cb      	b.n	800525c <PDM_Filter_setConfig+0x108>
 80052c4:	4b17      	ldr	r3, [pc, #92]	; (8005324 <PDM_Filter_setConfig+0x1d0>)
 80052c6:	64a3      	str	r3, [r4, #72]	; 0x48
 80052c8:	e7c8      	b.n	800525c <PDM_Filter_setConfig+0x108>
 80052ca:	4b17      	ldr	r3, [pc, #92]	; (8005328 <PDM_Filter_setConfig+0x1d4>)
 80052cc:	64a3      	str	r3, [r4, #72]	; 0x48
 80052ce:	e7c5      	b.n	800525c <PDM_Filter_setConfig+0x108>
 80052d0:	4b16      	ldr	r3, [pc, #88]	; (800532c <PDM_Filter_setConfig+0x1d8>)
 80052d2:	64a3      	str	r3, [r4, #72]	; 0x48
 80052d4:	e7c2      	b.n	800525c <PDM_Filter_setConfig+0x108>
 80052d6:	4b16      	ldr	r3, [pc, #88]	; (8005330 <PDM_Filter_setConfig+0x1dc>)
 80052d8:	64a3      	str	r3, [r4, #72]	; 0x48
 80052da:	e7bf      	b.n	800525c <PDM_Filter_setConfig+0x108>
 80052dc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8005334 <PDM_Filter_setConfig+0x1e0>
 80052e0:	eeb0 9a48 	vmov.f32	s18, s16
 80052e4:	e78e      	b.n	8005204 <PDM_Filter_setConfig+0xb0>
 80052e6:	886b      	ldrh	r3, [r5, #2]
 80052e8:	8663      	strh	r3, [r4, #50]	; 0x32
 80052ea:	e759      	b.n	80051a0 <PDM_Filter_setConfig+0x4c>
 80052ec:	2000      	movs	r0, #0
 80052ee:	e746      	b.n	800517e <PDM_Filter_setConfig+0x2a>
 80052f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80052f4:	0800b960 	.word	0x0800b960
 80052f8:	42000000 	.word	0x42000000
 80052fc:	080036c1 	.word	0x080036c1
 8005300:	080035a1 	.word	0x080035a1
 8005304:	08003851 	.word	0x08003851
 8005308:	08004095 	.word	0x08004095
 800530c:	08003df5 	.word	0x08003df5
 8005310:	08003bd5 	.word	0x08003bd5
 8005314:	080039e9 	.word	0x080039e9
 8005318:	080046a1 	.word	0x080046a1
 800531c:	08004569 	.word	0x08004569
 8005320:	08004485 	.word	0x08004485
 8005324:	08004d1d 	.word	0x08004d1d
 8005328:	08004b09 	.word	0x08004b09
 800532c:	08004951 	.word	0x08004951
 8005330:	080047e5 	.word	0x080047e5
 8005334:	00000000 	.word	0x00000000

08005338 <PDM_Filter>:
 8005338:	b410      	push	{r4}
 800533a:	4b0c      	ldr	r3, [pc, #48]	; (800536c <PDM_Filter+0x34>)
 800533c:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800533e:	429c      	cmp	r4, r3
 8005340:	d003      	beq.n	800534a <PDM_Filter+0x12>
 8005342:	2004      	movs	r0, #4
 8005344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800534c:	05dc      	lsls	r4, r3, #23
 800534e:	d407      	bmi.n	8005360 <PDM_Filter+0x28>
 8005350:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005354:	bf14      	ite	ne
 8005356:	2020      	movne	r0, #32
 8005358:	2030      	moveq	r0, #48	; 0x30
 800535a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8005362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005366:	320c      	adds	r2, #12
 8005368:	4718      	bx	r3
 800536a:	bf00      	nop
 800536c:	b5e8b5cd 	.word	0xb5e8b5cd

08005370 <CRC_Lock>:
 8005370:	4a17      	ldr	r2, [pc, #92]	; (80053d0 <CRC_Lock+0x60>)
 8005372:	6813      	ldr	r3, [r2, #0]
 8005374:	b410      	push	{r4}
 8005376:	f023 0301 	bic.w	r3, r3, #1
 800537a:	4c16      	ldr	r4, [pc, #88]	; (80053d4 <CRC_Lock+0x64>)
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	b933      	cbnz	r3, 8005390 <CRC_Lock+0x20>
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <CRC_Lock+0x68>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800538e:	d00f      	beq.n	80053b0 <CRC_Lock+0x40>
 8005390:	4a12      	ldr	r2, [pc, #72]	; (80053dc <CRC_Lock+0x6c>)
 8005392:	2301      	movs	r3, #1
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	6813      	ldr	r3, [r2, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1fc      	bne.n	8005396 <CRC_Lock+0x26>
 800539c:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <CRC_Lock+0x70>)
 800539e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053a2:	6018      	str	r0, [r3, #0]
 80053a4:	6818      	ldr	r0, [r3, #0]
 80053a6:	1a08      	subs	r0, r1, r0
 80053a8:	fab0 f080 	clz	r0, r0
 80053ac:	0940      	lsrs	r0, r0, #5
 80053ae:	4770      	bx	lr
 80053b0:	4a0c      	ldr	r2, [pc, #48]	; (80053e4 <CRC_Lock+0x74>)
 80053b2:	2301      	movs	r3, #1
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	6813      	ldr	r3, [r2, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1fc      	bne.n	80053b6 <CRC_Lock+0x46>
 80053bc:	4b0a      	ldr	r3, [pc, #40]	; (80053e8 <CRC_Lock+0x78>)
 80053be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053c2:	6018      	str	r0, [r3, #0]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	1a40      	subs	r0, r0, r1
 80053c8:	fab0 f080 	clz	r0, r0
 80053cc:	0940      	lsrs	r0, r0, #5
 80053ce:	4770      	bx	lr
 80053d0:	e0002000 	.word	0xe0002000
 80053d4:	e0042000 	.word	0xe0042000
 80053d8:	5c001000 	.word	0x5c001000
 80053dc:	40023008 	.word	0x40023008
 80053e0:	40023000 	.word	0x40023000
 80053e4:	58024c08 	.word	0x58024c08
 80053e8:	58024c00 	.word	0x58024c00

080053ec <taabe431>:
 80053ec:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop

080053f4 <pv_status_to_string>:
 80053f4:	280b      	cmp	r0, #11
 80053f6:	bf9a      	itte	ls
 80053f8:	4b02      	ldrls	r3, [pc, #8]	; (8005404 <pv_status_to_string+0x10>)
 80053fa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80053fe:	2000      	movhi	r0, #0
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	0800d01c 	.word	0x0800d01c

08005408 <pv_inference_delete.part.0>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4605      	mov	r5, r0
 800540c:	6840      	ldr	r0, [r0, #4]
 800540e:	f004 fdf9 	bl	800a004 <free>
 8005412:	68ab      	ldr	r3, [r5, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	dd0e      	ble.n	8005436 <pv_inference_delete.part.0+0x2e>
 8005418:	2400      	movs	r4, #0
 800541a:	68eb      	ldr	r3, [r5, #12]
 800541c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005420:	f004 fdf0 	bl	800a004 <free>
 8005424:	692b      	ldr	r3, [r5, #16]
 8005426:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800542a:	f004 fdeb 	bl	800a004 <free>
 800542e:	68ab      	ldr	r3, [r5, #8]
 8005430:	3401      	adds	r4, #1
 8005432:	429c      	cmp	r4, r3
 8005434:	dbf1      	blt.n	800541a <pv_inference_delete.part.0+0x12>
 8005436:	68e8      	ldr	r0, [r5, #12]
 8005438:	f004 fde4 	bl	800a004 <free>
 800543c:	6928      	ldr	r0, [r5, #16]
 800543e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005442:	f004 bddf 	b.w	800a004 <free>
 8005446:	bf00      	nop

08005448 <pv_inference_delete>:
 8005448:	b108      	cbz	r0, 800544e <pv_inference_delete+0x6>
 800544a:	f7ff bfdd 	b.w	8005408 <pv_inference_delete.part.0>
 800544e:	4770      	bx	lr

08005450 <taabe762>:
 8005450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005454:	ed2d 8b02 	vpush	{d8}
 8005458:	b089      	sub	sp, #36	; 0x24
 800545a:	ed8d 0a04 	vstr	s0, [sp, #16]
 800545e:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 8005462:	9305      	str	r3, [sp, #20]
 8005464:	2800      	cmp	r0, #0
 8005466:	f000 808a 	beq.w	800557e <taabe762+0x12e>
 800546a:	2300      	movs	r3, #0
 800546c:	460e      	mov	r6, r1
 800546e:	a906      	add	r1, sp, #24
 8005470:	4617      	mov	r7, r2
 8005472:	eeb0 8a60 	vmov.f32	s16, s1
 8005476:	eef0 8a41 	vmov.f32	s17, s2
 800547a:	4605      	mov	r5, r0
 800547c:	9306      	str	r3, [sp, #24]
 800547e:	f003 fc2b 	bl	8008cd8 <taabe572>
 8005482:	4604      	mov	r4, r0
 8005484:	9806      	ldr	r0, [sp, #24]
 8005486:	f003 fc39 	bl	8008cfc <taabe246>
 800548a:	2c00      	cmp	r4, #0
 800548c:	d178      	bne.n	8005580 <taabe762+0x130>
 800548e:	2e00      	cmp	r6, #0
 8005490:	dd75      	ble.n	800557e <taabe762+0x12e>
 8005492:	2f00      	cmp	r7, #0
 8005494:	d073      	beq.n	800557e <taabe762+0x12e>
 8005496:	9b05      	ldr	r3, [sp, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dd70      	ble.n	800557e <taabe762+0x12e>
 800549c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d06d      	beq.n	800557e <taabe762+0x12e>
 80054a2:	eddd 7a04 	vldr	s15, [sp, #16]
 80054a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ae:	d466      	bmi.n	800557e <taabe762+0x12e>
 80054b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054bc:	dc5f      	bgt.n	800557e <taabe762+0x12e>
 80054be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d05c      	beq.n	800557e <taabe762+0x12e>
 80054c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	dd59      	ble.n	800557e <taabe762+0x12e>
 80054ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d056      	beq.n	800557e <taabe762+0x12e>
 80054d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80054d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d8:	d451      	bmi.n	800557e <taabe762+0x12e>
 80054da:	eeb4 8ac7 	vcmpe.f32	s16, s14
 80054de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054e2:	dc4c      	bgt.n	800557e <taabe762+0x12e>
 80054e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d049      	beq.n	800557e <taabe762+0x12e>
 80054ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d046      	beq.n	800557e <taabe762+0x12e>
 80054f0:	2300      	movs	r3, #0
 80054f2:	aa12      	add	r2, sp, #72	; 0x48
 80054f4:	9307      	str	r3, [sp, #28]
 80054f6:	ab07      	add	r3, sp, #28
 80054f8:	9200      	str	r2, [sp, #0]
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	ab05      	add	r3, sp, #20
 8005500:	4639      	mov	r1, r7
 8005502:	4630      	mov	r0, r6
 8005504:	f000 fc0e 	bl	8005d24 <pv_porcupine_get_min_memory_buffer_size>
 8005508:	4604      	mov	r4, r0
 800550a:	2800      	cmp	r0, #0
 800550c:	d138      	bne.n	8005580 <taabe762+0x130>
 800550e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005510:	2114      	movs	r1, #20
 8005512:	6018      	str	r0, [r3, #0]
 8005514:	2001      	movs	r0, #1
 8005516:	f004 fd3b 	bl	8009f90 <calloc>
 800551a:	4681      	mov	r9, r0
 800551c:	2800      	cmp	r0, #0
 800551e:	d03e      	beq.n	800559e <taabe762+0x14e>
 8005520:	ab05      	add	r3, sp, #20
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	ab12      	add	r3, sp, #72	; 0x48
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	ab04      	add	r3, sp, #16
 800552a:	9003      	str	r0, [sp, #12]
 800552c:	9302      	str	r3, [sp, #8]
 800552e:	9907      	ldr	r1, [sp, #28]
 8005530:	2301      	movs	r3, #1
 8005532:	463a      	mov	r2, r7
 8005534:	4628      	mov	r0, r5
 8005536:	f000 fba1 	bl	8005c7c <pv_porcupine_init>
 800553a:	4604      	mov	r4, r0
 800553c:	bb30      	cbnz	r0, 800558c <taabe762+0x13c>
 800553e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005540:	9907      	ldr	r1, [sp, #28]
 8005542:	f8c9 3008 	str.w	r3, [r9, #8]
 8005546:	f109 0404 	add.w	r4, r9, #4
 800554a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800554c:	f889 000c 	strb.w	r0, [r9, #12]
 8005550:	1a72      	subs	r2, r6, r1
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	9402      	str	r4, [sp, #8]
 8005556:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005558:	f8cd 8004 	str.w	r8, [sp, #4]
 800555c:	eef0 0a68 	vmov.f32	s1, s17
 8005560:	eeb0 0a48 	vmov.f32	s0, s16
 8005564:	4628      	mov	r0, r5
 8005566:	4439      	add	r1, r7
 8005568:	f001 fc52 	bl	8006e10 <pv_rhino_init>
 800556c:	4604      	mov	r4, r0
 800556e:	b968      	cbnz	r0, 800558c <taabe762+0x13c>
 8005570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005572:	f8c9 3010 	str.w	r3, [r9, #16]
 8005576:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005578:	f8c3 9000 	str.w	r9, [r3]
 800557c:	e000      	b.n	8005580 <taabe762+0x130>
 800557e:	2403      	movs	r4, #3
 8005580:	4620      	mov	r0, r4
 8005582:	b009      	add	sp, #36	; 0x24
 8005584:	ecbd 8b02 	vpop	{d8}
 8005588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800558c:	f8d9 0000 	ldr.w	r0, [r9]
 8005590:	f000 fb7c 	bl	8005c8c <pv_porcupine_delete>
 8005594:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8005598:	f001 fc9a 	bl	8006ed0 <pv_rhino_delete>
 800559c:	e7f0      	b.n	8005580 <taabe762+0x130>
 800559e:	2401      	movs	r4, #1
 80055a0:	e7ee      	b.n	8005580 <taabe762+0x130>
 80055a2:	bf00      	nop

080055a4 <pv_picovoice_init>:
 80055a4:	b410      	push	{r4}
 80055a6:	f89d 4014 	ldrb.w	r4, [sp, #20]
 80055aa:	9405      	str	r4, [sp, #20]
 80055ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055b0:	f7ff bf4e 	b.w	8005450 <taabe762>

080055b4 <pv_picovoice_process>:
 80055b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055b8:	b08b      	sub	sp, #44	; 0x2c
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d043      	beq.n	8005646 <pv_picovoice_process+0x92>
 80055be:	2900      	cmp	r1, #0
 80055c0:	d041      	beq.n	8005646 <pv_picovoice_process+0x92>
 80055c2:	7b03      	ldrb	r3, [r0, #12]
 80055c4:	4604      	mov	r4, r0
 80055c6:	b9c3      	cbnz	r3, 80055fa <pv_picovoice_process+0x46>
 80055c8:	f04f 33ff 	mov.w	r3, #4294967295
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	9309      	str	r3, [sp, #36]	; 0x24
 80055d0:	aa09      	add	r2, sp, #36	; 0x24
 80055d2:	f000 fb5f 	bl	8005c94 <pv_porcupine_process>
 80055d6:	4605      	mov	r5, r0
 80055d8:	b958      	cbnz	r0, 80055f2 <pv_picovoice_process+0x3e>
 80055da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf0c      	ite	eq
 80055e0:	2301      	moveq	r3, #1
 80055e2:	2300      	movne	r3, #0
 80055e4:	7323      	strb	r3, [r4, #12]
 80055e6:	d104      	bne.n	80055f2 <pv_picovoice_process+0x3e>
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	4798      	blx	r3
 80055ec:	6820      	ldr	r0, [r4, #0]
 80055ee:	f000 fb95 	bl	8005d1c <taabe114>
 80055f2:	4628      	mov	r0, r5
 80055f4:	b00b      	add	sp, #44	; 0x2c
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fa:	2300      	movs	r3, #0
 80055fc:	6840      	ldr	r0, [r0, #4]
 80055fe:	f88d 3016 	strb.w	r3, [sp, #22]
 8005602:	f10d 0216 	add.w	r2, sp, #22
 8005606:	f001 fc67 	bl	8006ed8 <pv_rhino_process>
 800560a:	4605      	mov	r5, r0
 800560c:	2800      	cmp	r0, #0
 800560e:	d1f0      	bne.n	80055f2 <pv_picovoice_process+0x3e>
 8005610:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d0ec      	beq.n	80055f2 <pv_picovoice_process+0x3e>
 8005618:	6860      	ldr	r0, [r4, #4]
 800561a:	7325      	strb	r5, [r4, #12]
 800561c:	f10d 0117 	add.w	r1, sp, #23
 8005620:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8005624:	e9cd 5508 	strd	r5, r5, [sp, #32]
 8005628:	f88d 5017 	strb.w	r5, [sp, #23]
 800562c:	f001 fc62 	bl	8006ef4 <pv_rhino_is_understood>
 8005630:	b9c0      	cbnz	r0, 8005664 <pv_picovoice_process+0xb0>
 8005632:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005636:	b95b      	cbnz	r3, 8005650 <pv_picovoice_process+0x9c>
 8005638:	6860      	ldr	r0, [r4, #4]
 800563a:	f001 fc8d 	bl	8006f58 <pv_rhino_reset>
 800563e:	4606      	mov	r6, r0
 8005640:	b190      	cbz	r0, 8005668 <pv_picovoice_process+0xb4>
 8005642:	4605      	mov	r5, r0
 8005644:	e7d5      	b.n	80055f2 <pv_picovoice_process+0x3e>
 8005646:	2503      	movs	r5, #3
 8005648:	4628      	mov	r0, r5
 800564a:	b00b      	add	sp, #44	; 0x2c
 800564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005650:	ab09      	add	r3, sp, #36	; 0x24
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	6860      	ldr	r0, [r4, #4]
 8005656:	ab08      	add	r3, sp, #32
 8005658:	aa07      	add	r2, sp, #28
 800565a:	a906      	add	r1, sp, #24
 800565c:	f001 fc56 	bl	8006f0c <pv_rhino_get_intent>
 8005660:	2800      	cmp	r0, #0
 8005662:	d0e9      	beq.n	8005638 <pv_picovoice_process+0x84>
 8005664:	4605      	mov	r5, r0
 8005666:	e7c4      	b.n	80055f2 <pv_picovoice_process+0x3e>
 8005668:	9b07      	ldr	r3, [sp, #28]
 800566a:	f89d a017 	ldrb.w	sl, [sp, #23]
 800566e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8005672:	9303      	str	r3, [sp, #12]
 8005674:	2114      	movs	r1, #20
 8005676:	2001      	movs	r0, #1
 8005678:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
 800567c:	f004 fc88 	bl	8009f90 <calloc>
 8005680:	4683      	mov	fp, r0
 8005682:	2800      	cmp	r0, #0
 8005684:	d065      	beq.n	8005752 <pv_picovoice_process+0x19e>
 8005686:	f880 a000 	strb.w	sl, [r0]
 800568a:	f1ba 0f00 	cmp.w	sl, #0
 800568e:	d10f      	bne.n	80056b0 <pv_picovoice_process+0xfc>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	4658      	mov	r0, fp
 8005694:	4798      	blx	r3
 8005696:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0a9      	beq.n	80055f2 <pv_picovoice_process+0x3e>
 800569e:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80056a2:	6860      	ldr	r0, [r4, #4]
 80056a4:	f001 fc4a 	bl	8006f3c <pv_rhino_free_slots_and_values>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	bf18      	it	ne
 80056ac:	4605      	movne	r5, r0
 80056ae:	e7a0      	b.n	80055f2 <pv_picovoice_process+0x3e>
 80056b0:	4648      	mov	r0, r9
 80056b2:	f7fa fd97 	bl	80001e4 <strlen>
 80056b6:	2101      	movs	r1, #1
 80056b8:	3001      	adds	r0, #1
 80056ba:	f004 fc69 	bl	8009f90 <calloc>
 80056be:	f8cb 0004 	str.w	r0, [fp, #4]
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d040      	beq.n	8005748 <pv_picovoice_process+0x194>
 80056c6:	4649      	mov	r1, r9
 80056c8:	f005 f960 	bl	800a98c <strcpy>
 80056cc:	9b03      	ldr	r3, [sp, #12]
 80056ce:	f8cb 3008 	str.w	r3, [fp, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	dddc      	ble.n	8005690 <pv_picovoice_process+0xdc>
 80056d6:	2104      	movs	r1, #4
 80056d8:	4618      	mov	r0, r3
 80056da:	f004 fc59 	bl	8009f90 <calloc>
 80056de:	4682      	mov	sl, r0
 80056e0:	f8cb 000c 	str.w	r0, [fp, #12]
 80056e4:	b380      	cbz	r0, 8005748 <pv_picovoice_process+0x194>
 80056e6:	9803      	ldr	r0, [sp, #12]
 80056e8:	2104      	movs	r1, #4
 80056ea:	f004 fc51 	bl	8009f90 <calloc>
 80056ee:	f8cb 0010 	str.w	r0, [fp, #16]
 80056f2:	b348      	cbz	r0, 8005748 <pv_picovoice_process+0x194>
 80056f4:	f1a8 0804 	sub.w	r8, r8, #4
 80056f8:	f1aa 0a04 	sub.w	sl, sl, #4
 80056fc:	3f04      	subs	r7, #4
 80056fe:	f1a0 0904 	sub.w	r9, r0, #4
 8005702:	e014      	b.n	800572e <pv_picovoice_process+0x17a>
 8005704:	f8d8 1000 	ldr.w	r1, [r8]
 8005708:	f005 f940 	bl	800a98c <strcpy>
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fa fd69 	bl	80001e4 <strlen>
 8005712:	2101      	movs	r1, #1
 8005714:	3001      	adds	r0, #1
 8005716:	f004 fc3b 	bl	8009f90 <calloc>
 800571a:	f849 0f04 	str.w	r0, [r9, #4]!
 800571e:	b198      	cbz	r0, 8005748 <pv_picovoice_process+0x194>
 8005720:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005724:	f005 f932 	bl	800a98c <strcpy>
 8005728:	9b03      	ldr	r3, [sp, #12]
 800572a:	42b3      	cmp	r3, r6
 800572c:	d0b0      	beq.n	8005690 <pv_picovoice_process+0xdc>
 800572e:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8005732:	f7fa fd57 	bl	80001e4 <strlen>
 8005736:	2101      	movs	r1, #1
 8005738:	4408      	add	r0, r1
 800573a:	f004 fc29 	bl	8009f90 <calloc>
 800573e:	3601      	adds	r6, #1
 8005740:	f84a 0f04 	str.w	r0, [sl, #4]!
 8005744:	2800      	cmp	r0, #0
 8005746:	d1dd      	bne.n	8005704 <pv_picovoice_process+0x150>
 8005748:	4658      	mov	r0, fp
 800574a:	f7ff fe5d 	bl	8005408 <pv_inference_delete.part.0>
 800574e:	2501      	movs	r5, #1
 8005750:	e74f      	b.n	80055f2 <pv_picovoice_process+0x3e>
 8005752:	2501      	movs	r5, #1
 8005754:	e74d      	b.n	80055f2 <pv_picovoice_process+0x3e>
 8005756:	bf00      	nop

08005758 <pv_picovoice_context_info>:
 8005758:	b118      	cbz	r0, 8005762 <pv_picovoice_context_info+0xa>
 800575a:	b111      	cbz	r1, 8005762 <pv_picovoice_context_info+0xa>
 800575c:	6840      	ldr	r0, [r0, #4]
 800575e:	f001 bc23 	b.w	8006fa8 <pv_rhino_context_info>
 8005762:	2003      	movs	r0, #3
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop

08005768 <pv_porcupine_delete.part.0>:
 8005768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576a:	6807      	ldr	r7, [r0, #0]
 800576c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800576e:	4604      	mov	r4, r0
 8005770:	4638      	mov	r0, r7
 8005772:	f002 ffc7 	bl	8008704 <taabe22>
 8005776:	6a20      	ldr	r0, [r4, #32]
 8005778:	f000 fc92 	bl	80060a0 <taabe394>
 800577c:	6866      	ldr	r6, [r4, #4]
 800577e:	3e01      	subs	r6, #1
 8005780:	bf58      	it	pl
 8005782:	00b5      	lslpl	r5, r6, #2
 8005784:	d417      	bmi.n	80057b6 <pv_porcupine_delete.part.0+0x4e>
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	3e01      	subs	r6, #1
 800578a:	b153      	cbz	r3, 80057a2 <pv_porcupine_delete.part.0+0x3a>
 800578c:	5959      	ldr	r1, [r3, r5]
 800578e:	4638      	mov	r0, r7
 8005790:	b121      	cbz	r1, 800579c <pv_porcupine_delete.part.0+0x34>
 8005792:	6809      	ldr	r1, [r1, #0]
 8005794:	f002 ffb6 	bl	8008704 <taabe22>
 8005798:	6923      	ldr	r3, [r4, #16]
 800579a:	5959      	ldr	r1, [r3, r5]
 800579c:	4638      	mov	r0, r7
 800579e:	f002 ffb1 	bl	8008704 <taabe22>
 80057a2:	68e3      	ldr	r3, [r4, #12]
 80057a4:	4638      	mov	r0, r7
 80057a6:	b113      	cbz	r3, 80057ae <pv_porcupine_delete.part.0+0x46>
 80057a8:	5959      	ldr	r1, [r3, r5]
 80057aa:	f002 ffab 	bl	8008704 <taabe22>
 80057ae:	1c73      	adds	r3, r6, #1
 80057b0:	f1a5 0504 	sub.w	r5, r5, #4
 80057b4:	d1e7      	bne.n	8005786 <pv_porcupine_delete.part.0+0x1e>
 80057b6:	69e1      	ldr	r1, [r4, #28]
 80057b8:	4638      	mov	r0, r7
 80057ba:	f002 ffa3 	bl	8008704 <taabe22>
 80057be:	69a1      	ldr	r1, [r4, #24]
 80057c0:	4638      	mov	r0, r7
 80057c2:	f002 ff9f 	bl	8008704 <taabe22>
 80057c6:	6961      	ldr	r1, [r4, #20]
 80057c8:	4638      	mov	r0, r7
 80057ca:	f002 ff9b 	bl	8008704 <taabe22>
 80057ce:	6921      	ldr	r1, [r4, #16]
 80057d0:	4638      	mov	r0, r7
 80057d2:	f002 ff97 	bl	8008704 <taabe22>
 80057d6:	68e1      	ldr	r1, [r4, #12]
 80057d8:	4638      	mov	r0, r7
 80057da:	f002 ff93 	bl	8008704 <taabe22>
 80057de:	68a1      	ldr	r1, [r4, #8]
 80057e0:	4638      	mov	r0, r7
 80057e2:	f002 ff8f 	bl	8008704 <taabe22>
 80057e6:	4621      	mov	r1, r4
 80057e8:	4638      	mov	r0, r7
 80057ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057ee:	f002 bf89 	b.w	8008704 <taabe22>
 80057f2:	bf00      	nop

080057f4 <taabe567>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	ed2d 8b06 	vpush	{d8-d10}
 80057fc:	b09b      	sub	sp, #108	; 0x6c
 80057fe:	4617      	mov	r7, r2
 8005800:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8005802:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005804:	4698      	mov	r8, r3
 8005806:	2300      	movs	r3, #0
 8005808:	460e      	mov	r6, r1
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	b128      	cbz	r0, 800581a <taabe567+0x26>
 800580e:	4605      	mov	r5, r0
 8005810:	f003 fa78 	bl	8008d04 <taabe695>
 8005814:	2800      	cmp	r0, #0
 8005816:	f040 81a2 	bne.w	8005b5e <taabe567+0x36a>
 800581a:	2e00      	cmp	r6, #0
 800581c:	f340 8198 	ble.w	8005b50 <taabe567+0x35c>
 8005820:	2f00      	cmp	r7, #0
 8005822:	f000 8195 	beq.w	8005b50 <taabe567+0x35c>
 8005826:	f1b8 0f00 	cmp.w	r8, #0
 800582a:	f340 8191 	ble.w	8005b50 <taabe567+0x35c>
 800582e:	2c00      	cmp	r4, #0
 8005830:	f000 818e 	beq.w	8005b50 <taabe567+0x35c>
 8005834:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005836:	f1a4 0b04 	sub.w	fp, r4, #4
 800583a:	f1a3 0a04 	sub.w	sl, r3, #4
 800583e:	4653      	mov	r3, sl
 8005840:	465a      	mov	r2, fp
 8005842:	2500      	movs	r5, #0
 8005844:	e000      	b.n	8005848 <taabe567+0x54>
 8005846:	4625      	mov	r5, r4
 8005848:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800584c:	2900      	cmp	r1, #0
 800584e:	f105 0401 	add.w	r4, r5, #1
 8005852:	f340 817d 	ble.w	8005b50 <taabe567+0x35c>
 8005856:	f853 1f04 	ldr.w	r1, [r3, #4]!
 800585a:	2900      	cmp	r1, #0
 800585c:	f000 8178 	beq.w	8005b50 <taabe567+0x35c>
 8005860:	45a0      	cmp	r8, r4
 8005862:	d1f0      	bne.n	8005846 <taabe567+0x52>
 8005864:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 8172 	beq.w	8005b50 <taabe567+0x35c>
 800586c:	930c      	str	r3, [sp, #48]	; 0x30
 800586e:	461a      	mov	r2, r3
 8005870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005874:	2300      	movs	r3, #0
 8005876:	e000      	b.n	800587a <taabe567+0x86>
 8005878:	460b      	mov	r3, r1
 800587a:	ecf2 7a01 	vldmia	r2!, {s15}
 800587e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005886:	f103 0101 	add.w	r1, r3, #1
 800588a:	f100 8174 	bmi.w	8005b76 <taabe567+0x382>
 800588e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005896:	f300 816e 	bgt.w	8005b76 <taabe567+0x382>
 800589a:	429d      	cmp	r5, r3
 800589c:	d1ec      	bne.n	8005878 <taabe567+0x84>
 800589e:	2300      	movs	r3, #0
 80058a0:	9314      	str	r3, [sp, #80]	; 0x50
 80058a2:	2280      	movs	r2, #128	; 0x80
 80058a4:	ab14      	add	r3, sp, #80	; 0x50
 80058a6:	4631      	mov	r1, r6
 80058a8:	4638      	mov	r0, r7
 80058aa:	f002 fed5 	bl	8008658 <taabe653>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2800      	cmp	r0, #0
 80058b2:	f040 814e 	bne.w	8005b52 <taabe567+0x35e>
 80058b6:	4abb      	ldr	r2, [pc, #748]	; (8005ba4 <taabe567+0x3b0>)
 80058b8:	9711      	str	r7, [sp, #68]	; 0x44
 80058ba:	6813      	ldr	r3, [r2, #0]
 80058bc:	ed9f 8aba 	vldr	s16, [pc, #744]	; 8005ba8 <taabe567+0x3b4>
 80058c0:	aa16      	add	r2, sp, #88	; 0x58
 80058c2:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
 80058c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80058c8:	0c1a      	lsrs	r2, r3, #16
 80058ca:	e9cd 4a0d 	strd	r4, sl, [sp, #52]	; 0x34
 80058ce:	e9cd b60f 	strd	fp, r6, [sp, #60]	; 0x3c
 80058d2:	465f      	mov	r7, fp
 80058d4:	4656      	mov	r6, sl
 80058d6:	464c      	mov	r4, r9
 80058d8:	4680      	mov	r8, r0
 80058da:	469a      	mov	sl, r3
 80058dc:	4693      	mov	fp, r2
 80058de:	4681      	mov	r9, r0
 80058e0:	e000      	b.n	80058e4 <taabe567+0xf0>
 80058e2:	4690      	mov	r8, r2
 80058e4:	f10d 034b 	add.w	r3, sp, #75	; 0x4b
 80058e8:	f8a4 a000 	strh.w	sl, [r4]
 80058ec:	9308      	str	r3, [sp, #32]
 80058ee:	f10d 034a 	add.w	r3, sp, #74	; 0x4a
 80058f2:	9307      	str	r3, [sp, #28]
 80058f4:	f10d 0349 	add.w	r3, sp, #73	; 0x49
 80058f8:	9306      	str	r3, [sp, #24]
 80058fa:	ab19      	add	r3, sp, #100	; 0x64
 80058fc:	9305      	str	r3, [sp, #20]
 80058fe:	ab18      	add	r3, sp, #96	; 0x60
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	ab17      	add	r3, sp, #92	; 0x5c
 8005904:	9303      	str	r3, [sp, #12]
 8005906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005908:	9302      	str	r3, [sp, #8]
 800590a:	ac13      	add	r4, sp, #76	; 0x4c
 800590c:	ab15      	add	r3, sp, #84	; 0x54
 800590e:	9301      	str	r3, [sp, #4]
 8005910:	9400      	str	r4, [sp, #0]
 8005912:	2300      	movs	r3, #0
 8005914:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8005918:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800591c:	9317      	str	r3, [sp, #92]	; 0x5c
 800591e:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
 8005922:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
 8005926:	f04f 0c01 	mov.w	ip, #1
 800592a:	4ba0      	ldr	r3, [pc, #640]	; (8005bac <taabe567+0x3b8>)
 800592c:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005930:	9814      	ldr	r0, [sp, #80]	; 0x50
 8005932:	f88d b04e 	strb.w	fp, [sp, #78]	; 0x4e
 8005936:	ed8d 8a18 	vstr	s16, [sp, #96]	; 0x60
 800593a:	ed8d 8a19 	vstr	s16, [sp, #100]	; 0x64
 800593e:	f88d c04a 	strb.w	ip, [sp, #74]	; 0x4a
 8005942:	f000 fcf3 	bl	800632c <taabe85>
 8005946:	f108 0201 	add.w	r2, r8, #1
 800594a:	2800      	cmp	r0, #0
 800594c:	f040 811d 	bne.w	8005b8a <taabe567+0x396>
 8005950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005952:	4545      	cmp	r5, r8
 8005954:	4499      	add	r9, r3
 8005956:	dcc4      	bgt.n	80058e2 <taabe567+0xee>
 8005958:	464a      	mov	r2, r9
 800595a:	46a1      	mov	r9, r4
 800595c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800595e:	9017      	str	r0, [sp, #92]	; 0x5c
 8005960:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005964:	4613      	mov	r3, r2
 8005966:	4423      	add	r3, r4
 8005968:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800596c:	3259      	adds	r2, #89	; 0x59
 800596e:	ab17      	add	r3, sp, #92	; 0x5c
 8005970:	4631      	mov	r1, r6
 8005972:	4638      	mov	r0, r7
 8005974:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
 8005978:	f002 fe6e 	bl	8008658 <taabe653>
 800597c:	4603      	mov	r3, r0
 800597e:	2800      	cmp	r0, #0
 8005980:	f040 80e7 	bne.w	8005b52 <taabe567+0x35e>
 8005984:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005986:	930d      	str	r3, [sp, #52]	; 0x34
 8005988:	2201      	movs	r2, #1
 800598a:	2128      	movs	r1, #40	; 0x28
 800598c:	f002 fe86 	bl	800869c <taabe284>
 8005990:	4606      	mov	r6, r0
 8005992:	2800      	cmp	r0, #0
 8005994:	f000 8103 	beq.w	8005b9e <taabe567+0x3aa>
 8005998:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800599a:	00a1      	lsls	r1, r4, #2
 800599c:	e9c6 0400 	strd	r0, r4, [r6]
 80059a0:	2201      	movs	r2, #1
 80059a2:	910e      	str	r1, [sp, #56]	; 0x38
 80059a4:	f002 fe7a 	bl	800869c <taabe284>
 80059a8:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 80059ac:	60b0      	str	r0, [r6, #8]
 80059ae:	2800      	cmp	r0, #0
 80059b0:	f000 80ed 	beq.w	8005b8e <taabe567+0x39a>
 80059b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80059b6:	930e      	str	r3, [sp, #56]	; 0x38
 80059b8:	2201      	movs	r2, #1
 80059ba:	910d      	str	r1, [sp, #52]	; 0x34
 80059bc:	f002 fe6e 	bl	800869c <taabe284>
 80059c0:	e9dd 130d 	ldrd	r1, r3, [sp, #52]	; 0x34
 80059c4:	60f0      	str	r0, [r6, #12]
 80059c6:	2800      	cmp	r0, #0
 80059c8:	f000 80e1 	beq.w	8005b8e <taabe567+0x39a>
 80059cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80059ce:	930d      	str	r3, [sp, #52]	; 0x34
 80059d0:	2201      	movs	r2, #1
 80059d2:	f002 fe63 	bl	800869c <taabe284>
 80059d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059d8:	6130      	str	r0, [r6, #16]
 80059da:	2800      	cmp	r0, #0
 80059dc:	f000 80d7 	beq.w	8005b8e <taabe567+0x39a>
 80059e0:	461a      	mov	r2, r3
 80059e2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80059e4:	930d      	str	r3, [sp, #52]	; 0x34
 80059e6:	4621      	mov	r1, r4
 80059e8:	f002 fe58 	bl	800869c <taabe284>
 80059ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059ee:	6170      	str	r0, [r6, #20]
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f000 80cc 	beq.w	8005b8e <taabe567+0x39a>
 80059f6:	0061      	lsls	r1, r4, #1
 80059f8:	461a      	mov	r2, r3
 80059fa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80059fc:	930d      	str	r3, [sp, #52]	; 0x34
 80059fe:	ee0a 1a10 	vmov	s20, r1
 8005a02:	f002 fe4b 	bl	800869c <taabe284>
 8005a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a08:	61b0      	str	r0, [r6, #24]
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f000 80bf 	beq.w	8005b8e <taabe567+0x39a>
 8005a10:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005a12:	461a      	mov	r2, r3
 8005a14:	4621      	mov	r1, r4
 8005a16:	f002 fe41 	bl	800869c <taabe284>
 8005a1a:	61f0      	str	r0, [r6, #28]
 8005a1c:	2800      	cmp	r0, #0
 8005a1e:	f000 80b6 	beq.w	8005b8e <taabe567+0x39a>
 8005a22:	2300      	movs	r3, #0
 8005a24:	217f      	movs	r1, #127	; 0x7f
 8005a26:	e001      	b.n	8005a2c <taabe567+0x238>
 8005a28:	69f0      	ldr	r0, [r6, #28]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	429d      	cmp	r5, r3
 8005a2e:	54c1      	strb	r1, [r0, r3]
 8005a30:	f103 0201 	add.w	r2, r3, #1
 8005a34:	dcf8      	bgt.n	8005a28 <taabe567+0x234>
 8005a36:	4b5b      	ldr	r3, [pc, #364]	; (8005ba4 <taabe567+0x3b0>)
 8005a38:	eddf 8a5d 	vldr	s17, [pc, #372]	; 8005bb0 <taabe567+0x3bc>
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8005bb4 <taabe567+0x3c0>
 8005a42:	ed9f 9a5d 	vldr	s18, [pc, #372]	; 8005bb8 <taabe567+0x3c4>
 8005a46:	eddf 9a58 	vldr	s19, [pc, #352]	; 8005ba8 <taabe567+0x3b4>
 8005a4a:	930d      	str	r3, [sp, #52]	; 0x34
 8005a4c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8005a50:	e9cd 940e 	strd	r9, r4, [sp, #56]	; 0x38
 8005a54:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8005a58:	e9dd 490b 	ldrd	r4, r9, [sp, #44]	; 0x2c
 8005a5c:	f88d 8056 	strb.w	r8, [sp, #86]	; 0x56
 8005a60:	2700      	movs	r7, #0
 8005a62:	e028      	b.n	8005ab6 <taabe567+0x2c2>
 8005a64:	a815      	add	r0, sp, #84	; 0x54
 8005a66:	f002 fdd9 	bl	800861c <taabe267>
 8005a6a:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 8005a6e:	ed9d 7a18 	vldr	s14, [sp, #96]	; 0x60
 8005a72:	ecf9 6a01 	vldmia	r9!, {s13}
 8005a76:	69b1      	ldr	r1, [r6, #24]
 8005a78:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005a7c:	007a      	lsls	r2, r7, #1
 8005a7e:	eee7 7a66 	vfms.f32	s15, s14, s13
 8005a82:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005a86:	eef4 7ac8 	vcmpe.f32	s15, s16
 8005a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8e:	f280 8083 	bge.w	8005b98 <taabe567+0x3a4>
 8005a92:	eef4 7ac9 	vcmpe.f32	s15, s18
 8005a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9a:	f240 80d5 	bls.w	8005c48 <taabe567+0x454>
 8005a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aa2:	ee17 3a90 	vmov	r3, s15
 8005aa6:	b21b      	sxth	r3, r3
 8005aa8:	42bd      	cmp	r5, r7
 8005aaa:	528b      	strh	r3, [r1, r2]
 8005aac:	f107 0301 	add.w	r3, r7, #1
 8005ab0:	f340 808a 	ble.w	8005bc8 <taabe567+0x3d4>
 8005ab4:	461f      	mov	r7, r3
 8005ab6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ab8:	8023      	strh	r3, [r4, #0]
 8005aba:	ab14      	add	r3, sp, #80	; 0x50
 8005abc:	9308      	str	r3, [sp, #32]
 8005abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac0:	9307      	str	r3, [sp, #28]
 8005ac2:	f88d 805a 	strb.w	r8, [sp, #90]	; 0x5a
 8005ac6:	6973      	ldr	r3, [r6, #20]
 8005ac8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005aca:	edcd 9a18 	vstr	s19, [sp, #96]	; 0x60
 8005ace:	443b      	add	r3, r7
 8005ad0:	9306      	str	r3, [sp, #24]
 8005ad2:	aa19      	add	r2, sp, #100	; 0x64
 8005ad4:	ab18      	add	r3, sp, #96	; 0x60
 8005ad6:	9205      	str	r2, [sp, #20]
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	6933      	ldr	r3, [r6, #16]
 8005adc:	edcd 9a19 	vstr	s19, [sp, #100]	; 0x64
 8005ae0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8005ae4:	9303      	str	r3, [sp, #12]
 8005ae6:	68f3      	ldr	r3, [r6, #12]
 8005ae8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8005aec:	9302      	str	r3, [sp, #8]
 8005aee:	68b3      	ldr	r3, [r6, #8]
 8005af0:	ac16      	add	r4, sp, #88	; 0x58
 8005af2:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	9400      	str	r4, [sp, #0]
 8005afa:	f04f 0c01 	mov.w	ip, #1
 8005afe:	f88d c04c 	strb.w	ip, [sp, #76]	; 0x4c
 8005b02:	4b2a      	ldr	r3, [pc, #168]	; (8005bac <taabe567+0x3b8>)
 8005b04:	f85a 2f04 	ldr.w	r2, [sl, #4]!
 8005b08:	f85b 1f04 	ldr.w	r1, [fp, #4]!
 8005b0c:	f04f 0c00 	mov.w	ip, #0
 8005b10:	f88d c050 	strb.w	ip, [sp, #80]	; 0x50
 8005b14:	f000 fc0a 	bl	800632c <taabe85>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	f040 8086 	bne.w	8005c2a <taabe567+0x436>
 8005b1e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d179      	bne.n	8005c1a <taabe567+0x426>
 8005b26:	491f      	ldr	r1, [pc, #124]	; (8005ba4 <taabe567+0x3b0>)
 8005b28:	a815      	add	r0, sp, #84	; 0x54
 8005b2a:	f002 fd7f 	bl	800862c <taabe681>
 8005b2e:	4621      	mov	r1, r4
 8005b30:	2800      	cmp	r0, #0
 8005b32:	d197      	bne.n	8005a64 <taabe567+0x270>
 8005b34:	a815      	add	r0, sp, #84	; 0x54
 8005b36:	f002 fd79 	bl	800862c <taabe681>
 8005b3a:	2800      	cmp	r0, #0
 8005b3c:	d195      	bne.n	8005a6a <taabe567+0x276>
 8005b3e:	463b      	mov	r3, r7
 8005b40:	481e      	ldr	r0, [pc, #120]	; (8005bbc <taabe567+0x3c8>)
 8005b42:	9400      	str	r4, [sp, #0]
 8005b44:	aa15      	add	r2, sp, #84	; 0x54
 8005b46:	1e79      	subs	r1, r7, #1
 8005b48:	f003 f8f6 	bl	8008d38 <taabe250>
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e000      	b.n	8005b52 <taabe567+0x35e>
 8005b50:	2303      	movs	r3, #3
 8005b52:	4618      	mov	r0, r3
 8005b54:	b01b      	add	sp, #108	; 0x6c
 8005b56:	ecbd 8b06 	vpop	{d8-d10}
 8005b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5e:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b60:	4629      	mov	r1, r5
 8005b62:	4817      	ldr	r0, [pc, #92]	; (8005bc0 <taabe567+0x3cc>)
 8005b64:	f003 f8e8 	bl	8008d38 <taabe250>
 8005b68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	b01b      	add	sp, #108	; 0x6c
 8005b6e:	ecbd 8b06 	vpop	{d8-d10}
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	4813      	ldr	r0, [pc, #76]	; (8005bc4 <taabe567+0x3d0>)
 8005b78:	f003 f8de 	bl	8008d38 <taabe250>
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	4618      	mov	r0, r3
 8005b80:	b01b      	add	sp, #108	; 0x6c
 8005b82:	ecbd 8b06 	vpop	{d8-d10}
 8005b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	e7e1      	b.n	8005b52 <taabe567+0x35e>
 8005b8e:	4630      	mov	r0, r6
 8005b90:	f7ff fdea 	bl	8005768 <pv_porcupine_delete.part.0>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e7dc      	b.n	8005b52 <taabe567+0x35e>
 8005b98:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005b9c:	e784      	b.n	8005aa8 <taabe567+0x2b4>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e7d7      	b.n	8005b52 <taabe567+0x35e>
 8005ba2:	bf00      	nop
 8005ba4:	0800d100 	.word	0x0800d100
 8005ba8:	00000000 	.word	0x00000000
 8005bac:	20000428 	.word	0x20000428
 8005bb0:	44800000 	.word	0x44800000
 8005bb4:	46fffe00 	.word	0x46fffe00
 8005bb8:	c7000000 	.word	0xc7000000
 8005bbc:	0800d104 	.word	0x0800d104
 8005bc0:	0800d04c 	.word	0x0800d04c
 8005bc4:	0800d078 	.word	0x0800d078
 8005bc8:	f106 0320 	add.w	r3, r6, #32
 8005bcc:	9302      	str	r3, [sp, #8]
 8005bce:	6973      	ldr	r3, [r6, #20]
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	6933      	ldr	r3, [r6, #16]
 8005bd4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8005bdc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005bde:	4621      	mov	r1, r4
 8005be0:	f000 f95a 	bl	8005e98 <taabe24>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d131      	bne.n	8005c4c <taabe567+0x458>
 8005be8:	900c      	str	r0, [sp, #48]	; 0x30
 8005bea:	6a30      	ldr	r0, [r6, #32]
 8005bec:	f000 fb9c 	bl	8006328 <taabe559>
 8005bf0:	a915      	add	r1, sp, #84	; 0x54
 8005bf2:	900b      	str	r0, [sp, #44]	; 0x2c
 8005bf4:	f002 fd28 	bl	8008648 <taabe525>
 8005bf8:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 8005bfc:	b360      	cbz	r0, 8005c58 <taabe567+0x464>
 8005bfe:	ee1a 1a10 	vmov	r1, s20
 8005c02:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005c04:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c06:	2201      	movs	r2, #1
 8005c08:	f002 fd48 	bl	800869c <taabe284>
 8005c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0e:	6270      	str	r0, [r6, #36]	; 0x24
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d0bc      	beq.n	8005b8e <taabe567+0x39a>
 8005c14:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8005c16:	6016      	str	r6, [r2, #0]
 8005c18:	e79b      	b.n	8005b52 <taabe567+0x35e>
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f7ff fda4 	bl	8005768 <pv_porcupine_delete.part.0>
 8005c20:	4812      	ldr	r0, [pc, #72]	; (8005c6c <taabe567+0x478>)
 8005c22:	f003 f889 	bl	8008d38 <taabe250>
 8005c26:	2303      	movs	r3, #3
 8005c28:	e793      	b.n	8005b52 <taabe567+0x35e>
 8005c2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f7ff fd9b 	bl	8005768 <pv_porcupine_delete.part.0>
 8005c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff fbdd 	bl	80053f4 <pv_status_to_string>
 8005c3a:	4639      	mov	r1, r7
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	480c      	ldr	r0, [pc, #48]	; (8005c70 <taabe567+0x47c>)
 8005c40:	f003 f87a 	bl	8008d38 <taabe250>
 8005c44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c46:	e784      	b.n	8005b52 <taabe567+0x35e>
 8005c48:	4b0a      	ldr	r3, [pc, #40]	; (8005c74 <taabe567+0x480>)
 8005c4a:	e72d      	b.n	8005aa8 <taabe567+0x2b4>
 8005c4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f7ff fd8a 	bl	8005768 <pv_porcupine_delete.part.0>
 8005c54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c56:	e77c      	b.n	8005b52 <taabe567+0x35e>
 8005c58:	4807      	ldr	r0, [pc, #28]	; (8005c78 <taabe567+0x484>)
 8005c5a:	a915      	add	r1, sp, #84	; 0x54
 8005c5c:	f003 f86c 	bl	8008d38 <taabe250>
 8005c60:	4630      	mov	r0, r6
 8005c62:	f7ff fd81 	bl	8005768 <pv_porcupine_delete.part.0>
 8005c66:	2303      	movs	r3, #3
 8005c68:	e773      	b.n	8005b52 <taabe567+0x35e>
 8005c6a:	bf00      	nop
 8005c6c:	0800d0dc 	.word	0x0800d0dc
 8005c70:	0800d0a8 	.word	0x0800d0a8
 8005c74:	ffff8000 	.word	0xffff8000
 8005c78:	0800d184 	.word	0x0800d184

08005c7c <pv_porcupine_init>:
 8005c7c:	b4f0      	push	{r4, r5, r6, r7}
 8005c7e:	b110      	cbz	r0, 8005c86 <pv_porcupine_init+0xa>
 8005c80:	bcf0      	pop	{r4, r5, r6, r7}
 8005c82:	f7ff bdb7 	b.w	80057f4 <taabe567>
 8005c86:	2003      	movs	r0, #3
 8005c88:	bcf0      	pop	{r4, r5, r6, r7}
 8005c8a:	4770      	bx	lr

08005c8c <pv_porcupine_delete>:
 8005c8c:	b108      	cbz	r0, 8005c92 <pv_porcupine_delete+0x6>
 8005c8e:	f7ff bd6b 	b.w	8005768 <pv_porcupine_delete.part.0>
 8005c92:	4770      	bx	lr

08005c94 <pv_porcupine_process>:
 8005c94:	2800      	cmp	r0, #0
 8005c96:	d03a      	beq.n	8005d0e <pv_porcupine_process+0x7a>
 8005c98:	b3c9      	cbz	r1, 8005d0e <pv_porcupine_process+0x7a>
 8005c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9e:	4615      	mov	r5, r2
 8005ca0:	b3ba      	cbz	r2, 8005d12 <pv_porcupine_process+0x7e>
 8005ca2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005ca4:	6846      	ldr	r6, [r0, #4]
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	4622      	mov	r2, r4
 8005caa:	6a00      	ldr	r0, [r0, #32]
 8005cac:	f000 fa36 	bl	800611c <taabe173>
 8005cb0:	bb58      	cbnz	r0, 8005d0a <pv_porcupine_process+0x76>
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	e9d7 e306 	ldrd	lr, r3, [r7, #24]
 8005cbc:	602a      	str	r2, [r5, #0]
 8005cbe:	dd24      	ble.n	8005d0a <pv_porcupine_process+0x76>
 8005cc0:	eb03 0c02 	add.w	ip, r3, r2
 8005cc4:	4f14      	ldr	r7, [pc, #80]	; (8005d18 <pv_porcupine_process+0x84>)
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	4603      	mov	r3, r0
 8005cca:	4680      	mov	r8, r0
 8005ccc:	e007      	b.n	8005cde <pv_porcupine_process+0x4a>
 8005cce:	3401      	adds	r4, #1
 8005cd0:	f88c 4000 	strb.w	r4, [ip]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	429e      	cmp	r6, r3
 8005cd8:	f101 0102 	add.w	r1, r1, #2
 8005cdc:	d015      	beq.n	8005d0a <pv_porcupine_process+0x76>
 8005cde:	f91c 4f01 	ldrsb.w	r4, [ip, #1]!
 8005ce2:	2c0f      	cmp	r4, #15
 8005ce4:	ddf3      	ble.n	8005cce <pv_porcupine_process+0x3a>
 8005ce6:	f9b1 2000 	ldrsh.w	r2, [r1]
 8005cea:	f93e 4013 	ldrsh.w	r4, [lr, r3, lsl #1]
 8005cee:	4294      	cmp	r4, r2
 8005cf0:	dcf0      	bgt.n	8005cd4 <pv_porcupine_process+0x40>
 8005cf2:	42ba      	cmp	r2, r7
 8005cf4:	dbee      	blt.n	8005cd4 <pv_porcupine_process+0x40>
 8005cf6:	602b      	str	r3, [r5, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f88c 8000 	strb.w	r8, [ip]
 8005cfe:	429e      	cmp	r6, r3
 8005d00:	f9b1 7000 	ldrsh.w	r7, [r1]
 8005d04:	f101 0102 	add.w	r1, r1, #2
 8005d08:	d1e9      	bne.n	8005cde <pv_porcupine_process+0x4a>
 8005d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d0e:	2003      	movs	r0, #3
 8005d10:	4770      	bx	lr
 8005d12:	2003      	movs	r0, #3
 8005d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d18:	ffff8000 	.word	0xffff8000

08005d1c <taabe114>:
 8005d1c:	6a00      	ldr	r0, [r0, #32]
 8005d1e:	f000 b9c3 	b.w	80060a8 <taabe787>
 8005d22:	bf00      	nop

08005d24 <pv_porcupine_get_min_memory_buffer_size>:
 8005d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af04      	add	r7, sp, #16
 8005d2e:	dd5a      	ble.n	8005de6 <pv_porcupine_get_min_memory_buffer_size+0xc2>
 8005d30:	4688      	mov	r8, r1
 8005d32:	2900      	cmp	r1, #0
 8005d34:	d057      	beq.n	8005de6 <pv_porcupine_get_min_memory_buffer_size+0xc2>
 8005d36:	2a00      	cmp	r2, #0
 8005d38:	4616      	mov	r6, r2
 8005d3a:	dd54      	ble.n	8005de6 <pv_porcupine_get_min_memory_buffer_size+0xc2>
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d052      	beq.n	8005de6 <pv_porcupine_get_min_memory_buffer_size+0xc2>
 8005d40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d42:	f1a3 0e04 	sub.w	lr, r3, #4
 8005d46:	1f14      	subs	r4, r2, #4
 8005d48:	f04f 0c00 	mov.w	ip, #0
 8005d4c:	f85e 5f04 	ldr.w	r5, [lr, #4]!
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	f10c 0c01 	add.w	ip, ip, #1
 8005d56:	dd46      	ble.n	8005de6 <pv_porcupine_get_min_memory_buffer_size+0xc2>
 8005d58:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8005d5c:	2d00      	cmp	r5, #0
 8005d5e:	d042      	beq.n	8005de6 <pv_porcupine_get_min_memory_buffer_size+0xc2>
 8005d60:	4566      	cmp	r6, ip
 8005d62:	d1f3      	bne.n	8005d4c <pv_porcupine_get_min_memory_buffer_size+0x28>
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d03c      	beq.n	8005de6 <pv_porcupine_get_min_memory_buffer_size+0xc2>
 8005d6c:	00b2      	lsls	r2, r6, #2
 8005d6e:	1dd1      	adds	r1, r2, #7
 8005d70:	f021 0107 	bic.w	r1, r1, #7
 8005d74:	46e9      	mov	r9, sp
 8005d76:	ebad 0d01 	sub.w	sp, sp, r1
 8005d7a:	2500      	movs	r5, #0
 8005d7c:	f5a0 6480 	sub.w	r4, r0, #1024	; 0x400
 8005d80:	f10d 0b10 	add.w	fp, sp, #16
 8005d84:	4629      	mov	r1, r5
 8005d86:	eb08 0a04 	add.w	sl, r8, r4
 8005d8a:	4658      	mov	r0, fp
 8005d8c:	60bd      	str	r5, [r7, #8]
 8005d8e:	f004 f969 	bl	800a064 <memset>
 8005d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d96:	4629      	mov	r1, r5
 8005d98:	4650      	mov	r0, sl
 8005d9a:	f004 f963 	bl	800a064 <memset>
 8005d9e:	f8cd b008 	str.w	fp, [sp, #8]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	4621      	mov	r1, r4
 8005dac:	f107 0408 	add.w	r4, r7, #8
 8005db0:	9403      	str	r4, [sp, #12]
 8005db2:	4633      	mov	r3, r6
 8005db4:	4642      	mov	r2, r8
 8005db6:	4628      	mov	r0, r5
 8005db8:	f7ff fd1c 	bl	80057f4 <taabe567>
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	b960      	cbnz	r0, 8005dda <pv_porcupine_get_min_memory_buffer_size+0xb6>
 8005dc0:	68b8      	ldr	r0, [r7, #8]
 8005dc2:	60fc      	str	r4, [r7, #12]
 8005dc4:	f107 020c 	add.w	r2, r7, #12
 8005dc8:	4651      	mov	r1, sl
 8005dca:	f7ff ff63 	bl	8005c94 <pv_porcupine_process>
 8005dce:	4604      	mov	r4, r0
 8005dd0:	b178      	cbz	r0, 8005df2 <pv_porcupine_get_min_memory_buffer_size+0xce>
 8005dd2:	68b8      	ldr	r0, [r7, #8]
 8005dd4:	b108      	cbz	r0, 8005dda <pv_porcupine_get_min_memory_buffer_size+0xb6>
 8005dd6:	f7ff fcc7 	bl	8005768 <pv_porcupine_delete.part.0>
 8005dda:	4620      	mov	r0, r4
 8005ddc:	46cd      	mov	sp, r9
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de6:	2403      	movs	r4, #3
 8005de8:	4620      	mov	r0, r4
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	f002 fc9d 	bl	8008734 <taabe590>
 8005dfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	6010      	str	r0, [r2, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d0ea      	beq.n	8005dda <pv_porcupine_get_min_memory_buffer_size+0xb6>
 8005e04:	4618      	mov	r0, r3
 8005e06:	e7e6      	b.n	8005dd6 <pv_porcupine_get_min_memory_buffer_size+0xb2>

08005e08 <taabe394.part.0>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005e0e:	6800      	ldr	r0, [r0, #0]
 8005e10:	f002 fc78 	bl	8008704 <taabe22>
 8005e14:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005e16:	b171      	cbz	r1, 8005e36 <taabe394.part.0+0x2e>
 8005e18:	696c      	ldr	r4, [r5, #20]
 8005e1a:	3c01      	subs	r4, #1
 8005e1c:	d408      	bmi.n	8005e30 <taabe394.part.0+0x28>
 8005e1e:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 8005e22:	6828      	ldr	r0, [r5, #0]
 8005e24:	3c01      	subs	r4, #1
 8005e26:	f002 fc6d 	bl	8008704 <taabe22>
 8005e2a:	1c62      	adds	r2, r4, #1
 8005e2c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005e2e:	d1f6      	bne.n	8005e1e <taabe394.part.0+0x16>
 8005e30:	6828      	ldr	r0, [r5, #0]
 8005e32:	f002 fc67 	bl	8008704 <taabe22>
 8005e36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e38:	b313      	cbz	r3, 8005e80 <taabe394.part.0+0x78>
 8005e3a:	696e      	ldr	r6, [r5, #20]
 8005e3c:	3e01      	subs	r6, #1
 8005e3e:	d502      	bpl.n	8005e46 <taabe394.part.0+0x3e>
 8005e40:	e01a      	b.n	8005e78 <taabe394.part.0+0x70>
 8005e42:	3e01      	subs	r6, #1
 8005e44:	d318      	bcc.n	8005e78 <taabe394.part.0+0x70>
 8005e46:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005e4a:	00b7      	lsls	r7, r6, #2
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	d0f8      	beq.n	8005e42 <taabe394.part.0+0x3a>
 8005e50:	69ab      	ldr	r3, [r5, #24]
 8005e52:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8005e56:	3c01      	subs	r4, #1
 8005e58:	d408      	bmi.n	8005e6c <taabe394.part.0+0x64>
 8005e5a:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 8005e5e:	f003 fdfd 	bl	8009a5c <taabe738>
 8005e62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e64:	3c01      	subs	r4, #1
 8005e66:	59d9      	ldr	r1, [r3, r7]
 8005e68:	1c63      	adds	r3, r4, #1
 8005e6a:	d1f6      	bne.n	8005e5a <taabe394.part.0+0x52>
 8005e6c:	6828      	ldr	r0, [r5, #0]
 8005e6e:	f002 fc49 	bl	8008704 <taabe22>
 8005e72:	3e01      	subs	r6, #1
 8005e74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e76:	d2e6      	bcs.n	8005e46 <taabe394.part.0+0x3e>
 8005e78:	6828      	ldr	r0, [r5, #0]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	f002 fc42 	bl	8008704 <taabe22>
 8005e80:	68e8      	ldr	r0, [r5, #12]
 8005e82:	f003 f9e1 	bl	8009248 <taabe422>
 8005e86:	6868      	ldr	r0, [r5, #4]
 8005e88:	f002 fc84 	bl	8008794 <taabe4>
 8005e8c:	6828      	ldr	r0, [r5, #0]
 8005e8e:	4629      	mov	r1, r5
 8005e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e94:	f002 bc36 	b.w	8008704 <taabe22>

08005e98 <taabe24>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	ed2d 8b02 	vpush	{d8}
 8005ea0:	b085      	sub	sp, #20
 8005ea2:	4615      	mov	r5, r2
 8005ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ea6:	4698      	mov	r8, r3
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	468b      	mov	fp, r1
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	2140      	movs	r1, #64	; 0x40
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	4607      	mov	r7, r0
 8005eb4:	f002 fbf2 	bl	800869c <taabe284>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d078      	beq.n	8005fae <taabe24+0x116>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ec2:	f842 7b04 	str.w	r7, [r2], #4
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	4638      	mov	r0, r7
 8005eca:	f002 fc35 	bl	8008738 <taabe734>
 8005ece:	4601      	mov	r1, r0
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	d161      	bne.n	8005f98 <taabe24+0x100>
 8005ed4:	496f      	ldr	r1, [pc, #444]	; (8006094 <taabe24+0x1fc>)
 8005ed6:	4870      	ldr	r0, [pc, #448]	; (8006098 <taabe24+0x200>)
 8005ed8:	60b1      	str	r1, [r6, #8]
 8005eda:	63f0      	str	r0, [r6, #60]	; 0x3c
 8005edc:	3110      	adds	r1, #16
 8005ede:	f002 fbb3 	bl	8008648 <taabe525>
 8005ee2:	68b1      	ldr	r1, [r6, #8]
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d07d      	beq.n	8005fe4 <taabe24+0x14c>
 8005ee8:	f106 020c 	add.w	r2, r6, #12
 8005eec:	4638      	mov	r0, r7
 8005eee:	f003 f953 	bl	8009198 <taabe194>
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d16b      	bne.n	8005fd0 <taabe24+0x138>
 8005ef8:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8005efa:	f002 fba1 	bl	8008640 <taabe248>
 8005efe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f00:	61f3      	str	r3, [r6, #28]
 8005f02:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8005f06:	e9c6 b505 	strd	fp, r5, [r6, #20]
 8005f0a:	6130      	str	r0, [r6, #16]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4638      	mov	r0, r7
 8005f12:	ee08 3a10 	vmov	s16, r3
 8005f16:	f002 fbc1 	bl	800869c <taabe284>
 8005f1a:	4605      	mov	r5, r0
 8005f1c:	6270      	str	r0, [r6, #36]	; 0x24
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	f000 8094 	beq.w	800604c <taabe24+0x1b4>
 8005f24:	f1bb 0f00 	cmp.w	fp, #0
 8005f28:	f340 8095 	ble.w	8006056 <taabe24+0x1be>
 8005f2c:	69b2      	ldr	r2, [r6, #24]
 8005f2e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8005f32:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8005f36:	4638      	mov	r0, r7
 8005f38:	0089      	lsls	r1, r1, #2
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f002 fbae 	bl	800869c <taabe284>
 8005f40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f42:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 8005f46:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005f4a:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d07c      	beq.n	800604c <taabe24+0x1b4>
 8005f52:	69b2      	ldr	r2, [r6, #24]
 8005f54:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	bfc8      	it	gt
 8005f5c:	2500      	movgt	r5, #0
 8005f5e:	dc08      	bgt.n	8005f72 <taabe24+0xda>
 8005f60:	e02c      	b.n	8005fbc <taabe24+0x124>
 8005f62:	69b2      	ldr	r2, [r6, #24]
 8005f64:	f852 3009 	ldr.w	r3, [r2, r9]
 8005f68:	42ab      	cmp	r3, r5
 8005f6a:	dd27      	ble.n	8005fbc <taabe24+0x124>
 8005f6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f6e:	f853 3009 	ldr.w	r3, [r3, r9]
 8005f72:	f8d8 2000 	ldr.w	r2, [r8]
 8005f76:	f8da 1000 	ldr.w	r1, [sl]
 8005f7a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8005f7e:	f851 1025 	ldr.w	r1, [r1, r5, lsl #2]
 8005f82:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	4638      	mov	r0, r7
 8005f8a:	2307      	movs	r3, #7
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	f003 fce3 	bl	8009958 <taabe521>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	d0e5      	beq.n	8005f62 <taabe24+0xca>
 8005f96:	4601      	mov	r1, r0
 8005f98:	4630      	mov	r0, r6
 8005f9a:	9103      	str	r1, [sp, #12]
 8005f9c:	f7ff ff34 	bl	8005e08 <taabe394.part.0>
 8005fa0:	9903      	ldr	r1, [sp, #12]
 8005fa2:	4608      	mov	r0, r1
 8005fa4:	b005      	add	sp, #20
 8005fa6:	ecbd 8b02 	vpop	{d8}
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	b005      	add	sp, #20
 8005fb4:	ecbd 8b02 	vpop	{d8}
 8005fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbc:	1c63      	adds	r3, r4, #1
 8005fbe:	459b      	cmp	fp, r3
 8005fc0:	f10a 0a04 	add.w	sl, sl, #4
 8005fc4:	f108 0804 	add.w	r8, r8, #4
 8005fc8:	d01b      	beq.n	8006002 <taabe24+0x16a>
 8005fca:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8005fcc:	461c      	mov	r4, r3
 8005fce:	e7b0      	b.n	8005f32 <taabe24+0x9a>
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f7ff ff19 	bl	8005e08 <taabe394.part.0>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4608      	mov	r0, r1
 8005fda:	b005      	add	sp, #20
 8005fdc:	ecbd 8b02 	vpop	{d8}
 8005fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe4:	3110      	adds	r1, #16
 8005fe6:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8005fe8:	9103      	str	r1, [sp, #12]
 8005fea:	f002 fb27 	bl	800863c <taabe592>
 8005fee:	9903      	ldr	r1, [sp, #12]
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	482a      	ldr	r0, [pc, #168]	; (800609c <taabe24+0x204>)
 8005ff4:	f002 fea0 	bl	8008d38 <taabe250>
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f7ff ff05 	bl	8005e08 <taabe394.part.0>
 8005ffe:	2103      	movs	r1, #3
 8006000:	e7cf      	b.n	8005fa2 <taabe24+0x10a>
 8006002:	ee18 1a10 	vmov	r1, s16
 8006006:	2201      	movs	r2, #1
 8006008:	4638      	mov	r0, r7
 800600a:	f002 fb47 	bl	800869c <taabe284>
 800600e:	62b0      	str	r0, [r6, #40]	; 0x28
 8006010:	b1e0      	cbz	r0, 800604c <taabe24+0x1b4>
 8006012:	4623      	mov	r3, r4
 8006014:	2500      	movs	r5, #0
 8006016:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 800601a:	4604      	mov	r4, r0
 800601c:	4698      	mov	r8, r3
 800601e:	e008      	b.n	8006032 <taabe24+0x19a>
 8006020:	4545      	cmp	r5, r8
 8006022:	f8a3 9000 	strh.w	r9, [r3]
 8006026:	f8a3 9002 	strh.w	r9, [r3, #2]
 800602a:	f8a3 9004 	strh.w	r9, [r3, #4]
 800602e:	d01b      	beq.n	8006068 <taabe24+0x1d0>
 8006030:	4615      	mov	r5, r2
 8006032:	2200      	movs	r2, #0
 8006034:	2106      	movs	r1, #6
 8006036:	4638      	mov	r0, r7
 8006038:	f002 fb30 	bl	800869c <taabe284>
 800603c:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8006040:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 8006042:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
 8006046:	1c6a      	adds	r2, r5, #1
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e9      	bne.n	8006020 <taabe24+0x188>
 800604c:	4630      	mov	r0, r6
 800604e:	f7ff fedb 	bl	8005e08 <taabe394.part.0>
 8006052:	2101      	movs	r1, #1
 8006054:	e7a5      	b.n	8005fa2 <taabe24+0x10a>
 8006056:	ee18 1a10 	vmov	r1, s16
 800605a:	2201      	movs	r2, #1
 800605c:	4638      	mov	r0, r7
 800605e:	f002 fb1d 	bl	800869c <taabe284>
 8006062:	62b0      	str	r0, [r6, #40]	; 0x28
 8006064:	2800      	cmp	r0, #0
 8006066:	d0f1      	beq.n	800604c <taabe24+0x1b4>
 8006068:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 800606c:	62f3      	str	r3, [r6, #44]	; 0x2c
 800606e:	2400      	movs	r4, #0
 8006070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006074:	8633      	strh	r3, [r6, #48]	; 0x30
 8006076:	6374      	str	r4, [r6, #52]	; 0x34
 8006078:	ea4f 014b 	mov.w	r1, fp, lsl #1
 800607c:	4638      	mov	r0, r7
 800607e:	2201      	movs	r2, #1
 8006080:	f002 fb0c 	bl	800869c <taabe284>
 8006084:	63b0      	str	r0, [r6, #56]	; 0x38
 8006086:	2800      	cmp	r0, #0
 8006088:	d0e0      	beq.n	800604c <taabe24+0x1b4>
 800608a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800608c:	4621      	mov	r1, r4
 800608e:	601e      	str	r6, [r3, #0]
 8006090:	e787      	b.n	8005fa2 <taabe24+0x10a>
 8006092:	bf00      	nop
 8006094:	0800eff4 	.word	0x0800eff4
 8006098:	0800d788 	.word	0x0800d788
 800609c:	0800d21c 	.word	0x0800d21c

080060a0 <taabe394>:
 80060a0:	b108      	cbz	r0, 80060a6 <taabe394+0x6>
 80060a2:	f7ff beb1 	b.w	8005e08 <taabe394.part.0>
 80060a6:	4770      	bx	lr

080060a8 <taabe787>:
 80060a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060ac:	6947      	ldr	r7, [r0, #20]
 80060ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060b0:	2f00      	cmp	r7, #0
 80060b2:	4606      	mov	r6, r0
 80060b4:	dd28      	ble.n	8006108 <taabe787+0x60>
 80060b6:	6983      	ldr	r3, [r0, #24]
 80060b8:	f04f 0800 	mov.w	r8, #0
 80060bc:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80060c6:	bfc8      	it	gt
 80060c8:	2400      	movgt	r4, #0
 80060ca:	dd0a      	ble.n	80060e2 <taabe787+0x3a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80060d2:	f003 fdd5 	bl	8009c80 <taabe7>
 80060d6:	69b3      	ldr	r3, [r6, #24]
 80060d8:	f853 2009 	ldr.w	r2, [r3, r9]
 80060dc:	3401      	adds	r4, #1
 80060de:	42a2      	cmp	r2, r4
 80060e0:	dcf4      	bgt.n	80060cc <taabe787+0x24>
 80060e2:	f108 0801 	add.w	r8, r8, #1
 80060e6:	4547      	cmp	r7, r8
 80060e8:	f105 0504 	add.w	r5, r5, #4
 80060ec:	d1e6      	bne.n	80060bc <taabe787+0x14>
 80060ee:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80060f0:	3a04      	subs	r2, #4
 80060f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80060fa:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80060fe:	42ba      	cmp	r2, r7
 8006100:	8019      	strh	r1, [r3, #0]
 8006102:	8059      	strh	r1, [r3, #2]
 8006104:	8099      	strh	r1, [r3, #4]
 8006106:	d1f8      	bne.n	80060fa <taabe787+0x52>
 8006108:	f04f 2180 	mov.w	r1, #2147516416	; 0x80008000
 800610c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006110:	2300      	movs	r3, #0
 8006112:	62f1      	str	r1, [r6, #44]	; 0x2c
 8006114:	8632      	strh	r2, [r6, #48]	; 0x30
 8006116:	6373      	str	r3, [r6, #52]	; 0x34
 8006118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800611c <taabe173>:
 800611c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006120:	ed2d 8b02 	vpush	{d8}
 8006124:	4606      	mov	r6, r0
 8006126:	6800      	ldr	r0, [r0, #0]
 8006128:	6877      	ldr	r7, [r6, #4]
 800612a:	b089      	sub	sp, #36	; 0x24
 800612c:	460d      	mov	r5, r1
 800612e:	4614      	mov	r4, r2
 8006130:	21a0      	movs	r1, #160	; 0xa0
 8006132:	2200      	movs	r2, #0
 8006134:	ee08 0a10 	vmov	s16, r0
 8006138:	f002 fab0 	bl	800869c <taabe284>
 800613c:	9003      	str	r0, [sp, #12]
 800613e:	2800      	cmp	r0, #0
 8006140:	f000 80cb 	beq.w	80062da <taabe173+0x1be>
 8006144:	4602      	mov	r2, r0
 8006146:	4629      	mov	r1, r5
 8006148:	4638      	mov	r0, r7
 800614a:	f002 fb31 	bl	80087b0 <taabe453>
 800614e:	9002      	str	r0, [sp, #8]
 8006150:	2800      	cmp	r0, #0
 8006152:	f040 80b7 	bne.w	80062c4 <taabe173+0x1a8>
 8006156:	9b03      	ldr	r3, [sp, #12]
 8006158:	f505 7100 	add.w	r1, r5, #512	; 0x200
 800615c:	4638      	mov	r0, r7
 800615e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8006162:	f002 fb25 	bl	80087b0 <taabe453>
 8006166:	9002      	str	r0, [sp, #8]
 8006168:	2800      	cmp	r0, #0
 800616a:	f040 80ab 	bne.w	80062c4 <taabe173+0x1a8>
 800616e:	68f0      	ldr	r0, [r6, #12]
 8006170:	9903      	ldr	r1, [sp, #12]
 8006172:	2202      	movs	r2, #2
 8006174:	f003 f86c 	bl	8009250 <taabe265>
 8006178:	6931      	ldr	r1, [r6, #16]
 800617a:	9a02      	ldr	r2, [sp, #8]
 800617c:	3101      	adds	r1, #1
 800617e:	ee18 0a10 	vmov	r0, s16
 8006182:	0089      	lsls	r1, r1, #2
 8006184:	f002 fa8a 	bl	800869c <taabe284>
 8006188:	4680      	mov	r8, r0
 800618a:	2800      	cmp	r0, #0
 800618c:	f000 80c1 	beq.w	8006312 <taabe173+0x1f6>
 8006190:	68f0      	ldr	r0, [r6, #12]
 8006192:	9903      	ldr	r1, [sp, #12]
 8006194:	4642      	mov	r2, r8
 8006196:	f003 f863 	bl	8009260 <taabe310>
 800619a:	9002      	str	r0, [sp, #8]
 800619c:	2800      	cmp	r0, #0
 800619e:	f040 8081 	bne.w	80062a4 <taabe173+0x188>
 80061a2:	8df3      	ldrh	r3, [r6, #46]	; 0x2e
 80061a4:	85b3      	strh	r3, [r6, #44]	; 0x2c
 80061a6:	8e33      	ldrh	r3, [r6, #48]	; 0x30
 80061a8:	6975      	ldr	r5, [r6, #20]
 80061aa:	85f3      	strh	r3, [r6, #46]	; 0x2e
 80061ac:	f8d8 1000 	ldr.w	r1, [r8]
 80061b0:	9504      	str	r5, [sp, #16]
 80061b2:	f002 ff07 	bl	8008fc4 <taabe312>
 80061b6:	f9b6 302e 	ldrsh.w	r3, [r6, #46]	; 0x2e
 80061ba:	f9b6 202c 	ldrsh.w	r2, [r6, #44]	; 0x2c
 80061be:	f302 020f 	ssat	r2, #16, r2
 80061c2:	fa03 f282 	sxtah	r2, r3, r2
 80061c6:	f302 020f 	ssat	r2, #16, r2
 80061ca:	fa00 f382 	sxtah	r3, r0, r2
 80061ce:	f303 030f 	ssat	r3, #16, r3
 80061d2:	b21b      	sxth	r3, r3
 80061d4:	9305      	str	r3, [sp, #20]
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80061da:	9306      	str	r3, [sp, #24]
 80061dc:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 80061de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80061e0:	8630      	strh	r0, [r6, #48]	; 0x30
 80061e2:	dd54      	ble.n	800628e <taabe173+0x172>
 80061e4:	69b1      	ldr	r1, [r6, #24]
 80061e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80061ea:	9401      	str	r4, [sp, #4]
 80061ec:	1e97      	subs	r7, r2, #2
 80061ee:	4642      	mov	r2, r8
 80061f0:	9707      	str	r7, [sp, #28]
 80061f2:	4698      	mov	r8, r3
 80061f4:	4693      	mov	fp, r2
 80061f6:	460b      	mov	r3, r1
 80061f8:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80061fc:	f248 0200 	movw	r2, #32768	; 0x8000
 8006200:	2800      	cmp	r0, #0
 8006202:	f827 2f02 	strh.w	r2, [r7, #2]!
 8006206:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800620a:	dd13      	ble.n	8006234 <taabe173+0x118>
 800620c:	4c45      	ldr	r4, [pc, #276]	; (8006324 <taabe173+0x208>)
 800620e:	2500      	movs	r5, #0
 8006210:	f8d8 3000 	ldr.w	r3, [r8]
 8006214:	4659      	mov	r1, fp
 8006216:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800621a:	f003 fc23 	bl	8009a64 <taabe343>
 800621e:	69b3      	ldr	r3, [r6, #24]
 8006220:	42a0      	cmp	r0, r4
 8006222:	f853 200a 	ldr.w	r2, [r3, sl]
 8006226:	bfb8      	it	lt
 8006228:	4620      	movlt	r0, r4
 800622a:	3501      	adds	r5, #1
 800622c:	b204      	sxth	r4, r0
 800622e:	42aa      	cmp	r2, r5
 8006230:	803c      	strh	r4, [r7, #0]
 8006232:	dced      	bgt.n	8006210 <taabe173+0xf4>
 8006234:	69f2      	ldr	r2, [r6, #28]
 8006236:	f812 2009 	ldrb.w	r2, [r2, r9]
 800623a:	2a00      	cmp	r2, #0
 800623c:	d055      	beq.n	80062ea <taabe173+0x1ce>
 800623e:	9a05      	ldr	r2, [sp, #20]
 8006240:	f512 7fc0 	cmn.w	r2, #384	; 0x180
 8006244:	bfa9      	itett	ge
 8006246:	9a06      	ldrge	r2, [sp, #24]
 8006248:	4a36      	ldrlt	r2, [pc, #216]	; (8006324 <taabe173+0x208>)
 800624a:	f852 2029 	ldrge.w	r2, [r2, r9, lsl #2]
 800624e:	f9b2 2000 	ldrshge.w	r2, [r2]
 8006252:	9901      	ldr	r1, [sp, #4]
 8006254:	800a      	strh	r2, [r1, #0]
 8006256:	9a01      	ldr	r2, [sp, #4]
 8006258:	3202      	adds	r2, #2
 800625a:	9201      	str	r2, [sp, #4]
 800625c:	9a04      	ldr	r2, [sp, #16]
 800625e:	f109 0901 	add.w	r9, r9, #1
 8006262:	454a      	cmp	r2, r9
 8006264:	f108 0804 	add.w	r8, r8, #4
 8006268:	d1c6      	bne.n	80061f8 <taabe173+0xdc>
 800626a:	9b06      	ldr	r3, [sp, #24]
 800626c:	9807      	ldr	r0, [sp, #28]
 800626e:	1f1a      	subs	r2, r3, #4
 8006270:	9b04      	ldr	r3, [sp, #16]
 8006272:	46d8      	mov	r8, fp
 8006274:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8006278:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800627c:	885c      	ldrh	r4, [r3, #2]
 800627e:	801c      	strh	r4, [r3, #0]
 8006280:	889c      	ldrh	r4, [r3, #4]
 8006282:	805c      	strh	r4, [r3, #2]
 8006284:	f930 4f02 	ldrsh.w	r4, [r0, #2]!
 8006288:	809c      	strh	r4, [r3, #4]
 800628a:	4291      	cmp	r1, r2
 800628c:	d1f4      	bne.n	8006278 <taabe173+0x15c>
 800628e:	f8d8 2000 	ldr.w	r2, [r8]
 8006292:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006296:	fa82 f3a3 	qsub	r3, r3, r2
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629e:	db27      	blt.n	80062f0 <taabe173+0x1d4>
 80062a0:	2300      	movs	r3, #0
 80062a2:	6373      	str	r3, [r6, #52]	; 0x34
 80062a4:	ee18 0a10 	vmov	r0, s16
 80062a8:	4641      	mov	r1, r8
 80062aa:	f002 fa2b 	bl	8008704 <taabe22>
 80062ae:	ee18 0a10 	vmov	r0, s16
 80062b2:	9903      	ldr	r1, [sp, #12]
 80062b4:	f002 fa26 	bl	8008704 <taabe22>
 80062b8:	9802      	ldr	r0, [sp, #8]
 80062ba:	b009      	add	sp, #36	; 0x24
 80062bc:	ecbd 8b02 	vpop	{d8}
 80062c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c4:	9903      	ldr	r1, [sp, #12]
 80062c6:	ee18 0a10 	vmov	r0, s16
 80062ca:	f002 fa1b 	bl	8008704 <taabe22>
 80062ce:	9802      	ldr	r0, [sp, #8]
 80062d0:	b009      	add	sp, #36	; 0x24
 80062d2:	ecbd 8b02 	vpop	{d8}
 80062d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062da:	2301      	movs	r3, #1
 80062dc:	9302      	str	r3, [sp, #8]
 80062de:	9802      	ldr	r0, [sp, #8]
 80062e0:	b009      	add	sp, #36	; 0x24
 80062e2:	ecbd 8b02 	vpop	{d8}
 80062e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80062ee:	e7b0      	b.n	8006252 <taabe173+0x136>
 80062f0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80062f2:	f240 7253 	movw	r2, #1875	; 0x753
 80062f6:	3301      	adds	r3, #1
 80062f8:	4293      	cmp	r3, r2
 80062fa:	6373      	str	r3, [r6, #52]	; 0x34
 80062fc:	ddd2      	ble.n	80062a4 <taabe173+0x188>
 80062fe:	6870      	ldr	r0, [r6, #4]
 8006300:	f002 fb4a 	bl	8008998 <taabe57>
 8006304:	68f0      	ldr	r0, [r6, #12]
 8006306:	f002 fffd 	bl	8009304 <taabe51>
 800630a:	4630      	mov	r0, r6
 800630c:	f7ff fecc 	bl	80060a8 <taabe787>
 8006310:	e7c8      	b.n	80062a4 <taabe173+0x188>
 8006312:	9903      	ldr	r1, [sp, #12]
 8006314:	ee18 0a10 	vmov	r0, s16
 8006318:	f002 f9f4 	bl	8008704 <taabe22>
 800631c:	2301      	movs	r3, #1
 800631e:	9302      	str	r3, [sp, #8]
 8006320:	e7d5      	b.n	80062ce <taabe173+0x1b2>
 8006322:	bf00      	nop
 8006324:	ffff8000 	.word	0xffff8000

08006328 <taabe559>:
 8006328:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800632a:	4770      	bx	lr

0800632c <taabe85>:
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	b08b      	sub	sp, #44	; 0x2c
 8006332:	af02      	add	r7, sp, #8
 8006334:	4614      	mov	r4, r2
 8006336:	f8d7 8048 	ldr.w	r8, [r7, #72]	; 0x48
 800633a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800633c:	607b      	str	r3, [r7, #4]
 800633e:	468a      	mov	sl, r1
 8006340:	4605      	mov	r5, r0
 8006342:	49c1      	ldr	r1, [pc, #772]	; (8006648 <taabe85+0x31c>)
 8006344:	4640      	mov	r0, r8
 8006346:	f002 f969 	bl	800861c <taabe267>
 800634a:	4620      	mov	r0, r4
 800634c:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	2300      	movs	r3, #0
 8006352:	6023      	str	r3, [r4, #0]
 8006354:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8006356:	6033      	str	r3, [r6, #0]
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	613b      	str	r3, [r7, #16]
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	f107 0310 	add.w	r3, r7, #16
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	4651      	mov	r1, sl
 8006366:	f107 030c 	add.w	r3, r7, #12
 800636a:	f002 f8a5 	bl	80084b8 <taabe490>
 800636e:	2800      	cmp	r0, #0
 8006370:	f040 80ae 	bne.w	80064d0 <taabe85+0x1a4>
 8006374:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 8006378:	49b4      	ldr	r1, [pc, #720]	; (800664c <taabe85+0x320>)
 800637a:	f10c 32ff 	add.w	r2, ip, #4294967295
 800637e:	2370      	movs	r3, #112	; 0x70
 8006380:	e002      	b.n	8006388 <taabe85+0x5c>
 8006382:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006386:	b17b      	cbz	r3, 80063a8 <taabe85+0x7c>
 8006388:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800638c:	4298      	cmp	r0, r3
 800638e:	d0f8      	beq.n	8006382 <taabe85+0x56>
 8006390:	48af      	ldr	r0, [pc, #700]	; (8006650 <taabe85+0x324>)
 8006392:	f002 fcd1 	bl	8008d38 <taabe250>
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f003 fe34 	bl	800a004 <free>
 800639c:	2403      	movs	r4, #3
 800639e:	4620      	mov	r0, r4
 80063a0:	3724      	adds	r7, #36	; 0x24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a8:	4aaa      	ldr	r2, [pc, #680]	; (8006654 <taabe85+0x328>)
 80063aa:	f10c 0308 	add.w	r3, ip, #8
 80063ae:	2432      	movs	r4, #50	; 0x32
 80063b0:	e002      	b.n	80063b8 <taabe85+0x8c>
 80063b2:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80063b6:	b1b4      	cbz	r4, 80063e6 <taabe85+0xba>
 80063b8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80063bc:	42a1      	cmp	r1, r4
 80063be:	d0f8      	beq.n	80063b2 <taabe85+0x86>
 80063c0:	f8dc 0009 	ldr.w	r0, [ip, #9]
 80063c4:	6178      	str	r0, [r7, #20]
 80063c6:	f89c 300d 	ldrb.w	r3, [ip, #13]
 80063ca:	4aa2      	ldr	r2, [pc, #648]	; (8006654 <taabe85+0x328>)
 80063cc:	48a2      	ldr	r0, [pc, #648]	; (8006658 <taabe85+0x32c>)
 80063ce:	763b      	strb	r3, [r7, #24]
 80063d0:	f107 0114 	add.w	r1, r7, #20
 80063d4:	2400      	movs	r4, #0
 80063d6:	767c      	strb	r4, [r7, #25]
 80063d8:	f002 fcae 	bl	8008d38 <taabe250>
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f003 fe11 	bl	800a004 <free>
 80063e2:	2403      	movs	r4, #3
 80063e4:	e078      	b.n	80064d8 <taabe85+0x1ac>
 80063e6:	f8dc 100e 	ldr.w	r1, [ip, #14]
 80063ea:	2900      	cmp	r1, #0
 80063ec:	dd79      	ble.n	80064e2 <taabe85+0x1b6>
 80063ee:	290c      	cmp	r1, #12
 80063f0:	d17c      	bne.n	80064ec <taabe85+0x1c0>
 80063f2:	f8dc 201a 	ldr.w	r2, [ip, #26]
 80063f6:	f8dc 0012 	ldr.w	r0, [ip, #18]
 80063fa:	f8dc 1016 	ldr.w	r1, [ip, #22]
 80063fe:	f107 0314 	add.w	r3, r7, #20
 8006402:	c307      	stmia	r3!, {r0, r1, r2}
 8006404:	4a95      	ldr	r2, [pc, #596]	; (800665c <taabe85+0x330>)
 8006406:	f107 0914 	add.w	r9, r7, #20
 800640a:	eba2 0209 	sub.w	r2, r2, r9
 800640e:	46ea      	mov	sl, sp
 8006410:	f107 0b20 	add.w	fp, r7, #32
 8006414:	464b      	mov	r3, r9
 8006416:	f813 1b01 	ldrb.w	r1, [r3], #1
 800641a:	5cd0      	ldrb	r0, [r2, r3]
 800641c:	4288      	cmp	r0, r1
 800641e:	f040 8127 	bne.w	8006670 <taabe85+0x344>
 8006422:	459b      	cmp	fp, r3
 8006424:	d1f7      	bne.n	8006416 <taabe85+0xea>
 8006426:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800642a:	46d5      	mov	sp, sl
 800642c:	f04f 0b1e 	mov.w	fp, #30
 8006430:	f04f 0a21 	mov.w	sl, #33	; 0x21
 8006434:	eb0c 010b 	add.w	r1, ip, fp
 8006438:	4640      	mov	r0, r8
 800643a:	f002 f8ef 	bl	800861c <taabe267>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f853 a00a 	ldr.w	sl, [r3, sl]
 8006444:	f1ba 0f00 	cmp.w	sl, #0
 8006448:	dda2      	ble.n	8006390 <taabe85+0x64>
 800644a:	f10b 0b07 	add.w	fp, fp, #7
 800644e:	44da      	add	sl, fp
 8006450:	f853 100a 	ldr.w	r1, [r3, sl]
 8006454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006456:	2900      	cmp	r1, #0
 8006458:	6019      	str	r1, [r3, #0]
 800645a:	dd99      	ble.n	8006390 <taabe85+0x64>
 800645c:	0089      	lsls	r1, r1, #2
 800645e:	2200      	movs	r2, #0
 8006460:	4628      	mov	r0, r5
 8006462:	f002 f91b 	bl	800869c <taabe284>
 8006466:	6030      	str	r0, [r6, #0]
 8006468:	2800      	cmp	r0, #0
 800646a:	f000 80b3 	beq.w	80065d4 <taabe85+0x2a8>
 800646e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006470:	68f9      	ldr	r1, [r7, #12]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	f10a 0a04 	add.w	sl, sl, #4
 8006478:	0092      	lsls	r2, r2, #2
 800647a:	4451      	add	r1, sl
 800647c:	f003 fdca 	bl	800a014 <memcpy>
 8006480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006482:	f8d3 8000 	ldr.w	r8, [r3]
 8006486:	f1b8 0f00 	cmp.w	r8, #0
 800648a:	f340 8124 	ble.w	80066d6 <taabe85+0x3aa>
 800648e:	6833      	ldr	r3, [r6, #0]
 8006490:	f1a3 0c04 	sub.w	ip, r3, #4
 8006494:	4660      	mov	r0, ip
 8006496:	4662      	mov	r2, ip
 8006498:	2300      	movs	r3, #0
 800649a:	e001      	b.n	80064a0 <taabe85+0x174>
 800649c:	4598      	cmp	r8, r3
 800649e:	d032      	beq.n	8006506 <taabe85+0x1da>
 80064a0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80064a4:	2900      	cmp	r1, #0
 80064a6:	f103 0301 	add.w	r3, r3, #1
 80064aa:	dcf7      	bgt.n	800649c <taabe85+0x170>
 80064ac:	4868      	ldr	r0, [pc, #416]	; (8006650 <taabe85+0x324>)
 80064ae:	f002 fc43 	bl	8008d38 <taabe250>
 80064b2:	6831      	ldr	r1, [r6, #0]
 80064b4:	4628      	mov	r0, r5
 80064b6:	f002 f925 	bl	8008704 <taabe22>
 80064ba:	2300      	movs	r3, #0
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	6033      	str	r3, [r6, #0]
 80064c0:	f003 fda0 	bl	800a004 <free>
 80064c4:	2403      	movs	r4, #3
 80064c6:	4620      	mov	r0, r4
 80064c8:	3724      	adds	r7, #36	; 0x24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064d0:	4604      	mov	r4, r0
 80064d2:	4863      	ldr	r0, [pc, #396]	; (8006660 <taabe85+0x334>)
 80064d4:	f002 fc30 	bl	8008d38 <taabe250>
 80064d8:	4620      	mov	r0, r4
 80064da:	3724      	adds	r7, #36	; 0x24
 80064dc:	46bd      	mov	sp, r7
 80064de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e2:	f04f 0a15 	mov.w	sl, #21
 80064e6:	f04f 0b12 	mov.w	fp, #18
 80064ea:	e7a3      	b.n	8006434 <taabe85+0x108>
 80064ec:	220c      	movs	r2, #12
 80064ee:	485d      	ldr	r0, [pc, #372]	; (8006664 <taabe85+0x338>)
 80064f0:	f002 fc22 	bl	8008d38 <taabe250>
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f003 fd85 	bl	800a004 <free>
 80064fa:	2403      	movs	r4, #3
 80064fc:	4620      	mov	r0, r4
 80064fe:	3724      	adds	r7, #36	; 0x24
 8006500:	46bd      	mov	sp, r7
 8006502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006506:	eb0c 0388 	add.w	r3, ip, r8, lsl #2
 800650a:	f04f 0b00 	mov.w	fp, #0
 800650e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006512:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8006516:	4283      	cmp	r3, r0
 8006518:	4493      	add	fp, r2
 800651a:	d1fa      	bne.n	8006512 <taabe85+0x1e6>
 800651c:	2200      	movs	r2, #0
 800651e:	4641      	mov	r1, r8
 8006520:	4628      	mov	r0, r5
 8006522:	f002 f8bb 	bl	800869c <taabe284>
 8006526:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006528:	6010      	str	r0, [r2, #0]
 800652a:	2800      	cmp	r0, #0
 800652c:	f000 80c7 	beq.w	80066be <taabe85+0x392>
 8006530:	2200      	movs	r2, #0
 8006532:	ea4f 018b 	mov.w	r1, fp, lsl #2
 8006536:	4628      	mov	r0, r5
 8006538:	f002 f8b0 	bl	800869c <taabe284>
 800653c:	4681      	mov	r9, r0
 800653e:	2800      	cmp	r0, #0
 8006540:	f000 80ce 	beq.w	80066e0 <taabe85+0x3b4>
 8006544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2a01      	cmp	r2, #1
 800654e:	6018      	str	r0, [r3, #0]
 8006550:	dd15      	ble.n	800657e <taabe85+0x252>
 8006552:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006556:	f06f 0c03 	mvn.w	ip, #3
 800655a:	4696      	mov	lr, r2
 800655c:	ebac 0c03 	sub.w	ip, ip, r3
 8006560:	4602      	mov	r2, r0
 8006562:	3304      	adds	r3, #4
 8006564:	e001      	b.n	800656a <taabe85+0x23e>
 8006566:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800656a:	6830      	ldr	r0, [r6, #0]
 800656c:	4418      	add	r0, r3
 800656e:	f850 100c 	ldr.w	r1, [r0, ip]
 8006572:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8006576:	f843 1b04 	str.w	r1, [r3], #4
 800657a:	459e      	cmp	lr, r3
 800657c:	d1f3      	bne.n	8006566 <taabe85+0x23a>
 800657e:	f1bb 0f00 	cmp.w	fp, #0
 8006582:	44d0      	add	r8, sl
 8006584:	dd2b      	ble.n	80065de <taabe85+0x2b2>
 8006586:	2100      	movs	r1, #0
 8006588:	eba9 0008 	sub.w	r0, r9, r8
 800658c:	e001      	b.n	8006592 <taabe85+0x266>
 800658e:	4559      	cmp	r1, fp
 8006590:	d025      	beq.n	80065de <taabe85+0x2b2>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f853 3008 	ldr.w	r3, [r3, r8]
 8006598:	f840 3008 	str.w	r3, [r0, r8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f101 0101 	add.w	r1, r1, #1
 80065a2:	f108 0804 	add.w	r8, r8, #4
 80065a6:	dcf2      	bgt.n	800658e <taabe85+0x262>
 80065a8:	4649      	mov	r1, r9
 80065aa:	4628      	mov	r0, r5
 80065ac:	f002 f8aa 	bl	8008704 <taabe22>
 80065b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065b2:	4628      	mov	r0, r5
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	f002 f8a5 	bl	8008704 <taabe22>
 80065ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065bc:	6831      	ldr	r1, [r6, #0]
 80065be:	2400      	movs	r4, #0
 80065c0:	601c      	str	r4, [r3, #0]
 80065c2:	4628      	mov	r0, r5
 80065c4:	f002 f89e 	bl	8008704 <taabe22>
 80065c8:	6034      	str	r4, [r6, #0]
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f003 fd1a 	bl	800a004 <free>
 80065d0:	2403      	movs	r4, #3
 80065d2:	e781      	b.n	80064d8 <taabe85+0x1ac>
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f003 fd15 	bl	800a004 <free>
 80065da:	2401      	movs	r4, #1
 80065dc:	e77c      	b.n	80064d8 <taabe85+0x1ac>
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065e2:	f850 3008 	ldr.w	r3, [r0, r8]
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f4:	f108 0104 	add.w	r1, r8, #4
 80065f8:	da36      	bge.n	8006668 <taabe85+0x33c>
 80065fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065fc:	5843      	ldr	r3, [r0, r1]
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006602:	ee07 3a10 	vmov	s14, r3
 8006606:	edd2 7a00 	vldr	s15, [r2]
 800660a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800660e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006612:	f108 0108 	add.w	r1, r8, #8
 8006616:	dc27      	bgt.n	8006668 <taabe85+0x33c>
 8006618:	5843      	ldr	r3, [r0, r1]
 800661a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800661c:	f1a3 0301 	sub.w	r3, r3, #1
 8006620:	fab3 f383 	clz	r3, r3
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	700b      	strb	r3, [r1, #0]
 8006628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800662a:	2200      	movs	r2, #0
 800662c:	4480      	add	r8, r0
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006634:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006636:	f1a3 0301 	sub.w	r3, r3, #1
 800663a:	fab3 f383 	clz	r3, r3
 800663e:	095b      	lsrs	r3, r3, #5
 8006640:	7013      	strb	r3, [r2, #0]
 8006642:	f003 fcdf 	bl	800a004 <free>
 8006646:	e747      	b.n	80064d8 <taabe85+0x1ac>
 8006648:	0800d100 	.word	0x0800d100
 800664c:	0800d2ec 	.word	0x0800d2ec
 8006650:	0800d380 	.word	0x0800d380
 8006654:	0800d400 	.word	0x0800d400
 8006658:	0800d408 	.word	0x0800d408
 800665c:	1fff7a0f 	.word	0x1fff7a0f
 8006660:	0800d29c 	.word	0x0800d29c
 8006664:	0800d318 	.word	0x0800d318
 8006668:	4827      	ldr	r0, [pc, #156]	; (8006708 <taabe85+0x3dc>)
 800666a:	f002 fb65 	bl	8008d38 <taabe250>
 800666e:	e79b      	b.n	80065a8 <taabe85+0x27c>
 8006670:	4826      	ldr	r0, [pc, #152]	; (800670c <taabe85+0x3e0>)
 8006672:	4c27      	ldr	r4, [pc, #156]	; (8006710 <taabe85+0x3e4>)
 8006674:	f002 fb60 	bl	8008d38 <taabe250>
 8006678:	4826      	ldr	r0, [pc, #152]	; (8006714 <taabe85+0x3e8>)
 800667a:	f002 fb5d 	bl	8008d38 <taabe250>
 800667e:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006682:	4620      	mov	r0, r4
 8006684:	f002 fb58 	bl	8008d38 <taabe250>
 8006688:	45d9      	cmp	r9, fp
 800668a:	d1f8      	bne.n	800667e <taabe85+0x352>
 800668c:	4822      	ldr	r0, [pc, #136]	; (8006718 <taabe85+0x3ec>)
 800668e:	4c23      	ldr	r4, [pc, #140]	; (800671c <taabe85+0x3f0>)
 8006690:	4e1f      	ldr	r6, [pc, #124]	; (8006710 <taabe85+0x3e4>)
 8006692:	4d23      	ldr	r5, [pc, #140]	; (8006720 <taabe85+0x3f4>)
 8006694:	f002 fb50 	bl	8008d38 <taabe250>
 8006698:	4822      	ldr	r0, [pc, #136]	; (8006724 <taabe85+0x3f8>)
 800669a:	f002 fb4d 	bl	8008d38 <taabe250>
 800669e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066a2:	4630      	mov	r0, r6
 80066a4:	f002 fb48 	bl	8008d38 <taabe250>
 80066a8:	42ac      	cmp	r4, r5
 80066aa:	d1f8      	bne.n	800669e <taabe85+0x372>
 80066ac:	481a      	ldr	r0, [pc, #104]	; (8006718 <taabe85+0x3ec>)
 80066ae:	f002 fb43 	bl	8008d38 <taabe250>
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f003 fca6 	bl	800a004 <free>
 80066b8:	2403      	movs	r4, #3
 80066ba:	46d5      	mov	sp, sl
 80066bc:	e70c      	b.n	80064d8 <taabe85+0x1ac>
 80066be:	6831      	ldr	r1, [r6, #0]
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	4628      	mov	r0, r5
 80066c4:	f002 f81e 	bl	8008704 <taabe22>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	f003 fc99 	bl	800a004 <free>
 80066d2:	2401      	movs	r4, #1
 80066d4:	e700      	b.n	80064d8 <taabe85+0x1ac>
 80066d6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80066da:	f04f 0b00 	mov.w	fp, #0
 80066de:	e71d      	b.n	800651c <taabe85+0x1f0>
 80066e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e2:	4628      	mov	r0, r5
 80066e4:	6819      	ldr	r1, [r3, #0]
 80066e6:	f002 f80d 	bl	8008704 <taabe22>
 80066ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066ec:	6831      	ldr	r1, [r6, #0]
 80066ee:	f8c3 9000 	str.w	r9, [r3]
 80066f2:	4628      	mov	r0, r5
 80066f4:	f002 f806 	bl	8008704 <taabe22>
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f8c6 9000 	str.w	r9, [r6]
 80066fe:	f003 fc81 	bl	800a004 <free>
 8006702:	2401      	movs	r4, #1
 8006704:	e6e8      	b.n	80064d8 <taabe85+0x1ac>
 8006706:	bf00      	nop
 8006708:	0800d380 	.word	0x0800d380
 800670c:	0800d3b0 	.word	0x0800d3b0
 8006710:	0800d2f8 	.word	0x0800d2f8
 8006714:	0800d3e8 	.word	0x0800d3e8
 8006718:	0800d598 	.word	0x0800d598
 800671c:	1fff7a10 	.word	0x1fff7a10
 8006720:	1fff7a1c 	.word	0x1fff7a1c
 8006724:	0800d300 	.word	0x0800d300

08006728 <pv_rhino_delete.part.0>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	6805      	ldr	r5, [r0, #0]
 800672c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800672e:	4604      	mov	r4, r0
 8006730:	4628      	mov	r0, r5
 8006732:	f001 ffe7 	bl	8008704 <taabe22>
 8006736:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006738:	4628      	mov	r0, r5
 800673a:	f001 ffe3 	bl	8008704 <taabe22>
 800673e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006740:	f001 f808 	bl	8007754 <taabe43>
 8006744:	6a20      	ldr	r0, [r4, #32]
 8006746:	f000 fdbd 	bl	80072c4 <taabe217>
 800674a:	68e0      	ldr	r0, [r4, #12]
 800674c:	f002 fd7c 	bl	8009248 <taabe422>
 8006750:	6860      	ldr	r0, [r4, #4]
 8006752:	f002 f81f 	bl	8008794 <taabe4>
 8006756:	4621      	mov	r1, r4
 8006758:	4628      	mov	r0, r5
 800675a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800675e:	f001 bfd1 	b.w	8008704 <taabe22>
 8006762:	bf00      	nop

08006764 <pv_rhino_process.part.0>:
 8006764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	ed2d 8b02 	vpush	{d8}
 800676c:	6807      	ldr	r7, [r0, #0]
 800676e:	b087      	sub	sp, #28
 8006770:	4604      	mov	r4, r0
 8006772:	4690      	mov	r8, r2
 8006774:	4689      	mov	r9, r1
 8006776:	2200      	movs	r2, #0
 8006778:	21a0      	movs	r1, #160	; 0xa0
 800677a:	4638      	mov	r0, r7
 800677c:	f001 ff8e 	bl	800869c <taabe284>
 8006780:	2800      	cmp	r0, #0
 8006782:	f000 8104 	beq.w	800698e <pv_rhino_process.part.0+0x22a>
 8006786:	4606      	mov	r6, r0
 8006788:	4632      	mov	r2, r6
 800678a:	6860      	ldr	r0, [r4, #4]
 800678c:	4649      	mov	r1, r9
 800678e:	f002 f80f 	bl	80087b0 <taabe453>
 8006792:	4605      	mov	r5, r0
 8006794:	2800      	cmp	r0, #0
 8006796:	f040 80e8 	bne.w	800696a <pv_rhino_process.part.0+0x206>
 800679a:	6860      	ldr	r0, [r4, #4]
 800679c:	f509 7100 	add.w	r1, r9, #512	; 0x200
 80067a0:	f106 0250 	add.w	r2, r6, #80	; 0x50
 80067a4:	f002 f804 	bl	80087b0 <taabe453>
 80067a8:	4605      	mov	r5, r0
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f040 80dd 	bne.w	800696a <pv_rhino_process.part.0+0x206>
 80067b0:	68e0      	ldr	r0, [r4, #12]
 80067b2:	2202      	movs	r2, #2
 80067b4:	4631      	mov	r1, r6
 80067b6:	f002 fd4b 	bl	8009250 <taabe265>
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	462a      	mov	r2, r5
 80067c2:	4638      	mov	r0, r7
 80067c4:	0099      	lsls	r1, r3, #2
 80067c6:	9302      	str	r3, [sp, #8]
 80067c8:	f001 ff68 	bl	800869c <taabe284>
 80067cc:	4681      	mov	r9, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	f000 80d9 	beq.w	8006986 <pv_rhino_process.part.0+0x222>
 80067d4:	68e0      	ldr	r0, [r4, #12]
 80067d6:	464a      	mov	r2, r9
 80067d8:	4631      	mov	r1, r6
 80067da:	f002 fd41 	bl	8009260 <taabe310>
 80067de:	4605      	mov	r5, r0
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f040 80be 	bne.w	8006962 <pv_rhino_process.part.0+0x1fe>
 80067e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80067e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80067ea:	f8d9 b000 	ldr.w	fp, [r9]
 80067ee:	3a01      	subs	r2, #1
 80067f0:	1d19      	adds	r1, r3, #4
 80067f2:	0092      	lsls	r2, r2, #2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f003 fc1b 	bl	800a030 <memmove>
 80067fa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80067fc:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
 8006800:	4452      	add	r2, sl
 8006802:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006806:	f840 b022 	str.w	fp, [r0, r2, lsl #2]
 800680a:	fa8b fba3 	qsub	fp, r3, fp
 800680e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006810:	223c      	movs	r2, #60	; 0x3c
 8006812:	1d19      	adds	r1, r3, #4
 8006814:	4618      	mov	r0, r3
 8006816:	f003 fc0b 	bl	800a030 <memmove>
 800681a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800681e:	f8c0 b03c 	str.w	fp, [r0, #60]	; 0x3c
 8006822:	2b00      	cmp	r3, #0
 8006824:	f040 80c2 	bne.w	80069ac <pv_rhino_process.part.0+0x248>
 8006828:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800682a:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 800682e:	eb00 030a 	add.w	r3, r0, sl
 8006832:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8006836:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006838:	429a      	cmp	r2, r3
 800683a:	f280 80af 	bge.w	800699c <pv_rhino_process.part.0+0x238>
 800683e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006840:	2301      	movs	r3, #1
 8006842:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8006846:	2500      	movs	r5, #0
 8006848:	1f0b      	subs	r3, r1, #4
 800684a:	313c      	adds	r1, #60	; 0x3c
 800684c:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8006850:	f1b2 3f66 	cmp.w	r2, #1717986918	; 0x66666666
 8006854:	bfc8      	it	gt
 8006856:	3501      	addgt	r5, #1
 8006858:	4299      	cmp	r1, r3
 800685a:	d1f7      	bne.n	800684c <pv_rhino_process.part.0+0xe8>
 800685c:	f894 e029 	ldrb.w	lr, [r4, #41]	; 0x29
 8006860:	2d01      	cmp	r5, #1
 8006862:	bfc8      	it	gt
 8006864:	f04e 0e01 	orrgt.w	lr, lr, #1
 8006868:	2800      	cmp	r0, #0
 800686a:	f884 e029 	strb.w	lr, [r4, #41]	; 0x29
 800686e:	dd10      	ble.n	8006892 <pv_rhino_process.part.0+0x12e>
 8006870:	f1ac 0304 	sub.w	r3, ip, #4
 8006874:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006878:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800687c:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8006880:	428a      	cmp	r2, r1
 8006882:	bfa8      	it	ge
 8006884:	460a      	movge	r2, r1
 8006886:	4298      	cmp	r0, r3
 8006888:	d1f8      	bne.n	800687c <pv_rhino_process.part.0+0x118>
 800688a:	f1be 0f00 	cmp.w	lr, #0
 800688e:	f040 8091 	bne.w	80069b4 <pv_rhino_process.part.0+0x250>
 8006892:	9d02      	ldr	r5, [sp, #8]
 8006894:	f888 e000 	strb.w	lr, [r8]
 8006898:	2200      	movs	r2, #0
 800689a:	0069      	lsls	r1, r5, #1
 800689c:	4638      	mov	r0, r7
 800689e:	f001 fefd 	bl	800869c <taabe284>
 80068a2:	9002      	str	r0, [sp, #8]
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d06a      	beq.n	800697e <pv_rhino_process.part.0+0x21a>
 80068a8:	2d00      	cmp	r5, #0
 80068aa:	dd17      	ble.n	80068dc <pv_rhino_process.part.0+0x178>
 80068ac:	f1a9 0a04 	sub.w	sl, r9, #4
 80068b0:	9b02      	ldr	r3, [sp, #8]
 80068b2:	ee08 7a10 	vmov	s16, r7
 80068b6:	4657      	mov	r7, sl
 80068b8:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80068bc:	f1a3 0b02 	sub.w	fp, r3, #2
 80068c0:	2500      	movs	r5, #0
 80068c2:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80068c6:	2000      	movs	r0, #0
 80068c8:	f002 fb7c 	bl	8008fc4 <taabe312>
 80068cc:	45aa      	cmp	sl, r5
 80068ce:	f82b 0f02 	strh.w	r0, [fp, #2]!
 80068d2:	f105 0501 	add.w	r5, r5, #1
 80068d6:	d1f4      	bne.n	80068c2 <pv_rhino_process.part.0+0x15e>
 80068d8:	ee18 7a10 	vmov	r7, s16
 80068dc:	9902      	ldr	r1, [sp, #8]
 80068de:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80068e2:	f9b1 3000 	ldrsh.w	r3, [r1]
 80068e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	f04f 0a01 	mov.w	sl, #1
 80068ee:	f303 030f 	ssat	r3, #16, r3
 80068f2:	f10d 0217 	add.w	r2, sp, #23
 80068f6:	800b      	strh	r3, [r1, #0]
 80068f8:	f88d a017 	strb.w	sl, [sp, #23]
 80068fc:	f000 ff38 	bl	8007770 <taabe466>
 8006900:	4605      	mov	r5, r0
 8006902:	2800      	cmp	r0, #0
 8006904:	d14d      	bne.n	80069a2 <pv_rhino_process.part.0+0x23e>
 8006906:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d05a      	beq.n	80069c4 <pv_rhino_process.part.0+0x260>
 800690e:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006912:	b11b      	cbz	r3, 800691c <pv_rhino_process.part.0+0x1b8>
 8006914:	f898 3000 	ldrb.w	r3, [r8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d042      	beq.n	80069a2 <pv_rhino_process.part.0+0x23e>
 800691c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800691e:	f001 fbcd 	bl	80080bc <taabe347>
 8006922:	2800      	cmp	r0, #0
 8006924:	d03d      	beq.n	80069a2 <pv_rhino_process.part.0+0x23e>
 8006926:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800692a:	2b00      	cmp	r3, #0
 800692c:	d039      	beq.n	80069a2 <pv_rhino_process.part.0+0x23e>
 800692e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006930:	b12b      	cbz	r3, 800693e <pv_rhino_process.part.0+0x1da>
 8006932:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006934:	f003 fb66 	bl	800a004 <free>
 8006938:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800693a:	f003 fb63 	bl	800a004 <free>
 800693e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006946:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800694a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800694e:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8006952:	f001 fc01 	bl	8008158 <taabe129>
 8006956:	b320      	cbz	r0, 80069a2 <pv_rhino_process.part.0+0x23e>
 8006958:	4605      	mov	r5, r0
 800695a:	9902      	ldr	r1, [sp, #8]
 800695c:	4638      	mov	r0, r7
 800695e:	f001 fed1 	bl	8008704 <taabe22>
 8006962:	4649      	mov	r1, r9
 8006964:	4638      	mov	r0, r7
 8006966:	f001 fecd 	bl	8008704 <taabe22>
 800696a:	4631      	mov	r1, r6
 800696c:	4638      	mov	r0, r7
 800696e:	f001 fec9 	bl	8008704 <taabe22>
 8006972:	4628      	mov	r0, r5
 8006974:	b007      	add	sp, #28
 8006976:	ecbd 8b02 	vpop	{d8}
 800697a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697e:	4649      	mov	r1, r9
 8006980:	4638      	mov	r0, r7
 8006982:	f001 febf 	bl	8008704 <taabe22>
 8006986:	4631      	mov	r1, r6
 8006988:	4638      	mov	r0, r7
 800698a:	f001 febb 	bl	8008704 <taabe22>
 800698e:	2501      	movs	r5, #1
 8006990:	4628      	mov	r0, r5
 8006992:	b007      	add	sp, #28
 8006994:	ecbd 8b02 	vpop	{d8}
 8006998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699c:	f888 5000 	strb.w	r5, [r8]
 80069a0:	e7df      	b.n	8006962 <pv_rhino_process.part.0+0x1fe>
 80069a2:	9902      	ldr	r1, [sp, #8]
 80069a4:	4638      	mov	r0, r7
 80069a6:	f001 fead 	bl	8008704 <taabe22>
 80069aa:	e7da      	b.n	8006962 <pv_rhino_process.part.0+0x1fe>
 80069ac:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 80069b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80069b2:	e744      	b.n	800683e <pv_rhino_process.part.0+0xda>
 80069b4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80069b8:	bfd4      	ite	le
 80069ba:	f04f 0e00 	movle.w	lr, #0
 80069be:	f04f 0e01 	movgt.w	lr, #1
 80069c2:	e766      	b.n	8006892 <pv_rhino_process.part.0+0x12e>
 80069c4:	9902      	ldr	r1, [sp, #8]
 80069c6:	4638      	mov	r0, r7
 80069c8:	f001 fe9c 	bl	8008704 <taabe22>
 80069cc:	4649      	mov	r1, r9
 80069ce:	4638      	mov	r0, r7
 80069d0:	f001 fe98 	bl	8008704 <taabe22>
 80069d4:	4631      	mov	r1, r6
 80069d6:	4638      	mov	r0, r7
 80069d8:	f001 fe94 	bl	8008704 <taabe22>
 80069dc:	f888 a000 	strb.w	sl, [r8]
 80069e0:	e7c7      	b.n	8006972 <pv_rhino_process.part.0+0x20e>
 80069e2:	bf00      	nop

080069e4 <pv_rhino_parse_context>:
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	b084      	sub	sp, #16
 80069ea:	4d5d      	ldr	r5, [pc, #372]	; (8006b60 <pv_rhino_parse_context+0x17c>)
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4606      	mov	r6, r0
 80069f0:	4696      	mov	lr, r2
 80069f2:	469a      	mov	sl, r3
 80069f4:	1e44      	subs	r4, r0, #1
 80069f6:	2172      	movs	r1, #114	; 0x72
 80069f8:	e002      	b.n	8006a00 <pv_rhino_parse_context+0x1c>
 80069fa:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80069fe:	b161      	cbz	r1, 8006a1a <pv_rhino_parse_context+0x36>
 8006a00:	f814 cf01 	ldrb.w	ip, [r4, #1]!
 8006a04:	458c      	cmp	ip, r1
 8006a06:	d0f8      	beq.n	80069fa <pv_rhino_parse_context+0x16>
 8006a08:	4856      	ldr	r0, [pc, #344]	; (8006b64 <pv_rhino_parse_context+0x180>)
 8006a0a:	f002 f995 	bl	8008d38 <taabe250>
 8006a0e:	2403      	movs	r4, #3
 8006a10:	4620      	mov	r0, r4
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1a:	4d53      	ldr	r5, [pc, #332]	; (8006b68 <pv_rhino_parse_context+0x184>)
 8006a1c:	1d72      	adds	r2, r6, #5
 8006a1e:	1d31      	adds	r1, r6, #4
 8006a20:	2432      	movs	r4, #50	; 0x32
 8006a22:	e002      	b.n	8006a2a <pv_rhino_parse_context+0x46>
 8006a24:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8006a28:	b1ac      	cbz	r4, 8006a56 <pv_rhino_parse_context+0x72>
 8006a2a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	d0f8      	beq.n	8006a24 <pv_rhino_parse_context+0x40>
 8006a32:	f8d6 0005 	ldr.w	r0, [r6, #5]
 8006a36:	7911      	ldrb	r1, [r2, #4]
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	7239      	strb	r1, [r7, #8]
 8006a3e:	4a4a      	ldr	r2, [pc, #296]	; (8006b68 <pv_rhino_parse_context+0x184>)
 8006a40:	484a      	ldr	r0, [pc, #296]	; (8006b6c <pv_rhino_parse_context+0x188>)
 8006a42:	727b      	strb	r3, [r7, #9]
 8006a44:	1d39      	adds	r1, r7, #4
 8006a46:	f002 f977 	bl	8008d38 <taabe250>
 8006a4a:	2403      	movs	r4, #3
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a56:	f8d6 100a 	ldr.w	r1, [r6, #10]
 8006a5a:	2900      	cmp	r1, #0
 8006a5c:	dd57      	ble.n	8006b0e <pv_rhino_parse_context+0x12a>
 8006a5e:	290c      	cmp	r1, #12
 8006a60:	d14b      	bne.n	8006afa <pv_rhino_parse_context+0x116>
 8006a62:	f8d6 000e 	ldr.w	r0, [r6, #14]
 8006a66:	f8d6 1012 	ldr.w	r1, [r6, #18]
 8006a6a:	f8d6 2016 	ldr.w	r2, [r6, #22]
 8006a6e:	1d3b      	adds	r3, r7, #4
 8006a70:	c307      	stmia	r3!, {r0, r1, r2}
 8006a72:	483f      	ldr	r0, [pc, #252]	; (8006b70 <pv_rhino_parse_context+0x18c>)
 8006a74:	f107 0904 	add.w	r9, r7, #4
 8006a78:	466d      	mov	r5, sp
 8006a7a:	eba0 0009 	sub.w	r0, r0, r9
 8006a7e:	f107 0810 	add.w	r8, r7, #16
 8006a82:	464b      	mov	r3, r9
 8006a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a88:	5cc1      	ldrb	r1, [r0, r3]
 8006a8a:	4291      	cmp	r1, r2
 8006a8c:	d144      	bne.n	8006b18 <pv_rhino_parse_context+0x134>
 8006a8e:	4543      	cmp	r3, r8
 8006a90:	d1f8      	bne.n	8006a84 <pv_rhino_parse_context+0xa0>
 8006a92:	f04f 0821 	mov.w	r8, #33	; 0x21
 8006a96:	211a      	movs	r1, #26
 8006a98:	46ad      	mov	sp, r5
 8006a9a:	251d      	movs	r5, #29
 8006a9c:	4431      	add	r1, r6
 8006a9e:	4670      	mov	r0, lr
 8006aa0:	f001 fdbc 	bl	800861c <taabe267>
 8006aa4:	5973      	ldr	r3, [r6, r5]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	ddb1      	ble.n	8006a0e <pv_rhino_parse_context+0x2a>
 8006aaa:	eb03 0208 	add.w	r2, r3, r8
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f88a 3000 	strb.w	r3, [sl]
 8006ab4:	18b3      	adds	r3, r6, r2
 8006ab6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ab8:	6899      	ldr	r1, [r3, #8]
 8006aba:	f1a1 0101 	sub.w	r1, r1, #1
 8006abe:	fab1 f181 	clz	r1, r1
 8006ac2:	0949      	lsrs	r1, r1, #5
 8006ac4:	7001      	strb	r1, [r0, #0]
 8006ac6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006ac8:	68d9      	ldr	r1, [r3, #12]
 8006aca:	6001      	str	r1, [r0, #0]
 8006acc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	600b      	str	r3, [r1, #0]
 8006ad2:	6803      	ldr	r3, [r0, #0]
 8006ad4:	3317      	adds	r3, #23
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f102 0117 	add.w	r1, r2, #23
 8006adc:	f023 0303 	bic.w	r3, r3, #3
 8006ae0:	f021 0203 	bic.w	r2, r1, #3
 8006ae4:	4432      	add	r2, r6
 8006ae6:	441e      	add	r6, r3
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aee:	601e      	str	r6, [r3, #0]
 8006af0:	4620      	mov	r0, r4
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afa:	481e      	ldr	r0, [pc, #120]	; (8006b74 <pv_rhino_parse_context+0x190>)
 8006afc:	220c      	movs	r2, #12
 8006afe:	f002 f91b 	bl	8008d38 <taabe250>
 8006b02:	2403      	movs	r4, #3
 8006b04:	4620      	mov	r0, r4
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0e:	f04f 0815 	mov.w	r8, #21
 8006b12:	2511      	movs	r5, #17
 8006b14:	210e      	movs	r1, #14
 8006b16:	e7c1      	b.n	8006a9c <pv_rhino_parse_context+0xb8>
 8006b18:	4817      	ldr	r0, [pc, #92]	; (8006b78 <pv_rhino_parse_context+0x194>)
 8006b1a:	4c18      	ldr	r4, [pc, #96]	; (8006b7c <pv_rhino_parse_context+0x198>)
 8006b1c:	f002 f90c 	bl	8008d38 <taabe250>
 8006b20:	4817      	ldr	r0, [pc, #92]	; (8006b80 <pv_rhino_parse_context+0x19c>)
 8006b22:	f002 f909 	bl	8008d38 <taabe250>
 8006b26:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f002 f904 	bl	8008d38 <taabe250>
 8006b30:	45c8      	cmp	r8, r9
 8006b32:	d1f8      	bne.n	8006b26 <pv_rhino_parse_context+0x142>
 8006b34:	4813      	ldr	r0, [pc, #76]	; (8006b84 <pv_rhino_parse_context+0x1a0>)
 8006b36:	4c14      	ldr	r4, [pc, #80]	; (8006b88 <pv_rhino_parse_context+0x1a4>)
 8006b38:	4e14      	ldr	r6, [pc, #80]	; (8006b8c <pv_rhino_parse_context+0x1a8>)
 8006b3a:	f002 f8fd 	bl	8008d38 <taabe250>
 8006b3e:	4814      	ldr	r0, [pc, #80]	; (8006b90 <pv_rhino_parse_context+0x1ac>)
 8006b40:	f002 f8fa 	bl	8008d38 <taabe250>
 8006b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b48:	480c      	ldr	r0, [pc, #48]	; (8006b7c <pv_rhino_parse_context+0x198>)
 8006b4a:	f002 f8f5 	bl	8008d38 <taabe250>
 8006b4e:	42b4      	cmp	r4, r6
 8006b50:	d1f8      	bne.n	8006b44 <pv_rhino_parse_context+0x160>
 8006b52:	480c      	ldr	r0, [pc, #48]	; (8006b84 <pv_rhino_parse_context+0x1a0>)
 8006b54:	f002 f8f0 	bl	8008d38 <taabe250>
 8006b58:	2403      	movs	r4, #3
 8006b5a:	46ad      	mov	sp, r5
 8006b5c:	e7c8      	b.n	8006af0 <pv_rhino_parse_context+0x10c>
 8006b5e:	bf00      	nop
 8006b60:	0800d480 	.word	0x0800d480
 8006b64:	0800d59c 	.word	0x0800d59c
 8006b68:	0800d400 	.word	0x0800d400
 8006b6c:	0800d528 	.word	0x0800d528
 8006b70:	1fff7a0f 	.word	0x1fff7a0f
 8006b74:	0800d488 	.word	0x0800d488
 8006b78:	0800d4f0 	.word	0x0800d4f0
 8006b7c:	0800d2f8 	.word	0x0800d2f8
 8006b80:	0800d3e8 	.word	0x0800d3e8
 8006b84:	0800d598 	.word	0x0800d598
 8006b88:	1fff7a10 	.word	0x1fff7a10
 8006b8c:	1fff7a1c 	.word	0x1fff7a1c
 8006b90:	0800d300 	.word	0x0800d300

08006b94 <taabe279.part.0>:
 8006b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b98:	ed2d 8b02 	vpush	{d8}
 8006b9c:	b090      	sub	sp, #64	; 0x40
 8006b9e:	4615      	mov	r5, r2
 8006ba0:	461e      	mov	r6, r3
 8006ba2:	2280      	movs	r2, #128	; 0x80
 8006ba4:	ab0b      	add	r3, sp, #44	; 0x2c
 8006ba6:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 8006baa:	f9bd 9070 	ldrsh.w	r9, [sp, #112]	; 0x70
 8006bae:	f9bd 8078 	ldrsh.w	r8, [sp, #120]	; 0x78
 8006bb2:	f89d a080 	ldrb.w	sl, [sp, #128]	; 0x80
 8006bb6:	eeb0 8a40 	vmov.f32	s16, s0
 8006bba:	f001 fd4d 	bl	8008658 <taabe653>
 8006bbe:	4604      	mov	r4, r0
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	f040 80b7 	bne.w	8006d34 <taabe279.part.0+0x1a0>
 8006bc6:	2d00      	cmp	r5, #0
 8006bc8:	f000 80ba 	beq.w	8006d40 <taabe279.part.0+0x1ac>
 8006bcc:	2e00      	cmp	r6, #0
 8006bce:	f340 80b7 	ble.w	8006d40 <taabe279.part.0+0x1ac>
 8006bd2:	4b84      	ldr	r3, [pc, #528]	; (8006de4 <taabe279.part.0+0x250>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006be0:	ab0f      	add	r3, sp, #60	; 0x3c
 8006be2:	9304      	str	r3, [sp, #16]
 8006be4:	ab0e      	add	r3, sp, #56	; 0x38
 8006be6:	9303      	str	r3, [sp, #12]
 8006be8:	ab0d      	add	r3, sp, #52	; 0x34
 8006bea:	9302      	str	r3, [sp, #8]
 8006bec:	ab0c      	add	r3, sp, #48	; 0x30
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	f10d 0327 	add.w	r3, sp, #39	; 0x27
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8006bfe:	aa0a      	add	r2, sp, #40	; 0x28
 8006c00:	f7ff fef0 	bl	80069e4 <pv_rhino_parse_context>
 8006c04:	4604      	mov	r4, r0
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f040 80a7 	bne.w	8006d5a <taabe279.part.0+0x1c6>
 8006c0c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006c10:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c18:	f100 80ab 	bmi.w	8006d72 <taabe279.part.0+0x1de>
 8006c1c:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8006c20:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c28:	f300 80b0 	bgt.w	8006d8c <taabe279.part.0+0x1f8>
 8006c2c:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 8099 	bne.w	8006d68 <taabe279.part.0+0x1d4>
 8006c36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c38:	2201      	movs	r2, #1
 8006c3a:	6018      	str	r0, [r3, #0]
 8006c3c:	2154      	movs	r1, #84	; 0x54
 8006c3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006c40:	f001 fd2c 	bl	800869c <taabe284>
 8006c44:	4605      	mov	r5, r0
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f000 8081 	beq.w	8006d4e <taabe279.part.0+0x1ba>
 8006c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006c50:	61ab      	str	r3, [r5, #24]
 8006c52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c54:	6028      	str	r0, [r5, #0]
 8006c56:	61eb      	str	r3, [r5, #28]
 8006c58:	1d2a      	adds	r2, r5, #4
 8006c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c5e:	f001 fd6b 	bl	8008738 <taabe734>
 8006c62:	4604      	mov	r4, r0
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d174      	bne.n	8006d52 <taabe279.part.0+0x1be>
 8006c68:	495f      	ldr	r1, [pc, #380]	; (8006de8 <taabe279.part.0+0x254>)
 8006c6a:	4860      	ldr	r0, [pc, #384]	; (8006dec <taabe279.part.0+0x258>)
 8006c6c:	60a9      	str	r1, [r5, #8]
 8006c6e:	6528      	str	r0, [r5, #80]	; 0x50
 8006c70:	3110      	adds	r1, #16
 8006c72:	f001 fce9 	bl	8008648 <taabe525>
 8006c76:	68a9      	ldr	r1, [r5, #8]
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	f000 8094 	beq.w	8006da6 <taabe279.part.0+0x212>
 8006c7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006c80:	f105 020c 	add.w	r2, r5, #12
 8006c84:	f002 fa88 	bl	8009198 <taabe194>
 8006c88:	4604      	mov	r4, r0
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d161      	bne.n	8006d52 <taabe279.part.0+0x1be>
 8006c8e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006c90:	a90a      	add	r1, sp, #40	; 0x28
 8006c92:	f001 fcd9 	bl	8008648 <taabe525>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f000 8094 	beq.w	8006dc4 <taabe279.part.0+0x230>
 8006c9c:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006c9e:	f001 fccf 	bl	8008640 <taabe248>
 8006ca2:	f105 0220 	add.w	r2, r5, #32
 8006ca6:	6128      	str	r0, [r5, #16]
 8006ca8:	82af      	strh	r7, [r5, #20]
 8006caa:	ab0a      	add	r3, sp, #40	; 0x28
 8006cac:	9200      	str	r2, [sp, #0]
 8006cae:	e9dd 120b 	ldrd	r1, r2, [sp, #44]	; 0x2c
 8006cb2:	f000 f98b 	bl	8006fcc <taabe616>
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d14a      	bne.n	8006d52 <taabe279.part.0+0x1be>
 8006cbc:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8006cc0:	6a29      	ldr	r1, [r5, #32]
 8006cc2:	9204      	str	r2, [sp, #16]
 8006cc4:	69ea      	ldr	r2, [r5, #28]
 8006cc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006cc8:	e9cd 8202 	strd	r8, r2, [sp, #8]
 8006ccc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006cce:	464b      	mov	r3, r9
 8006cd0:	e9cd 7200 	strd	r7, r2, [sp]
 8006cd4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006cd6:	f000 fcdb 	bl	8007690 <taabe64>
 8006cda:	4604      	mov	r4, r0
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d138      	bne.n	8006d52 <taabe279.part.0+0x1be>
 8006ce0:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
 8006ce4:	f7fe fb82 	bl	80053ec <taabe431>
 8006ce8:	ee07 0a90 	vmov	s15, r0
 8006cec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8006cf0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006cf2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006cfc:	ee17 1a90 	vmov	r1, s15
 8006d00:	2900      	cmp	r1, #0
 8006d02:	bfb8      	it	lt
 8006d04:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8006d08:	1249      	asrs	r1, r1, #9
 8006d0a:	64a9      	str	r1, [r5, #72]	; 0x48
 8006d0c:	0089      	lsls	r1, r1, #2
 8006d0e:	f001 fcc5 	bl	800869c <taabe284>
 8006d12:	62e8      	str	r0, [r5, #44]	; 0x2c
 8006d14:	2800      	cmp	r0, #0
 8006d16:	d05f      	beq.n	8006dd8 <taabe279.part.0+0x244>
 8006d18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006d1c:	632b      	str	r3, [r5, #48]	; 0x30
 8006d1e:	2201      	movs	r2, #1
 8006d20:	2140      	movs	r1, #64	; 0x40
 8006d22:	f001 fcbb 	bl	800869c <taabe284>
 8006d26:	6368      	str	r0, [r5, #52]	; 0x34
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d055      	beq.n	8006dd8 <taabe279.part.0+0x244>
 8006d2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d2e:	f885 a04c 	strb.w	sl, [r5, #76]	; 0x4c
 8006d32:	601d      	str	r5, [r3, #0]
 8006d34:	4620      	mov	r0, r4
 8006d36:	b010      	add	sp, #64	; 0x40
 8006d38:	ecbd 8b02 	vpop	{d8}
 8006d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d40:	2403      	movs	r4, #3
 8006d42:	4620      	mov	r0, r4
 8006d44:	b010      	add	sp, #64	; 0x40
 8006d46:	ecbd 8b02 	vpop	{d8}
 8006d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d4e:	2401      	movs	r4, #1
 8006d50:	e7f0      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006d52:	4628      	mov	r0, r5
 8006d54:	f7ff fce8 	bl	8006728 <pv_rhino_delete.part.0>
 8006d58:	e7ec      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006d5a:	f7fe fb4b 	bl	80053f4 <pv_status_to_string>
 8006d5e:	4601      	mov	r1, r0
 8006d60:	4823      	ldr	r0, [pc, #140]	; (8006df0 <taabe279.part.0+0x25c>)
 8006d62:	f001 ffe9 	bl	8008d38 <taabe250>
 8006d66:	e7e5      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006d68:	4822      	ldr	r0, [pc, #136]	; (8006df4 <taabe279.part.0+0x260>)
 8006d6a:	f001 ffe5 	bl	8008d38 <taabe250>
 8006d6e:	2403      	movs	r4, #3
 8006d70:	e7e0      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006d72:	ee18 0a10 	vmov	r0, s16
 8006d76:	f7f9 fbf7 	bl	8000568 <__aeabi_f2d>
 8006d7a:	4b1f      	ldr	r3, [pc, #124]	; (8006df8 <taabe279.part.0+0x264>)
 8006d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8006d80:	2200      	movs	r2, #0
 8006d82:	481e      	ldr	r0, [pc, #120]	; (8006dfc <taabe279.part.0+0x268>)
 8006d84:	f001 ffd8 	bl	8008d38 <taabe250>
 8006d88:	2403      	movs	r4, #3
 8006d8a:	e7d3      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006d8c:	ee18 0a10 	vmov	r0, s16
 8006d90:	f7f9 fbea 	bl	8000568 <__aeabi_f2d>
 8006d94:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <taabe279.part.0+0x26c>)
 8006d96:	e9cd 0100 	strd	r0, r1, [sp]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4819      	ldr	r0, [pc, #100]	; (8006e04 <taabe279.part.0+0x270>)
 8006d9e:	f001 ffcb 	bl	8008d38 <taabe250>
 8006da2:	2403      	movs	r4, #3
 8006da4:	e7c6      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006da6:	3110      	adds	r1, #16
 8006da8:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006daa:	9107      	str	r1, [sp, #28]
 8006dac:	f001 fc46 	bl	800863c <taabe592>
 8006db0:	9907      	ldr	r1, [sp, #28]
 8006db2:	4602      	mov	r2, r0
 8006db4:	4814      	ldr	r0, [pc, #80]	; (8006e08 <taabe279.part.0+0x274>)
 8006db6:	f001 ffbf 	bl	8008d38 <taabe250>
 8006dba:	4628      	mov	r0, r5
 8006dbc:	f7ff fcb4 	bl	8006728 <pv_rhino_delete.part.0>
 8006dc0:	2403      	movs	r4, #3
 8006dc2:	e7b7      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006dc4:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8006dc6:	f001 fc39 	bl	800863c <taabe592>
 8006dca:	a90a      	add	r1, sp, #40	; 0x28
 8006dcc:	4602      	mov	r2, r0
 8006dce:	480f      	ldr	r0, [pc, #60]	; (8006e0c <taabe279.part.0+0x278>)
 8006dd0:	f001 ffb2 	bl	8008d38 <taabe250>
 8006dd4:	2403      	movs	r4, #3
 8006dd6:	e7ad      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f7ff fca5 	bl	8006728 <pv_rhino_delete.part.0>
 8006dde:	2401      	movs	r4, #1
 8006de0:	e7a8      	b.n	8006d34 <taabe279.part.0+0x1a0>
 8006de2:	bf00      	nop
 8006de4:	0800d100 	.word	0x0800d100
 8006de8:	0800eff4 	.word	0x0800eff4
 8006dec:	0800d788 	.word	0x0800d788
 8006df0:	0800d5cc 	.word	0x0800d5cc
 8006df4:	0800d660 	.word	0x0800d660
 8006df8:	3fe00000 	.word	0x3fe00000
 8006dfc:	0800d5f8 	.word	0x0800d5f8
 8006e00:	40140000 	.word	0x40140000
 8006e04:	0800d62c 	.word	0x0800d62c
 8006e08:	0800d21c 	.word	0x0800d21c
 8006e0c:	0800d6a0 	.word	0x0800d6a0

08006e10 <pv_rhino_init>:
 8006e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e12:	ed2d 8b02 	vpush	{d8}
 8006e16:	b089      	sub	sp, #36	; 0x24
 8006e18:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d04b      	beq.n	8006eb8 <pv_rhino_init+0xa8>
 8006e20:	460c      	mov	r4, r1
 8006e22:	4616      	mov	r6, r2
 8006e24:	461d      	mov	r5, r3
 8006e26:	eeb0 8a40 	vmov.f32	s16, s0
 8006e2a:	eef0 8a60 	vmov.f32	s17, s1
 8006e2e:	f001 ff69 	bl	8008d04 <taabe695>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d141      	bne.n	8006eba <pv_rhino_init+0xaa>
 8006e36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	d43b      	bmi.n	8006eb8 <pv_rhino_init+0xa8>
 8006e40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006e44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4c:	dc34      	bgt.n	8006eb8 <pv_rhino_init+0xa8>
 8006e4e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e50:	b393      	cbz	r3, 8006eb8 <pv_rhino_init+0xa8>
 8006e52:	6018      	str	r0, [r3, #0]
 8006e54:	b384      	cbz	r4, 8006eb8 <pv_rhino_init+0xa8>
 8006e56:	2e00      	cmp	r6, #0
 8006e58:	dd2e      	ble.n	8006eb8 <pv_rhino_init+0xa8>
 8006e5a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006e5e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006e62:	eddf 6a18 	vldr	s13, [pc, #96]	; 8006ec4 <pv_rhino_init+0xb4>
 8006e66:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006ec8 <pv_rhino_init+0xb8>
 8006e6a:	4a18      	ldr	r2, [pc, #96]	; (8006ecc <pv_rhino_init+0xbc>)
 8006e6c:	9307      	str	r3, [sp, #28]
 8006e6e:	ee38 8a08 	vadd.f32	s16, s16, s16
 8006e72:	2308      	movs	r3, #8
 8006e74:	eee8 7a26 	vfma.f32	s15, s16, s13
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006e7e:	eeb0 0a68 	vmov.f32	s0, s17
 8006e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e86:	9706      	str	r7, [sp, #24]
 8006e88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e8c:	ee17 1a90 	vmov	r1, s15
 8006e90:	b208      	sxth	r0, r1
 8006e92:	e9cd 0204 	strd	r0, r2, [sp, #16]
 8006e96:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8006e9a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	462a      	mov	r2, r5
 8006ea6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ea8:	4631      	mov	r1, r6
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f7ff fe72 	bl	8006b94 <taabe279.part.0>
 8006eb0:	b009      	add	sp, #36	; 0x24
 8006eb2:	ecbd 8b02 	vpop	{d8}
 8006eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb8:	2003      	movs	r0, #3
 8006eba:	b009      	add	sp, #36	; 0x24
 8006ebc:	ecbd 8b02 	vpop	{d8}
 8006ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	3e99999a 	.word	0x3e99999a
 8006ec8:	44c00000 	.word	0x44c00000
 8006ecc:	73333300 	.word	0x73333300

08006ed0 <pv_rhino_delete>:
 8006ed0:	b108      	cbz	r0, 8006ed6 <pv_rhino_delete+0x6>
 8006ed2:	f7ff bc29 	b.w	8006728 <pv_rhino_delete.part.0>
 8006ed6:	4770      	bx	lr

08006ed8 <pv_rhino_process>:
 8006ed8:	b150      	cbz	r0, 8006ef0 <pv_rhino_process+0x18>
 8006eda:	b149      	cbz	r1, 8006ef0 <pv_rhino_process+0x18>
 8006edc:	b410      	push	{r4}
 8006ede:	b11a      	cbz	r2, 8006ee8 <pv_rhino_process+0x10>
 8006ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ee4:	f7ff bc3e 	b.w	8006764 <pv_rhino_process.part.0>
 8006ee8:	2003      	movs	r0, #3
 8006eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	2003      	movs	r0, #3
 8006ef2:	4770      	bx	lr

08006ef4 <pv_rhino_is_understood>:
 8006ef4:	b138      	cbz	r0, 8006f06 <pv_rhino_is_understood+0x12>
 8006ef6:	b131      	cbz	r1, 8006f06 <pv_rhino_is_understood+0x12>
 8006ef8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006efa:	2000      	movs	r0, #0
 8006efc:	1a1b      	subs	r3, r3, r0
 8006efe:	bf18      	it	ne
 8006f00:	2301      	movne	r3, #1
 8006f02:	700b      	strb	r3, [r1, #0]
 8006f04:	4770      	bx	lr
 8006f06:	2003      	movs	r0, #3
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop

08006f0c <pv_rhino_get_intent>:
 8006f0c:	b430      	push	{r4, r5}
 8006f0e:	9c02      	ldr	r4, [sp, #8]
 8006f10:	b178      	cbz	r0, 8006f32 <pv_rhino_get_intent+0x26>
 8006f12:	b171      	cbz	r1, 8006f32 <pv_rhino_get_intent+0x26>
 8006f14:	b16a      	cbz	r2, 8006f32 <pv_rhino_get_intent+0x26>
 8006f16:	b163      	cbz	r3, 8006f32 <pv_rhino_get_intent+0x26>
 8006f18:	b15c      	cbz	r4, 8006f32 <pv_rhino_get_intent+0x26>
 8006f1a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8006f1c:	b165      	cbz	r5, 8006f38 <pv_rhino_get_intent+0x2c>
 8006f1e:	600d      	str	r5, [r1, #0]
 8006f20:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8006f22:	6011      	str	r1, [r2, #0]
 8006f24:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	2000      	movs	r0, #0
 8006f2e:	bc30      	pop	{r4, r5}
 8006f30:	4770      	bx	lr
 8006f32:	2003      	movs	r0, #3
 8006f34:	bc30      	pop	{r4, r5}
 8006f36:	4770      	bx	lr
 8006f38:	2006      	movs	r0, #6
 8006f3a:	e7f8      	b.n	8006f2e <pv_rhino_get_intent+0x22>

08006f3c <pv_rhino_free_slots_and_values>:
 8006f3c:	b148      	cbz	r0, 8006f52 <pv_rhino_free_slots_and_values+0x16>
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	4608      	mov	r0, r1
 8006f42:	4614      	mov	r4, r2
 8006f44:	f003 f85e 	bl	800a004 <free>
 8006f48:	4620      	mov	r0, r4
 8006f4a:	f003 f85b 	bl	800a004 <free>
 8006f4e:	2000      	movs	r0, #0
 8006f50:	bd10      	pop	{r4, pc}
 8006f52:	2003      	movs	r0, #3
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop

08006f58 <pv_rhino_reset>:
 8006f58:	b320      	cbz	r0, 8006fa4 <pv_rhino_reset+0x4c>
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	6840      	ldr	r0, [r0, #4]
 8006f60:	f001 fd1a 	bl	8008998 <taabe57>
 8006f64:	68e0      	ldr	r0, [r4, #12]
 8006f66:	f002 f9cd 	bl	8009304 <taabe51>
 8006f6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f6c:	f001 f9d0 	bl	8008310 <taabe599>
 8006f70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006f74:	2300      	movs	r3, #0
 8006f76:	4299      	cmp	r1, r3
 8006f78:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 8006f7c:	dd07      	ble.n	8006f8e <pv_rhino_reset+0x36>
 8006f7e:	3a04      	subs	r2, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f86:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4299      	cmp	r1, r3
 8006f8c:	dcf9      	bgt.n	8006f82 <pv_rhino_reset+0x2a>
 8006f8e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006f90:	2240      	movs	r2, #64	; 0x40
 8006f92:	2100      	movs	r1, #0
 8006f94:	f003 f866 	bl	800a064 <memset>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	e9c4 000e 	strd	r0, r0, [r4, #56]	; 0x38
 8006f9e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
 8006fa2:	bd10      	pop	{r4, pc}
 8006fa4:	2003      	movs	r0, #3
 8006fa6:	4770      	bx	lr

08006fa8 <pv_rhino_context_info>:
 8006fa8:	b150      	cbz	r0, 8006fc0 <pv_rhino_context_info+0x18>
 8006faa:	b510      	push	{r4, lr}
 8006fac:	460c      	mov	r4, r1
 8006fae:	b129      	cbz	r1, 8006fbc <pv_rhino_context_info+0x14>
 8006fb0:	6a00      	ldr	r0, [r0, #32]
 8006fb2:	f000 f9fd 	bl	80073b0 <taabe604>
 8006fb6:	6020      	str	r0, [r4, #0]
 8006fb8:	2000      	movs	r0, #0
 8006fba:	bd10      	pop	{r4, pc}
 8006fbc:	2003      	movs	r0, #3
 8006fbe:	bd10      	pop	{r4, pc}
 8006fc0:	2003      	movs	r0, #3
 8006fc2:	4770      	bx	lr

08006fc4 <taabe217.part.0>:
 8006fc4:	4601      	mov	r1, r0
 8006fc6:	6800      	ldr	r0, [r0, #0]
 8006fc8:	f001 bb9c 	b.w	8008704 <taabe22>

08006fcc <taabe616>:
 8006fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	4680      	mov	r8, r0
 8006fd8:	2201      	movs	r2, #1
 8006fda:	2158      	movs	r1, #88	; 0x58
 8006fdc:	4628      	mov	r0, r5
 8006fde:	461f      	mov	r7, r3
 8006fe0:	f001 fb5c 	bl	800869c <taabe284>
 8006fe4:	2800      	cmp	r0, #0
 8006fe6:	d07c      	beq.n	80070e2 <taabe616+0x116>
 8006fe8:	4606      	mov	r6, r0
 8006fea:	4639      	mov	r1, r7
 8006fec:	f840 5b54 	str.w	r5, [r0], #84
 8006ff0:	f001 fb14 	bl	800861c <taabe267>
 8006ff4:	6074      	str	r4, [r6, #4]
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f7f9 f8f4 	bl	80001e4 <strlen>
 8006ffc:	3004      	adds	r0, #4
 8006ffe:	f020 0003 	bic.w	r0, r0, #3
 8007002:	eb04 0900 	add.w	r9, r4, r0
 8007006:	5824      	ldr	r4, [r4, r0]
 8007008:	60b4      	str	r4, [r6, #8]
 800700a:	2c00      	cmp	r4, #0
 800700c:	d061      	beq.n	80070d2 <taabe616+0x106>
 800700e:	f8d9 5004 	ldr.w	r5, [r9, #4]
 8007012:	f109 0704 	add.w	r7, r9, #4
 8007016:	60f7      	str	r7, [r6, #12]
 8007018:	2d00      	cmp	r5, #0
 800701a:	d15a      	bne.n	80070d2 <taabe616+0x106>
 800701c:	46ba      	mov	sl, r7
 800701e:	46bc      	mov	ip, r7
 8007020:	4629      	mov	r1, r5
 8007022:	2001      	movs	r0, #1
 8007024:	460b      	mov	r3, r1
 8007026:	f85c 1f04 	ldr.w	r1, [ip, #4]!
 800702a:	3302      	adds	r3, #2
 800702c:	4299      	cmp	r1, r3
 800702e:	f100 0001 	add.w	r0, r0, #1
 8007032:	d34e      	bcc.n	80070d2 <taabe616+0x106>
 8007034:	4284      	cmp	r4, r0
 8007036:	d2f5      	bcs.n	8007024 <taabe616+0x58>
 8007038:	1c63      	adds	r3, r4, #1
 800703a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	6137      	str	r7, [r6, #16]
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	f04f 0b00 	mov.w	fp, #0
 800704a:	eb07 000b 	add.w	r0, r7, fp
 800704e:	f7f9 f8c9 	bl	80001e4 <strlen>
 8007052:	4659      	mov	r1, fp
 8007054:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8007058:	3001      	adds	r0, #1
 800705a:	ebab 0101 	sub.w	r1, fp, r1
 800705e:	4288      	cmp	r0, r1
 8007060:	f105 0501 	add.w	r5, r5, #1
 8007064:	d135      	bne.n	80070d2 <taabe616+0x106>
 8007066:	42ac      	cmp	r4, r5
 8007068:	d1ef      	bne.n	800704a <taabe616+0x7e>
 800706a:	9b01      	ldr	r3, [sp, #4]
 800706c:	9a00      	ldr	r2, [sp, #0]
 800706e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007072:	3303      	adds	r3, #3
 8007074:	f023 0303 	bic.w	r3, r3, #3
 8007078:	eb07 0c03 	add.w	ip, r7, r3
 800707c:	58fb      	ldr	r3, [r7, r3]
 800707e:	f8c6 c014 	str.w	ip, [r6, #20]
 8007082:	1f17      	subs	r7, r2, #4
 8007084:	bb2b      	cbnz	r3, 80070d2 <taabe616+0x106>
 8007086:	4661      	mov	r1, ip
 8007088:	2201      	movs	r2, #1
 800708a:	e000      	b.n	800708e <taabe616+0xc2>
 800708c:	462a      	mov	r2, r5
 800708e:	4618      	mov	r0, r3
 8007090:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8007094:	4283      	cmp	r3, r0
 8007096:	f102 0501 	add.w	r5, r2, #1
 800709a:	d91a      	bls.n	80070d2 <taabe616+0x106>
 800709c:	4294      	cmp	r4, r2
 800709e:	d1f5      	bne.n	800708c <taabe616+0xc0>
 80070a0:	f85c 7007 	ldr.w	r7, [ip, r7]
 80070a4:	9b01      	ldr	r3, [sp, #4]
 80070a6:	9d00      	ldr	r5, [sp, #0]
 80070a8:	61b7      	str	r7, [r6, #24]
 80070aa:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80070ae:	4465      	add	r5, ip
 80070b0:	61f5      	str	r5, [r6, #28]
 80070b2:	b973      	cbnz	r3, 80070d2 <taabe616+0x106>
 80070b4:	2f00      	cmp	r7, #0
 80070b6:	f000 8101 	beq.w	80072bc <taabe616+0x2f0>
 80070ba:	4629      	mov	r1, r5
 80070bc:	2201      	movs	r2, #1
 80070be:	e001      	b.n	80070c4 <taabe616+0xf8>
 80070c0:	4297      	cmp	r7, r2
 80070c2:	d312      	bcc.n	80070ea <taabe616+0x11e>
 80070c4:	4618      	mov	r0, r3
 80070c6:	f851 3f04 	ldr.w	r3, [r1, #4]!
 80070ca:	4283      	cmp	r3, r0
 80070cc:	f102 0201 	add.w	r2, r2, #1
 80070d0:	d8f6      	bhi.n	80070c0 <taabe616+0xf4>
 80070d2:	6830      	ldr	r0, [r6, #0]
 80070d4:	4631      	mov	r1, r6
 80070d6:	f001 fb15 	bl	8008704 <taabe22>
 80070da:	2003      	movs	r0, #3
 80070dc:	b003      	add	sp, #12
 80070de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070e2:	2001      	movs	r0, #1
 80070e4:	b003      	add	sp, #12
 80070e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ea:	3701      	adds	r7, #1
 80070ec:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80070f0:	6235      	str	r5, [r6, #32]
 80070f2:	f855 0c04 	ldr.w	r0, [r5, #-4]
 80070f6:	b170      	cbz	r0, 8007116 <taabe616+0x14a>
 80070f8:	1e41      	subs	r1, r0, #1
 80070fa:	4429      	add	r1, r5
 80070fc:	1e6b      	subs	r3, r5, #1
 80070fe:	e001      	b.n	8007104 <taabe616+0x138>
 8007100:	4299      	cmp	r1, r3
 8007102:	d004      	beq.n	800710e <taabe616+0x142>
 8007104:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8007108:	4542      	cmp	r2, r8
 800710a:	ddf9      	ble.n	8007100 <taabe616+0x134>
 800710c:	e7e1      	b.n	80070d2 <taabe616+0x106>
 800710e:	1cc3      	adds	r3, r0, #3
 8007110:	f023 0303 	bic.w	r3, r3, #3
 8007114:	441d      	add	r5, r3
 8007116:	682f      	ldr	r7, [r5, #0]
 8007118:	6277      	str	r7, [r6, #36]	; 0x24
 800711a:	2f00      	cmp	r7, #0
 800711c:	d0d9      	beq.n	80070d2 <taabe616+0x106>
 800711e:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8007122:	f105 0e04 	add.w	lr, r5, #4
 8007126:	f8c6 e028 	str.w	lr, [r6, #40]	; 0x28
 800712a:	f1bc 0f00 	cmp.w	ip, #0
 800712e:	d1d0      	bne.n	80070d2 <taabe616+0x106>
 8007130:	4671      	mov	r1, lr
 8007132:	4663      	mov	r3, ip
 8007134:	2201      	movs	r2, #1
 8007136:	4618      	mov	r0, r3
 8007138:	f851 3f04 	ldr.w	r3, [r1, #4]!
 800713c:	4283      	cmp	r3, r0
 800713e:	f102 0201 	add.w	r2, r2, #1
 8007142:	d9c6      	bls.n	80070d2 <taabe616+0x106>
 8007144:	4297      	cmp	r7, r2
 8007146:	d2f6      	bcs.n	8007136 <taabe616+0x16a>
 8007148:	f107 0801 	add.w	r8, r7, #1
 800714c:	eb0e 0088 	add.w	r0, lr, r8, lsl #2
 8007150:	f855 1028 	ldr.w	r1, [r5, r8, lsl #2]
 8007154:	62f0      	str	r0, [r6, #44]	; 0x2c
 8007156:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800715a:	f1a8 0304 	sub.w	r3, r8, #4
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	b151      	cbz	r1, 8007178 <taabe616+0x1ac>
 8007162:	1f03      	subs	r3, r0, #4
 8007164:	e001      	b.n	800716a <taabe616+0x19e>
 8007166:	458c      	cmp	ip, r1
 8007168:	d006      	beq.n	8007178 <taabe616+0x1ac>
 800716a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800716e:	4294      	cmp	r4, r2
 8007170:	f10c 0c01 	add.w	ip, ip, #1
 8007174:	d8f7      	bhi.n	8007166 <taabe616+0x19a>
 8007176:	e7ac      	b.n	80070d2 <taabe616+0x106>
 8007178:	f850 a021 	ldr.w	sl, [r0, r1, lsl #2]
 800717c:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8007180:	6374      	str	r4, [r6, #52]	; 0x34
 8007182:	f1ba 0f00 	cmp.w	sl, #0
 8007186:	f040 8094 	bne.w	80072b2 <taabe616+0x2e6>
 800718a:	46a3      	mov	fp, r4
 800718c:	4621      	mov	r1, r4
 800718e:	4652      	mov	r2, sl
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <taabe616+0x1ca>
 8007194:	4603      	mov	r3, r0
 8007196:	4694      	mov	ip, r2
 8007198:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800719c:	4562      	cmp	r2, ip
 800719e:	f103 0001 	add.w	r0, r3, #1
 80071a2:	d996      	bls.n	80070d2 <taabe616+0x106>
 80071a4:	429f      	cmp	r7, r3
 80071a6:	d1f5      	bne.n	8007194 <taabe616+0x1c8>
 80071a8:	eb04 0508 	add.w	r5, r4, r8
 80071ac:	6335      	str	r5, [r6, #48]	; 0x30
 80071ae:	f04f 0900 	mov.w	r9, #0
 80071b2:	eb05 0009 	add.w	r0, r5, r9
 80071b6:	f7f9 f815 	bl	80001e4 <strlen>
 80071ba:	464b      	mov	r3, r9
 80071bc:	f85b 9f04 	ldr.w	r9, [fp, #4]!
 80071c0:	3001      	adds	r0, #1
 80071c2:	eba9 0303 	sub.w	r3, r9, r3
 80071c6:	4298      	cmp	r0, r3
 80071c8:	f10a 0a01 	add.w	sl, sl, #1
 80071cc:	d171      	bne.n	80072b2 <taabe616+0x2e6>
 80071ce:	4557      	cmp	r7, sl
 80071d0:	d1ef      	bne.n	80071b2 <taabe616+0x1e6>
 80071d2:	9b00      	ldr	r3, [sp, #0]
 80071d4:	58e3      	ldr	r3, [r4, r3]
 80071d6:	3303      	adds	r3, #3
 80071d8:	f023 0303 	bic.w	r3, r3, #3
 80071dc:	18ec      	adds	r4, r5, r3
 80071de:	f855 a003 	ldr.w	sl, [r5, r3]
 80071e2:	63f4      	str	r4, [r6, #60]	; 0x3c
 80071e4:	f1ba 0f00 	cmp.w	sl, #0
 80071e8:	d163      	bne.n	80072b2 <taabe616+0x2e6>
 80071ea:	46a3      	mov	fp, r4
 80071ec:	4622      	mov	r2, r4
 80071ee:	2301      	movs	r3, #1
 80071f0:	e9d2 1000 	ldrd	r1, r0, [r2]
 80071f4:	4288      	cmp	r0, r1
 80071f6:	f103 0301 	add.w	r3, r3, #1
 80071fa:	f102 0204 	add.w	r2, r2, #4
 80071fe:	d958      	bls.n	80072b2 <taabe616+0x2e6>
 8007200:	429f      	cmp	r7, r3
 8007202:	d2f5      	bcs.n	80071f0 <taabe616+0x224>
 8007204:	44a0      	add	r8, r4
 8007206:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38
 800720a:	f04f 0900 	mov.w	r9, #0
 800720e:	eb08 0009 	add.w	r0, r8, r9
 8007212:	f7f8 ffe7 	bl	80001e4 <strlen>
 8007216:	464b      	mov	r3, r9
 8007218:	f85b 9f04 	ldr.w	r9, [fp, #4]!
 800721c:	3001      	adds	r0, #1
 800721e:	eba9 0303 	sub.w	r3, r9, r3
 8007222:	4298      	cmp	r0, r3
 8007224:	f10a 0a01 	add.w	sl, sl, #1
 8007228:	d143      	bne.n	80072b2 <taabe616+0x2e6>
 800722a:	4557      	cmp	r7, sl
 800722c:	d8ef      	bhi.n	800720e <taabe616+0x242>
 800722e:	9b00      	ldr	r3, [sp, #0]
 8007230:	58e3      	ldr	r3, [r4, r3]
 8007232:	3303      	adds	r3, #3
 8007234:	f023 0303 	bic.w	r3, r3, #3
 8007238:	eb08 0903 	add.w	r9, r8, r3
 800723c:	f858 5003 	ldr.w	r5, [r8, r3]
 8007240:	6435      	str	r5, [r6, #64]	; 0x40
 8007242:	b3b5      	cbz	r5, 80072b2 <taabe616+0x2e6>
 8007244:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8007248:	f109 0404 	add.w	r4, r9, #4
 800724c:	6474      	str	r4, [r6, #68]	; 0x44
 800724e:	bb87      	cbnz	r7, 80072b2 <taabe616+0x2e6>
 8007250:	46a0      	mov	r8, r4
 8007252:	4622      	mov	r2, r4
 8007254:	2301      	movs	r3, #1
 8007256:	e9d2 1000 	ldrd	r1, r0, [r2]
 800725a:	4288      	cmp	r0, r1
 800725c:	f103 0301 	add.w	r3, r3, #1
 8007260:	f102 0204 	add.w	r2, r2, #4
 8007264:	d925      	bls.n	80072b2 <taabe616+0x2e6>
 8007266:	429d      	cmp	r5, r3
 8007268:	d2f5      	bcs.n	8007256 <taabe616+0x28a>
 800726a:	f105 0a01 	add.w	sl, r5, #1
 800726e:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 8007272:	64b4      	str	r4, [r6, #72]	; 0x48
 8007274:	f8d8 b000 	ldr.w	fp, [r8]
 8007278:	eb04 000b 	add.w	r0, r4, fp
 800727c:	f7f8 ffb2 	bl	80001e4 <strlen>
 8007280:	f858 3f04 	ldr.w	r3, [r8, #4]!
 8007284:	3001      	adds	r0, #1
 8007286:	eba3 030b 	sub.w	r3, r3, fp
 800728a:	4298      	cmp	r0, r3
 800728c:	f107 0701 	add.w	r7, r7, #1
 8007290:	d10f      	bne.n	80072b2 <taabe616+0x2e6>
 8007292:	42bd      	cmp	r5, r7
 8007294:	d1ee      	bne.n	8007274 <taabe616+0x2a8>
 8007296:	f859 302a 	ldr.w	r3, [r9, sl, lsl #2]
 800729a:	3303      	adds	r3, #3
 800729c:	f023 0303 	bic.w	r3, r3, #3
 80072a0:	18e2      	adds	r2, r4, r3
 80072a2:	58e1      	ldr	r1, [r4, r3]
 80072a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80072a6:	3204      	adds	r2, #4
 80072a8:	e9c6 1213 	strd	r1, r2, [r6, #76]	; 0x4c
 80072ac:	2000      	movs	r0, #0
 80072ae:	601e      	str	r6, [r3, #0]
 80072b0:	e714      	b.n	80070dc <taabe616+0x110>
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff fe86 	bl	8006fc4 <taabe217.part.0>
 80072b8:	2003      	movs	r0, #3
 80072ba:	e70f      	b.n	80070dc <taabe616+0x110>
 80072bc:	3504      	adds	r5, #4
 80072be:	6235      	str	r5, [r6, #32]
 80072c0:	e729      	b.n	8007116 <taabe616+0x14a>
 80072c2:	bf00      	nop

080072c4 <taabe217>:
 80072c4:	4601      	mov	r1, r0
 80072c6:	b110      	cbz	r0, 80072ce <taabe217+0xa>
 80072c8:	6800      	ldr	r0, [r0, #0]
 80072ca:	f001 ba1b 	b.w	8008704 <taabe22>
 80072ce:	4770      	bx	lr

080072d0 <taabe420>:
 80072d0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80072d2:	4770      	bx	lr

080072d4 <taabe227>:
 80072d4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80072d6:	5858      	ldr	r0, [r3, r1]
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop

080072dc <taabe473>:
 80072dc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80072de:	4419      	add	r1, r3
 80072e0:	68c8      	ldr	r0, [r1, #12]
 80072e2:	4770      	bx	lr

080072e4 <taabe55>:
 80072e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80072e6:	4419      	add	r1, r3
 80072e8:	6888      	ldr	r0, [r1, #8]
 80072ea:	4770      	bx	lr

080072ec <taabe644>:
 80072ec:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80072ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80072f2:	440a      	add	r2, r1
 80072f4:	9900      	ldr	r1, [sp, #0]
 80072f6:	6912      	ldr	r2, [r2, #16]
 80072f8:	600a      	str	r2, [r1, #0]
 80072fa:	4410      	add	r0, r2
 80072fc:	6842      	ldr	r2, [r0, #4]
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <taabe356>:
 8007304:	e9d0 030c 	ldrd	r0, r3, [r0, #48]	; 0x30
 8007308:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800730c:	4418      	add	r0, r3
 800730e:	4770      	bx	lr

08007310 <taabe385>:
 8007310:	e9d0 030e 	ldrd	r0, r3, [r0, #56]	; 0x38
 8007314:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007318:	4418      	add	r0, r3
 800731a:	4770      	bx	lr

0800731c <taabe296>:
 800731c:	e9d0 3011 	ldrd	r3, r0, [r0, #68]	; 0x44
 8007320:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007324:	4418      	add	r0, r3
 8007326:	4770      	bx	lr

08007328 <taabe272>:
 8007328:	b430      	push	{r4, r5}
 800732a:	e9d0 400a 	ldrd	r4, r0, [r0, #40]	; 0x28
 800732e:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 8007332:	3101      	adds	r1, #1
 8007334:	f854 500c 	ldr.w	r5, [r4, ip]
 8007338:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800733c:	1b49      	subs	r1, r1, r5
 800733e:	6011      	str	r1, [r2, #0]
 8007340:	f854 200c 	ldr.w	r2, [r4, ip]
 8007344:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007348:	bc30      	pop	{r4, r5}
 800734a:	6018      	str	r0, [r3, #0]
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop

08007350 <taabe59>:
 8007350:	e9d0 3003 	ldrd	r3, r0, [r0, #12]
 8007354:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007358:	4418      	add	r0, r3
 800735a:	4770      	bx	lr

0800735c <taabe21>:
 800735c:	6943      	ldr	r3, [r0, #20]
 800735e:	3101      	adds	r1, #1
 8007360:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 8007364:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007368:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800736c:	1ac0      	subs	r0, r0, r3
 800736e:	4770      	bx	lr

08007370 <taabe30>:
 8007370:	6943      	ldr	r3, [r0, #20]
 8007372:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8007376:	4410      	add	r0, r2
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop

0800737c <taabe462>:
 800737c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007380:	d011      	beq.n	80073a6 <taabe462+0x2a>
 8007382:	b430      	push	{r4, r5}
 8007384:	e9d0 4007 	ldrd	r4, r0, [r0, #28]
 8007388:	ea4f 0c81 	mov.w	ip, r1, lsl #2
 800738c:	3101      	adds	r1, #1
 800738e:	f854 500c 	ldr.w	r5, [r4, ip]
 8007392:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8007396:	1b49      	subs	r1, r1, r5
 8007398:	6011      	str	r1, [r2, #0]
 800739a:	f854 200c 	ldr.w	r2, [r4, ip]
 800739e:	4402      	add	r2, r0
 80073a0:	bc30      	pop	{r4, r5}
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	4770      	bx	lr
 80073a6:	2001      	movs	r0, #1
 80073a8:	2100      	movs	r1, #0
 80073aa:	6010      	str	r0, [r2, #0]
 80073ac:	6019      	str	r1, [r3, #0]
 80073ae:	4770      	bx	lr

080073b0 <taabe604>:
 80073b0:	6840      	ldr	r0, [r0, #4]
 80073b2:	4770      	bx	lr

080073b4 <pv_rhino_beams_insert_at>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	4604      	mov	r4, r0
 80073b8:	460d      	mov	r5, r1
 80073ba:	68c0      	ldr	r0, [r0, #12]
 80073bc:	9906      	ldr	r1, [sp, #24]
 80073be:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
 80073c2:	6922      	ldr	r2, [r4, #16]
 80073c4:	f89d c01c 	ldrb.w	ip, [sp, #28]
 80073c8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80073cc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80073d0:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80073d4:	69e1      	ldr	r1, [r4, #28]
 80073d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073da:	f800 c005 	strb.w	ip, [r0, r5]
 80073de:	9808      	ldr	r0, [sp, #32]
 80073e0:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
 80073e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80073e8:	6a23      	ldr	r3, [r4, #32]
 80073ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80073ec:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80073ee:	fb05 f303 	mul.w	r3, r5, r3
 80073f2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80073f6:	e9dd 160a 	ldrd	r1, r6, [sp, #40]	; 0x28
 80073fa:	0052      	lsls	r2, r2, #1
 80073fc:	f002 fe0a 	bl	800a014 <memcpy>
 8007400:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007402:	b903      	cbnz	r3, 8007406 <pv_rhino_beams_insert_at+0x52>
 8007404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007406:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007408:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
 800740c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800740e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007410:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8007414:	4639      	mov	r1, r7
 8007416:	00b2      	lsls	r2, r6, #2
 8007418:	fb00 300c 	mla	r0, r0, ip, r3
 800741c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007420:	f002 bdf8 	b.w	800a014 <memcpy>

08007424 <pv_rhino_beams_insert>:
 8007424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007428:	6885      	ldr	r5, [r0, #8]
 800742a:	b08a      	sub	sp, #40	; 0x28
 800742c:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8007430:	2d00      	cmp	r5, #0
 8007432:	d053      	beq.n	80074dc <pv_rhino_beams_insert+0xb8>
 8007434:	68c4      	ldr	r4, [r0, #12]
 8007436:	f04f 0c00 	mov.w	ip, #0
 800743a:	f1a4 0e04 	sub.w	lr, r4, #4
 800743e:	e003      	b.n	8007448 <pv_rhino_beams_insert+0x24>
 8007440:	f10c 0c01 	add.w	ip, ip, #1
 8007444:	45ac      	cmp	ip, r5
 8007446:	d02c      	beq.n	80074a2 <pv_rhino_beams_insert+0x7e>
 8007448:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800744c:	42a1      	cmp	r1, r4
 800744e:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8007452:	d1f5      	bne.n	8007440 <pv_rhino_beams_insert+0x1c>
 8007454:	6904      	ldr	r4, [r0, #16]
 8007456:	f854 402c 	ldr.w	r4, [r4, ip, lsl #2]
 800745a:	42a2      	cmp	r2, r4
 800745c:	d1f0      	bne.n	8007440 <pv_rhino_beams_insert+0x1c>
 800745e:	6944      	ldr	r4, [r0, #20]
 8007460:	59a4      	ldr	r4, [r4, r6]
 8007462:	42a3      	cmp	r3, r4
 8007464:	d1ec      	bne.n	8007440 <pv_rhino_beams_insert+0x1c>
 8007466:	6984      	ldr	r4, [r0, #24]
 8007468:	f814 400c 	ldrb.w	r4, [r4, ip]
 800746c:	42bc      	cmp	r4, r7
 800746e:	d1e7      	bne.n	8007440 <pv_rhino_beams_insert+0x1c>
 8007470:	69c4      	ldr	r4, [r0, #28]
 8007472:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007474:	59a4      	ldr	r4, [r4, r6]
 8007476:	42ac      	cmp	r4, r5
 8007478:	dd2d      	ble.n	80074d6 <pv_rhino_beams_insert+0xb2>
 800747a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800747c:	9406      	str	r4, [sp, #24]
 800747e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8007480:	9405      	str	r4, [sp, #20]
 8007482:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007484:	9404      	str	r4, [sp, #16]
 8007486:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007488:	9403      	str	r4, [sp, #12]
 800748a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	9701      	str	r7, [sp, #4]
 8007490:	4613      	mov	r3, r2
 8007492:	9402      	str	r4, [sp, #8]
 8007494:	460a      	mov	r2, r1
 8007496:	4661      	mov	r1, ip
 8007498:	f7ff ff8c 	bl	80073b4 <pv_rhino_beams_insert_at>
 800749c:	b00a      	add	sp, #40	; 0x28
 800749e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a2:	6844      	ldr	r4, [r0, #4]
 80074a4:	42ac      	cmp	r4, r5
 80074a6:	d81e      	bhi.n	80074e6 <pv_rhino_beams_insert+0xc2>
 80074a8:	69c4      	ldr	r4, [r0, #28]
 80074aa:	2d01      	cmp	r5, #1
 80074ac:	f8d4 e000 	ldr.w	lr, [r4]
 80074b0:	d94a      	bls.n	8007548 <pv_rhino_beams_insert+0x124>
 80074b2:	46a4      	mov	ip, r4
 80074b4:	f04f 0800 	mov.w	r8, #0
 80074b8:	2401      	movs	r4, #1
 80074ba:	f85c 6f04 	ldr.w	r6, [ip, #4]!
 80074be:	4576      	cmp	r6, lr
 80074c0:	bfa8      	it	ge
 80074c2:	46a0      	movge	r8, r4
 80074c4:	f104 0401 	add.w	r4, r4, #1
 80074c8:	bfa8      	it	ge
 80074ca:	46b6      	movge	lr, r6
 80074cc:	42ac      	cmp	r4, r5
 80074ce:	d1f4      	bne.n	80074ba <pv_rhino_beams_insert+0x96>
 80074d0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80074d2:	4574      	cmp	r4, lr
 80074d4:	db20      	blt.n	8007518 <pv_rhino_beams_insert+0xf4>
 80074d6:	b00a      	add	sp, #40	; 0x28
 80074d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074dc:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80074e0:	f1b8 0f00 	cmp.w	r8, #0
 80074e4:	d02c      	beq.n	8007540 <pv_rhino_beams_insert+0x11c>
 80074e6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80074e8:	9406      	str	r4, [sp, #24]
 80074ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80074ec:	9405      	str	r4, [sp, #20]
 80074ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80074f0:	9404      	str	r4, [sp, #16]
 80074f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80074f4:	9403      	str	r4, [sp, #12]
 80074f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80074f8:	9300      	str	r3, [sp, #0]
 80074fa:	9701      	str	r7, [sp, #4]
 80074fc:	4613      	mov	r3, r2
 80074fe:	9402      	str	r4, [sp, #8]
 8007500:	460a      	mov	r2, r1
 8007502:	4629      	mov	r1, r5
 8007504:	9009      	str	r0, [sp, #36]	; 0x24
 8007506:	f7ff ff55 	bl	80073b4 <pv_rhino_beams_insert_at>
 800750a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800750c:	6883      	ldr	r3, [r0, #8]
 800750e:	3301      	adds	r3, #1
 8007510:	6083      	str	r3, [r0, #8]
 8007512:	b00a      	add	sp, #40	; 0x28
 8007514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007518:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800751a:	9406      	str	r4, [sp, #24]
 800751c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800751e:	9405      	str	r4, [sp, #20]
 8007520:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007522:	9404      	str	r4, [sp, #16]
 8007524:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007526:	9403      	str	r4, [sp, #12]
 8007528:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	9701      	str	r7, [sp, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	9402      	str	r4, [sp, #8]
 8007532:	460a      	mov	r2, r1
 8007534:	4641      	mov	r1, r8
 8007536:	f7ff ff3d 	bl	80073b4 <pv_rhino_beams_insert_at>
 800753a:	b00a      	add	sp, #40	; 0x28
 800753c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007540:	69c4      	ldr	r4, [r0, #28]
 8007542:	f8d4 e000 	ldr.w	lr, [r4]
 8007546:	e7c3      	b.n	80074d0 <pv_rhino_beams_insert+0xac>
 8007548:	f04f 0800 	mov.w	r8, #0
 800754c:	e7c0      	b.n	80074d0 <pv_rhino_beams_insert+0xac>
 800754e:	bf00      	nop

08007550 <pv_rhino_beams_delete.part.0>:
 8007550:	b538      	push	{r3, r4, r5, lr}
 8007552:	6805      	ldr	r5, [r0, #0]
 8007554:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007556:	4604      	mov	r4, r0
 8007558:	4628      	mov	r0, r5
 800755a:	f001 f8d3 	bl	8008704 <taabe22>
 800755e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007560:	4628      	mov	r0, r5
 8007562:	f001 f8cf 	bl	8008704 <taabe22>
 8007566:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007568:	4628      	mov	r0, r5
 800756a:	f001 f8cb 	bl	8008704 <taabe22>
 800756e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007570:	4628      	mov	r0, r5
 8007572:	f001 f8c7 	bl	8008704 <taabe22>
 8007576:	69e1      	ldr	r1, [r4, #28]
 8007578:	4628      	mov	r0, r5
 800757a:	f001 f8c3 	bl	8008704 <taabe22>
 800757e:	69a1      	ldr	r1, [r4, #24]
 8007580:	4628      	mov	r0, r5
 8007582:	f001 f8bf 	bl	8008704 <taabe22>
 8007586:	6961      	ldr	r1, [r4, #20]
 8007588:	4628      	mov	r0, r5
 800758a:	f001 f8bb 	bl	8008704 <taabe22>
 800758e:	6921      	ldr	r1, [r4, #16]
 8007590:	4628      	mov	r0, r5
 8007592:	f001 f8b7 	bl	8008704 <taabe22>
 8007596:	68e1      	ldr	r1, [r4, #12]
 8007598:	4628      	mov	r0, r5
 800759a:	f001 f8b3 	bl	8008704 <taabe22>
 800759e:	4621      	mov	r1, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075a6:	f001 b8ad 	b.w	8008704 <taabe22>
 80075aa:	bf00      	nop

080075ac <pv_rhino_beams_init>:
 80075ac:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
 80075b0:	469a      	mov	sl, r3
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	2600      	movs	r6, #0
 80075b6:	460f      	mov	r7, r1
 80075b8:	4691      	mov	r9, r2
 80075ba:	601e      	str	r6, [r3, #0]
 80075bc:	2201      	movs	r2, #1
 80075be:	2138      	movs	r1, #56	; 0x38
 80075c0:	4605      	mov	r5, r0
 80075c2:	f001 f86b 	bl	800869c <taabe284>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d05e      	beq.n	8007688 <pv_rhino_beams_init+0xdc>
 80075ca:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80075ce:	e9c0 5700 	strd	r5, r7, [r0]
 80075d2:	4604      	mov	r4, r0
 80075d4:	6086      	str	r6, [r0, #8]
 80075d6:	4632      	mov	r2, r6
 80075d8:	4659      	mov	r1, fp
 80075da:	4628      	mov	r0, r5
 80075dc:	f001 f85e 	bl	800869c <taabe284>
 80075e0:	60e0      	str	r0, [r4, #12]
 80075e2:	2800      	cmp	r0, #0
 80075e4:	d04a      	beq.n	800767c <pv_rhino_beams_init+0xd0>
 80075e6:	4632      	mov	r2, r6
 80075e8:	4659      	mov	r1, fp
 80075ea:	4628      	mov	r0, r5
 80075ec:	f001 f856 	bl	800869c <taabe284>
 80075f0:	6120      	str	r0, [r4, #16]
 80075f2:	2800      	cmp	r0, #0
 80075f4:	d042      	beq.n	800767c <pv_rhino_beams_init+0xd0>
 80075f6:	4632      	mov	r2, r6
 80075f8:	4659      	mov	r1, fp
 80075fa:	4628      	mov	r0, r5
 80075fc:	f001 f84e 	bl	800869c <taabe284>
 8007600:	6160      	str	r0, [r4, #20]
 8007602:	2800      	cmp	r0, #0
 8007604:	d03a      	beq.n	800767c <pv_rhino_beams_init+0xd0>
 8007606:	4632      	mov	r2, r6
 8007608:	4639      	mov	r1, r7
 800760a:	4628      	mov	r0, r5
 800760c:	f001 f846 	bl	800869c <taabe284>
 8007610:	61a0      	str	r0, [r4, #24]
 8007612:	b398      	cbz	r0, 800767c <pv_rhino_beams_init+0xd0>
 8007614:	4632      	mov	r2, r6
 8007616:	4659      	mov	r1, fp
 8007618:	4628      	mov	r0, r5
 800761a:	f001 f83f 	bl	800869c <taabe284>
 800761e:	61e0      	str	r0, [r4, #28]
 8007620:	b360      	cbz	r0, 800767c <pv_rhino_beams_init+0xd0>
 8007622:	f8c4 9020 	str.w	r9, [r4, #32]
 8007626:	4632      	mov	r2, r6
 8007628:	4659      	mov	r1, fp
 800762a:	4628      	mov	r0, r5
 800762c:	f001 f836 	bl	800869c <taabe284>
 8007630:	6260      	str	r0, [r4, #36]	; 0x24
 8007632:	b318      	cbz	r0, 800767c <pv_rhino_beams_init+0xd0>
 8007634:	fb09 f107 	mul.w	r1, r9, r7
 8007638:	0049      	lsls	r1, r1, #1
 800763a:	4632      	mov	r2, r6
 800763c:	4628      	mov	r0, r5
 800763e:	f001 f82d 	bl	800869c <taabe284>
 8007642:	62a0      	str	r0, [r4, #40]	; 0x28
 8007644:	b1d0      	cbz	r0, 800767c <pv_rhino_beams_init+0xd0>
 8007646:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
 800764a:	f1ba 0f00 	cmp.w	sl, #0
 800764e:	d104      	bne.n	800765a <pv_rhino_beams_init+0xae>
 8007650:	9b08      	ldr	r3, [sp, #32]
 8007652:	2000      	movs	r0, #0
 8007654:	601c      	str	r4, [r3, #0]
 8007656:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
 800765a:	4632      	mov	r2, r6
 800765c:	4659      	mov	r1, fp
 800765e:	4628      	mov	r0, r5
 8007660:	f001 f81c 	bl	800869c <taabe284>
 8007664:	6320      	str	r0, [r4, #48]	; 0x30
 8007666:	b148      	cbz	r0, 800767c <pv_rhino_beams_init+0xd0>
 8007668:	fb0a f107 	mul.w	r1, sl, r7
 800766c:	2200      	movs	r2, #0
 800766e:	0089      	lsls	r1, r1, #2
 8007670:	4628      	mov	r0, r5
 8007672:	f001 f813 	bl	800869c <taabe284>
 8007676:	6360      	str	r0, [r4, #52]	; 0x34
 8007678:	2800      	cmp	r0, #0
 800767a:	d1e9      	bne.n	8007650 <pv_rhino_beams_init+0xa4>
 800767c:	4620      	mov	r0, r4
 800767e:	f7ff ff67 	bl	8007550 <pv_rhino_beams_delete.part.0>
 8007682:	2001      	movs	r0, #1
 8007684:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
 8007688:	2001      	movs	r0, #1
 800768a:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}
 800768e:	bf00      	nop

08007690 <taabe64>:
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	b083      	sub	sp, #12
 8007696:	4616      	mov	r6, r2
 8007698:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800769a:	f9bd b030 	ldrsh.w	fp, [sp, #48]	; 0x30
 800769e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80076a2:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 80076a6:	461f      	mov	r7, r3
 80076a8:	2300      	movs	r3, #0
 80076aa:	4688      	mov	r8, r1
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	2120      	movs	r1, #32
 80076b0:	2201      	movs	r2, #1
 80076b2:	4605      	mov	r5, r0
 80076b4:	f000 fff2 	bl	800869c <taabe284>
 80076b8:	2800      	cmp	r0, #0
 80076ba:	d03a      	beq.n	8007732 <taabe64+0xa2>
 80076bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076be:	61c3      	str	r3, [r0, #28]
 80076c0:	e9c0 5800 	strd	r5, r8, [r0]
 80076c4:	4604      	mov	r4, r0
 80076c6:	8187      	strh	r7, [r0, #12]
 80076c8:	f8a0 b00e 	strh.w	fp, [r0, #14]
 80076cc:	f8a0 a014 	strh.w	sl, [r0, #20]
 80076d0:	6086      	str	r6, [r0, #8]
 80076d2:	f8c0 9010 	str.w	r9, [r0, #16]
 80076d6:	4640      	mov	r0, r8
 80076d8:	f7ff fdfa 	bl	80072d0 <taabe420>
 80076dc:	4603      	mov	r3, r0
 80076de:	4628      	mov	r0, r5
 80076e0:	f104 0518 	add.w	r5, r4, #24
 80076e4:	9500      	str	r5, [sp, #0]
 80076e6:	464a      	mov	r2, r9
 80076e8:	4631      	mov	r1, r6
 80076ea:	f7ff ff5f 	bl	80075ac <pv_rhino_beams_init>
 80076ee:	4605      	mov	r5, r0
 80076f0:	bb20      	cbnz	r0, 800773c <taabe64+0xac>
 80076f2:	69a3      	ldr	r3, [r4, #24]
 80076f4:	68d9      	ldr	r1, [r3, #12]
 80076f6:	f8d3 c024 	ldr.w	ip, [r3, #36]	; 0x24
 80076fa:	e9d3 6705 	ldrd	r6, r7, [r3, #20]
 80076fe:	2201      	movs	r2, #1
 8007700:	609a      	str	r2, [r3, #8]
 8007702:	6008      	str	r0, [r1, #0]
 8007704:	69d8      	ldr	r0, [r3, #28]
 8007706:	6919      	ldr	r1, [r3, #16]
 8007708:	f04f 3eff 	mov.w	lr, #4294967295
 800770c:	f8c1 e000 	str.w	lr, [r1]
 8007710:	6035      	str	r5, [r6, #0]
 8007712:	703a      	strb	r2, [r7, #0]
 8007714:	6005      	str	r5, [r0, #0]
 8007716:	f8cc 2000 	str.w	r2, [ip]
 800771a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800771c:	8015      	strh	r5, [r2, #0]
 800771e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007720:	b10a      	cbz	r2, 8007726 <taabe64+0x96>
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	601d      	str	r5, [r3, #0]
 8007726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007728:	4628      	mov	r0, r5
 800772a:	601c      	str	r4, [r3, #0]
 800772c:	b003      	add	sp, #12
 800772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007732:	2501      	movs	r5, #1
 8007734:	4628      	mov	r0, r5
 8007736:	b003      	add	sp, #12
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	69a0      	ldr	r0, [r4, #24]
 800773e:	b108      	cbz	r0, 8007744 <taabe64+0xb4>
 8007740:	f7ff ff06 	bl	8007550 <pv_rhino_beams_delete.part.0>
 8007744:	6820      	ldr	r0, [r4, #0]
 8007746:	4621      	mov	r1, r4
 8007748:	f000 ffdc 	bl	8008704 <taabe22>
 800774c:	4628      	mov	r0, r5
 800774e:	b003      	add	sp, #12
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007754 <taabe43>:
 8007754:	b158      	cbz	r0, 800776e <taabe43+0x1a>
 8007756:	b510      	push	{r4, lr}
 8007758:	4604      	mov	r4, r0
 800775a:	6980      	ldr	r0, [r0, #24]
 800775c:	b108      	cbz	r0, 8007762 <taabe43+0xe>
 800775e:	f7ff fef7 	bl	8007550 <pv_rhino_beams_delete.part.0>
 8007762:	6820      	ldr	r0, [r4, #0]
 8007764:	4621      	mov	r1, r4
 8007766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800776a:	f000 bfcb 	b.w	8008704 <taabe22>
 800776e:	4770      	bx	lr

08007770 <taabe466>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	ed2d 8b04 	vpush	{d8-d9}
 8007778:	b0a5      	sub	sp, #148	; 0x94
 800777a:	4682      	mov	sl, r0
 800777c:	af06      	add	r7, sp, #24
 800777e:	6840      	ldr	r0, [r0, #4]
 8007780:	f8da 5018 	ldr.w	r5, [sl, #24]
 8007784:	61b9      	str	r1, [r7, #24]
 8007786:	2300      	movs	r3, #0
 8007788:	f8da 1008 	ldr.w	r1, [sl, #8]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	f8da 2010 	ldr.w	r2, [sl, #16]
 8007792:	f8da 4000 	ldr.w	r4, [sl]
 8007796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007798:	6439      	str	r1, [r7, #64]	; 0x40
 800779a:	647a      	str	r2, [r7, #68]	; 0x44
 800779c:	ee08 0a90 	vmov	s17, r0
 80077a0:	60bd      	str	r5, [r7, #8]
 80077a2:	f7ff fd95 	bl	80072d0 <taabe420>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4620      	mov	r0, r4
 80077aa:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80077ae:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80077b2:	9400      	str	r4, [sp, #0]
 80077b4:	f7ff fefa 	bl	80075ac <pv_rhino_beams_init>
 80077b8:	4683      	mov	fp, r0
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f040 81e7 	bne.w	8007b8e <taabe466+0x41e>
 80077c0:	f9ba 200c 	ldrsh.w	r2, [sl, #12]
 80077c4:	68ab      	ldr	r3, [r5, #8]
 80077c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077ca:	1a8a      	subs	r2, r1, r2
 80077cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 80fe 	beq.w	80079d0 <taabe466+0x260>
 80077d4:	4653      	mov	r3, sl
 80077d6:	6178      	str	r0, [r7, #20]
 80077d8:	4682      	mov	sl, r0
 80077da:	469b      	mov	fp, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	699b      	ldr	r3, [r3, #24]
 80077e2:	5c9b      	ldrb	r3, [r3, r2]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 81d9 	beq.w	8007b9c <taabe466+0x42c>
 80077ea:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80077ee:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80077f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077f4:	4413      	add	r3, r2
 80077f6:	f8db 5018 	ldr.w	r5, [fp, #24]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	69e9      	ldr	r1, [r5, #28]
 80077fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007802:	f851 1009 	ldr.w	r1, [r1, r9]
 8007806:	1a89      	subs	r1, r1, r2
 8007808:	4299      	cmp	r1, r3
 800780a:	6439      	str	r1, [r7, #64]	; 0x40
 800780c:	da24      	bge.n	8007858 <taabe466+0xe8>
 800780e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007810:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007812:	f853 0009 	ldr.w	r0, [r3, r9]
 8007816:	6a2b      	ldr	r3, [r5, #32]
 8007818:	6478      	str	r0, [r7, #68]	; 0x44
 800781a:	4256      	negs	r6, r2
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	fb02 f303 	mul.w	r3, r2, r3
 8007822:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8007826:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 800782a:	b236      	sxth	r6, r6
 800782c:	1af6      	subs	r6, r6, r3
 800782e:	f306 020f 	ssat	r2, #16, r6
 8007832:	b212      	sxth	r2, r2
 8007834:	b138      	cbz	r0, 8007846 <taabe466+0xd6>
 8007836:	1e8b      	subs	r3, r1, #2
 8007838:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 800783c:	f933 0f02 	ldrsh.w	r0, [r3, #2]!
 8007840:	429c      	cmp	r4, r3
 8007842:	4402      	add	r2, r0
 8007844:	d1fa      	bne.n	800783c <taabe466+0xcc>
 8007846:	f9bb 0014 	ldrsh.w	r0, [fp, #20]
 800784a:	f8db 3010 	ldr.w	r3, [fp, #16]
 800784e:	fb00 f303 	mul.w	r3, r0, r3
 8007852:	429a      	cmp	r2, r3
 8007854:	f2c0 83cd 	blt.w	8007ff2 <taabe466+0x882>
 8007858:	68bc      	ldr	r4, [r7, #8]
 800785a:	f8c7 a050 	str.w	sl, [r7, #80]	; 0x50
 800785e:	6923      	ldr	r3, [r4, #16]
 8007860:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007864:	f853 1009 	ldr.w	r1, [r3, r9]
 8007868:	f8c7 a054 	str.w	sl, [r7, #84]	; 0x54
 800786c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007870:	ee18 0a90 	vmov	r0, s17
 8007874:	f7ff fd82 	bl	800737c <taabe462>
 8007878:	6962      	ldr	r2, [r4, #20]
 800787a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800787c:	f852 2009 	ldr.w	r2, [r2, r9]
 8007880:	3b01      	subs	r3, #1
 8007882:	4293      	cmp	r3, r2
 8007884:	f000 8222 	beq.w	8007ccc <taabe466+0x55c>
 8007888:	f8db 4018 	ldr.w	r4, [fp, #24]
 800788c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007890:	6923      	ldr	r3, [r4, #16]
 8007892:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8007894:	f853 1009 	ldr.w	r1, [r3, r9]
 8007898:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800789c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80078a0:	e9c7 aa1c 	strd	sl, sl, [r7, #112]	; 0x70
 80078a4:	f7ff fd6a 	bl	800737c <taabe462>
 80078a8:	6963      	ldr	r3, [r4, #20]
 80078aa:	f853 2009 	ldr.w	r2, [r3, r9]
 80078ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b0:	1c51      	adds	r1, r2, #1
 80078b2:	5c9a      	ldrb	r2, [r3, r2]
 80078b4:	5c5b      	ldrb	r3, [r3, r1]
 80078b6:	6479      	str	r1, [r7, #68]	; 0x44
 80078b8:	429a      	cmp	r2, r3
 80078ba:	ee08 5a10 	vmov	s16, r5
 80078be:	f000 81fe 	beq.w	8007cbe <taabe466+0x54e>
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	f932 e013 	ldrsh.w	lr, [r2, r3, lsl #1]
 80078c8:	69e3      	ldr	r3, [r4, #28]
 80078ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078cc:	f853 3009 	ldr.w	r3, [r3, r9]
 80078d0:	eba3 080e 	sub.w	r8, r3, lr
 80078d4:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80078d8:	4413      	add	r3, r2
 80078da:	4598      	cmp	r8, r3
 80078dc:	da6d      	bge.n	80079ba <taabe466+0x24a>
 80078de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078e0:	6a26      	ldr	r6, [r4, #32]
 80078e2:	f853 2009 	ldr.w	r2, [r3, r9]
 80078e6:	1c53      	adds	r3, r2, #1
 80078e8:	4619      	mov	r1, r3
 80078ea:	1b88      	subs	r0, r1, r6
 80078ec:	6979      	ldr	r1, [r7, #20]
 80078ee:	643b      	str	r3, [r7, #64]	; 0x40
 80078f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80078f2:	fb01 f106 	mul.w	r1, r1, r6
 80078f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80078fa:	eb03 0c41 	add.w	ip, r3, r1, lsl #1
 80078fe:	1e53      	subs	r3, r2, #1
 8007900:	4298      	cmp	r0, r3
 8007902:	f1ce 0e00 	rsb	lr, lr, #0
 8007906:	f300 83d2 	bgt.w	80080ae <taabe466+0x93e>
 800790a:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800790e:	eb0c 0342 	add.w	r3, ip, r2, lsl #1
 8007912:	4671      	mov	r1, lr
 8007914:	f933 5d02 	ldrsh.w	r5, [r3, #-2]!
 8007918:	4298      	cmp	r0, r3
 800791a:	4429      	add	r1, r5
 800791c:	d1fa      	bne.n	8007914 <taabe466+0x1a4>
 800791e:	f9bb 0014 	ldrsh.w	r0, [fp, #20]
 8007922:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007926:	fb00 f303 	mul.w	r3, r0, r3
 800792a:	428b      	cmp	r3, r1
 800792c:	dd45      	ble.n	80079ba <taabe466+0x24a>
 800792e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007930:	42b3      	cmp	r3, r6
 8007932:	bfa8      	it	ge
 8007934:	4633      	movge	r3, r6
 8007936:	0059      	lsls	r1, r3, #1
 8007938:	1dc8      	adds	r0, r1, #7
 800793a:	f020 0007 	bic.w	r0, r0, #7
 800793e:	466e      	mov	r6, sp
 8007940:	ebad 0d00 	sub.w	sp, sp, r0
 8007944:	1e5d      	subs	r5, r3, #1
 8007946:	a806      	add	r0, sp, #24
 8007948:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
 800794c:	1e9d      	subs	r5, r3, #2
 800794e:	d40d      	bmi.n	800796c <taabe466+0x1fc>
 8007950:	1ad2      	subs	r2, r2, r3
 8007952:	3201      	adds	r2, #1
 8007954:	442a      	add	r2, r5
 8007956:	eb0c 0542 	add.w	r5, ip, r2, lsl #1
 800795a:	1f0a      	subs	r2, r1, #4
 800795c:	4402      	add	r2, r0
 800795e:	f935 1902 	ldrsh.w	r1, [r5], #-2
 8007962:	8011      	strh	r1, [r2, #0]
 8007964:	4290      	cmp	r0, r2
 8007966:	f1a2 0202 	sub.w	r2, r2, #2
 800796a:	d1f8      	bne.n	800795e <taabe466+0x1ee>
 800796c:	68e2      	ldr	r2, [r4, #12]
 800796e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007970:	f852 1009 	ldr.w	r1, [r2, r9]
 8007974:	6922      	ldr	r2, [r4, #16]
 8007976:	f852 e009 	ldr.w	lr, [r2, r9]
 800797a:	2d00      	cmp	r5, #0
 800797c:	f000 8393 	beq.w	80080a6 <taabe466+0x936>
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	fb02 fc05 	mul.w	ip, r2, r5
 8007986:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007988:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800798a:	f855 5009 	ldr.w	r5, [r5, r9]
 800798e:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 8007992:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8007996:	e9cd 5404 	strd	r5, r4, [sp, #16]
 800799a:	f8cd 8004 	str.w	r8, [sp, #4]
 800799e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a0:	4543      	cmp	r3, r8
 80079a2:	bfa8      	it	ge
 80079a4:	4643      	movge	r3, r8
 80079a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079a8:	f8cd a000 	str.w	sl, [sp]
 80079ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ae:	ee18 0a10 	vmov	r0, s16
 80079b2:	4672      	mov	r2, lr
 80079b4:	f7ff fd36 	bl	8007424 <pv_rhino_beams_insert>
 80079b8:	46b5      	mov	sp, r6
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	3201      	adds	r2, #1
 80079c2:	429a      	cmp	r2, r3
 80079c4:	617a      	str	r2, [r7, #20]
 80079c6:	f4ff af09 	bcc.w	80077dc <taabe466+0x6c>
 80079ca:	465b      	mov	r3, fp
 80079cc:	46d3      	mov	fp, sl
 80079ce:	469a      	mov	sl, r3
 80079d0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80079d2:	f8da 5018 	ldr.w	r5, [sl, #24]
 80079d6:	68a2      	ldr	r2, [r4, #8]
 80079d8:	68e1      	ldr	r1, [r4, #12]
 80079da:	60aa      	str	r2, [r5, #8]
 80079dc:	68e8      	ldr	r0, [r5, #12]
 80079de:	0092      	lsls	r2, r2, #2
 80079e0:	f002 fb18 	bl	800a014 <memcpy>
 80079e4:	68a2      	ldr	r2, [r4, #8]
 80079e6:	6921      	ldr	r1, [r4, #16]
 80079e8:	6928      	ldr	r0, [r5, #16]
 80079ea:	0092      	lsls	r2, r2, #2
 80079ec:	f002 fb12 	bl	800a014 <memcpy>
 80079f0:	68a2      	ldr	r2, [r4, #8]
 80079f2:	6961      	ldr	r1, [r4, #20]
 80079f4:	6968      	ldr	r0, [r5, #20]
 80079f6:	0092      	lsls	r2, r2, #2
 80079f8:	f002 fb0c 	bl	800a014 <memcpy>
 80079fc:	68a2      	ldr	r2, [r4, #8]
 80079fe:	69a1      	ldr	r1, [r4, #24]
 8007a00:	69a8      	ldr	r0, [r5, #24]
 8007a02:	f002 fb07 	bl	800a014 <memcpy>
 8007a06:	68a2      	ldr	r2, [r4, #8]
 8007a08:	69e1      	ldr	r1, [r4, #28]
 8007a0a:	69e8      	ldr	r0, [r5, #28]
 8007a0c:	0092      	lsls	r2, r2, #2
 8007a0e:	f002 fb01 	bl	800a014 <memcpy>
 8007a12:	68a2      	ldr	r2, [r4, #8]
 8007a14:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a16:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007a18:	0092      	lsls	r2, r2, #2
 8007a1a:	f002 fafb 	bl	800a014 <memcpy>
 8007a1e:	6a23      	ldr	r3, [r4, #32]
 8007a20:	68a2      	ldr	r2, [r4, #8]
 8007a22:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007a24:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8007a26:	fb03 f202 	mul.w	r2, r3, r2
 8007a2a:	0052      	lsls	r2, r2, #1
 8007a2c:	f002 faf2 	bl	800a014 <memcpy>
 8007a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f040 8327 	bne.w	8008086 <taabe466+0x916>
 8007a38:	f8da 8018 	ldr.w	r8, [sl, #24]
 8007a3c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8007a40:	2e00      	cmp	r6, #0
 8007a42:	f000 8098 	beq.w	8007b76 <taabe466+0x406>
 8007a46:	2300      	movs	r3, #0
 8007a48:	e9c7 b310 	strd	fp, r3, [r7, #64]	; 0x40
 8007a4c:	f8c7 a03c 	str.w	sl, [r7, #60]	; 0x3c
 8007a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a52:	461d      	mov	r5, r3
 8007a54:	3301      	adds	r3, #1
 8007a56:	429e      	cmp	r6, r3
 8007a58:	647b      	str	r3, [r7, #68]	; 0x44
 8007a5a:	f240 808a 	bls.w	8007b72 <taabe466+0x402>
 8007a5e:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8007a62:	462c      	mov	r4, r5
 8007a64:	eb0c 0285 	add.w	r2, ip, r5, lsl #2
 8007a68:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8007a6c:	f85c 1024 	ldr.w	r1, [ip, r4, lsl #2]
 8007a70:	4288      	cmp	r0, r1
 8007a72:	bfb8      	it	lt
 8007a74:	461c      	movlt	r4, r3
 8007a76:	3301      	adds	r3, #1
 8007a78:	42b3      	cmp	r3, r6
 8007a7a:	d1f5      	bne.n	8007a68 <taabe466+0x2f8>
 8007a7c:	42ac      	cmp	r4, r5
 8007a7e:	d074      	beq.n	8007b6a <taabe466+0x3fa>
 8007a80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a84:	f8d8 b024 	ldr.w	fp, [r8, #36]	; 0x24
 8007a88:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8007a8c:	466a      	mov	r2, sp
 8007a8e:	ee08 2a10 	vmov	s16, r2
 8007a92:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8007a96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a9a:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 8007a9e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007aa2:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8007aa6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8007aaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007aae:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 8007ab2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007ab6:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8007aba:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8007abe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ac2:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
 8007ac6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8007aca:	5d5a      	ldrb	r2, [r3, r5]
 8007acc:	5d19      	ldrb	r1, [r3, r4]
 8007ace:	5559      	strb	r1, [r3, r5]
 8007ad0:	551a      	strb	r2, [r3, r4]
 8007ad2:	f85c 3025 	ldr.w	r3, [ip, r5, lsl #2]
 8007ad6:	f85c 2024 	ldr.w	r2, [ip, r4, lsl #2]
 8007ada:	f84c 2025 	str.w	r2, [ip, r5, lsl #2]
 8007ade:	f84c 3024 	str.w	r3, [ip, r4, lsl #2]
 8007ae2:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 8007ae6:	f8d8 6020 	ldr.w	r6, [r8, #32]
 8007aea:	0052      	lsls	r2, r2, #1
 8007aec:	1dd3      	adds	r3, r2, #7
 8007aee:	f023 0307 	bic.w	r3, r3, #7
 8007af2:	ebad 0d03 	sub.w	sp, sp, r3
 8007af6:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8007afa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007afc:	0076      	lsls	r6, r6, #1
 8007afe:	fb05 3a06 	mla	sl, r5, r6, r3
 8007b02:	f10d 0918 	add.w	r9, sp, #24
 8007b06:	4651      	mov	r1, sl
 8007b08:	4648      	mov	r0, r9
 8007b0a:	f002 fa83 	bl	800a014 <memcpy>
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
 8007b14:	fb04 3106 	mla	r1, r4, r6, r3
 8007b18:	0052      	lsls	r2, r2, #1
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	f002 fa7a 	bl	800a014 <memcpy>
 8007b20:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8007b24:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 8007b28:	fb04 f303 	mul.w	r3, r4, r3
 8007b2c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8007b30:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007b34:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8007b38:	4649      	mov	r1, r9
 8007b3a:	0052      	lsls	r2, r2, #1
 8007b3c:	f002 fa6a 	bl	800a014 <memcpy>
 8007b40:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8007b44:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8007b48:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8007b4c:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8007b50:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007b54:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8007b58:	00a6      	lsls	r6, r4, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f040 8209 	bne.w	8007f72 <taabe466+0x802>
 8007b60:	ee18 3a10 	vmov	r3, s16
 8007b64:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8007b68:	469d      	mov	sp, r3
 8007b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b6c:	429e      	cmp	r6, r3
 8007b6e:	f63f af6f 	bhi.w	8007a50 <taabe466+0x2e0>
 8007b72:	e9d7 ab0f 	ldrd	sl, fp, [r7, #60]	; 0x3c
 8007b76:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007b78:	b108      	cbz	r0, 8007b7e <taabe466+0x40e>
 8007b7a:	f7ff fce9 	bl	8007550 <pv_rhino_beams_delete.part.0>
 8007b7e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	3b00      	subs	r3, #0
 8007b88:	bf18      	it	ne
 8007b8a:	2301      	movne	r3, #1
 8007b8c:	7013      	strb	r3, [r2, #0]
 8007b8e:	4658      	mov	r0, fp
 8007b90:	377c      	adds	r7, #124	; 0x7c
 8007b92:	46bd      	mov	sp, r7
 8007b94:	ecbd 8b04 	vpop	{d8-d9}
 8007b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b9c:	f8db 4018 	ldr.w	r4, [fp, #24]
 8007ba0:	697d      	ldr	r5, [r7, #20]
 8007ba2:	6922      	ldr	r2, [r4, #16]
 8007ba4:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007ba8:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
 8007bac:	6cfe      	ldr	r6, [r7, #76]	; 0x4c
 8007bae:	e9c7 331c 	strd	r3, r3, [r7, #112]	; 0x70
 8007bb2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007bb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007bba:	f7ff fbdf 	bl	800737c <taabe462>
 8007bbe:	6963      	ldr	r3, [r4, #20]
 8007bc0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007bc2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007bc6:	5cd3      	ldrb	r3, [r2, r3]
 8007bc8:	69ba      	ldr	r2, [r7, #24]
 8007bca:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8007bce:	69e3      	ldr	r3, [r4, #28]
 8007bd0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	1a98      	subs	r0, r3, r2
 8007bd8:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8007bda:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8007bde:	6438      	str	r0, [r7, #64]	; 0x40
 8007be0:	442b      	add	r3, r5
 8007be2:	4298      	cmp	r0, r3
 8007be4:	ee08 6a10 	vmov	s16, r6
 8007be8:	ea4f 0981 	mov.w	r9, r1, lsl #2
 8007bec:	f6bf ae03 	bge.w	80077f6 <taabe466+0x86>
 8007bf0:	4250      	negs	r0, r2
 8007bf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007bf4:	6478      	str	r0, [r7, #68]	; 0x44
 8007bf6:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8007bfa:	6a22      	ldr	r2, [r4, #32]
 8007bfc:	fb01 f202 	mul.w	r2, r1, r2
 8007c00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007c02:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8007c06:	2d00      	cmp	r5, #0
 8007c08:	f000 8255 	beq.w	80080b6 <taabe466+0x946>
 8007c0c:	1e8a      	subs	r2, r1, #2
 8007c0e:	eb02 0c45 	add.w	ip, r2, r5, lsl #1
 8007c12:	f932 6f02 	ldrsh.w	r6, [r2, #2]!
 8007c16:	4594      	cmp	ip, r2
 8007c18:	4430      	add	r0, r6
 8007c1a:	d1fa      	bne.n	8007c12 <taabe466+0x4a2>
 8007c1c:	f9bb 6014 	ldrsh.w	r6, [fp, #20]
 8007c20:	f8db 2010 	ldr.w	r2, [fp, #16]
 8007c24:	fb06 f202 	mul.w	r2, r6, r2
 8007c28:	4282      	cmp	r2, r0
 8007c2a:	f77f ade4 	ble.w	80077f6 <taabe466+0x86>
 8007c2e:	006e      	lsls	r6, r5, #1
 8007c30:	1df3      	adds	r3, r6, #7
 8007c32:	f023 0307 	bic.w	r3, r3, #7
 8007c36:	466a      	mov	r2, sp
 8007c38:	ebad 0d03 	sub.w	sp, sp, r3
 8007c3c:	f10d 0818 	add.w	r8, sp, #24
 8007c40:	ee09 2a10 	vmov	s18, r2
 8007c44:	4640      	mov	r0, r8
 8007c46:	4632      	mov	r2, r6
 8007c48:	f002 f9e4 	bl	800a014 <memcpy>
 8007c4c:	4446      	add	r6, r8
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c52:	f853 1009 	ldr.w	r1, [r3, r9]
 8007c56:	f936 3c02 	ldrsh.w	r3, [r6, #-2]
 8007c5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007c5c:	fa03 f382 	sxtah	r3, r3, r2
 8007c60:	f303 030f 	ssat	r3, #16, r3
 8007c64:	f826 3c02 	strh.w	r3, [r6, #-2]
 8007c68:	6923      	ldr	r3, [r4, #16]
 8007c6a:	f853 2009 	ldr.w	r2, [r3, r9]
 8007c6e:	6963      	ldr	r3, [r4, #20]
 8007c70:	f853 3009 	ldr.w	r3, [r3, r9]
 8007c74:	2800      	cmp	r0, #0
 8007c76:	f000 821c 	beq.w	80080b2 <taabe466+0x942>
 8007c7a:	697e      	ldr	r6, [r7, #20]
 8007c7c:	fb06 f000 	mul.w	r0, r6, r0
 8007c80:	e9d4 640c 	ldrd	r6, r4, [r4, #48]	; 0x30
 8007c84:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8007c88:	f856 0009 	ldr.w	r0, [r6, r9]
 8007c8c:	e9cd 0404 	strd	r0, r4, [sp, #16]
 8007c90:	e9cd 5802 	strd	r5, r8, [sp, #8]
 8007c94:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8007c96:	9401      	str	r4, [sp, #4]
 8007c98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007c9a:	42a0      	cmp	r0, r4
 8007c9c:	bfa8      	it	ge
 8007c9e:	4620      	movge	r0, r4
 8007ca0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	f8cd a000 	str.w	sl, [sp]
 8007ca8:	ee18 0a10 	vmov	r0, s16
 8007cac:	f7ff fbba 	bl	8007424 <pv_rhino_beams_insert>
 8007cb0:	ee19 3a10 	vmov	r3, s18
 8007cb4:	469d      	mov	sp, r3
 8007cb6:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8007cba:	4423      	add	r3, r4
 8007cbc:	e59b      	b.n	80077f6 <taabe466+0x86>
 8007cbe:	69a2      	ldr	r2, [r4, #24]
 8007cc0:	6979      	ldr	r1, [r7, #20]
 8007cc2:	5c52      	ldrb	r2, [r2, r1]
 8007cc4:	2a00      	cmp	r2, #0
 8007cc6:	f47f adfc 	bne.w	80078c2 <taabe466+0x152>
 8007cca:	e676      	b.n	80079ba <taabe466+0x24a>
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f8c7 9044 	str.w	r9, [r7, #68]	; 0x44
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f853 3009 	ldr.w	r3, [r3, r9]
 8007cd8:	ee09 3a10 	vmov	s18, r3
 8007cdc:	2300      	movs	r3, #0
 8007cde:	46d9      	mov	r9, fp
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	46d3      	mov	fp, sl
 8007ce4:	ee19 1a10 	vmov	r1, s18
 8007ce8:	ee18 0a90 	vmov	r0, s17
 8007cec:	f7ff faf6 	bl	80072dc <taabe473>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4298      	cmp	r0, r3
 8007cf4:	f240 813a 	bls.w	8007f6c <taabe466+0x7fc>
 8007cf8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007cfc:	e9c7 bb16 	strd	fp, fp, [r7, #88]	; 0x58
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	ee19 1a10 	vmov	r1, s18
 8007d08:	ee18 0a90 	vmov	r0, s17
 8007d0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007d10:	f7ff faec 	bl	80072ec <taabe644>
 8007d14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007d18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d1a:	ee18 0a90 	vmov	r0, s17
 8007d1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007d22:	e9c7 bb18 	strd	fp, fp, [r7, #96]	; 0x60
 8007d26:	f7ff faff 	bl	8007328 <taabe272>
 8007d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80e1 	beq.w	8007ef4 <taabe466+0x784>
 8007d32:	2300      	movs	r3, #0
 8007d34:	f8c7 b040 	str.w	fp, [r7, #64]	; 0x40
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	46cb      	mov	fp, r9
 8007d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d3e:	693c      	ldr	r4, [r7, #16]
 8007d40:	ee18 0a90 	vmov	r0, s17
 8007d44:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8007d48:	f7ff fb08 	bl	800735c <taabe21>
 8007d4c:	00a3      	lsls	r3, r4, #2
 8007d4e:	623b      	str	r3, [r7, #32]
 8007d50:	6278      	str	r0, [r7, #36]	; 0x24
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f000 80c3 	beq.w	8007ede <taabe466+0x76e>
 8007d58:	f04f 0800 	mov.w	r8, #0
 8007d5c:	6a3a      	ldr	r2, [r7, #32]
 8007d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d60:	f8db 5004 	ldr.w	r5, [fp, #4]
 8007d64:	589b      	ldr	r3, [r3, r2]
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
 8007d72:	4642      	mov	r2, r8
 8007d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d76:	f8db 4018 	ldr.w	r4, [fp, #24]
 8007d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	f7ff faf7 	bl	8007370 <taabe30>
 8007d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d84:	4601      	mov	r1, r0
 8007d86:	e9c7 331a 	strd	r3, r3, [r7, #104]	; 0x68
 8007d8a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8007d8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007d92:	4681      	mov	r9, r0
 8007d94:	4628      	mov	r0, r5
 8007d96:	f7ff faf1 	bl	800737c <taabe462>
 8007d9a:	6923      	ldr	r3, [r4, #16]
 8007d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d9e:	5899      	ldr	r1, [r3, r2]
 8007da0:	1c4b      	adds	r3, r1, #1
 8007da2:	f040 80ab 	bne.w	8007efc <taabe466+0x78c>
 8007da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dae:	f932 6013 	ldrsh.w	r6, [r2, r3, lsl #1]
 8007db2:	69e3      	ldr	r3, [r4, #28]
 8007db4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007db6:	585b      	ldr	r3, [r3, r1]
 8007db8:	1b9a      	subs	r2, r3, r6
 8007dba:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8007dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dc0:	4403      	add	r3, r0
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	f280 8085 	bge.w	8007ed2 <taabe466+0x762>
 8007dc8:	4273      	negs	r3, r6
 8007dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dce:	f8d4 c020 	ldr.w	ip, [r4, #32]
 8007dd2:	5858      	ldr	r0, [r3, r1]
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dd8:	1c46      	adds	r6, r0, #1
 8007dda:	eba6 0a0c 	sub.w	sl, r6, ip
 8007dde:	fb01 f20c 	mul.w	r2, r1, ip
 8007de2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007de6:	eb03 0e42 	add.w	lr, r3, r2, lsl #1
 8007dea:	1e43      	subs	r3, r0, #1
 8007dec:	4553      	cmp	r3, sl
 8007dee:	f2c0 80a4 	blt.w	8007f3a <taabe466+0x7ca>
 8007df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df4:	eb0e 0a4a 	add.w	sl, lr, sl, lsl #1
 8007df8:	eb0e 0340 	add.w	r3, lr, r0, lsl #1
 8007dfc:	f933 1d02 	ldrsh.w	r1, [r3, #-2]!
 8007e00:	459a      	cmp	sl, r3
 8007e02:	440a      	add	r2, r1
 8007e04:	d1fa      	bne.n	8007dfc <taabe466+0x68c>
 8007e06:	f9bb 1014 	ldrsh.w	r1, [fp, #20]
 8007e0a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007e0e:	fb01 f303 	mul.w	r3, r1, r3
 8007e12:	429a      	cmp	r2, r3
 8007e14:	da5d      	bge.n	8007ed2 <taabe466+0x762>
 8007e16:	4566      	cmp	r6, ip
 8007e18:	bfa8      	it	ge
 8007e1a:	4666      	movge	r6, ip
 8007e1c:	0072      	lsls	r2, r6, #1
 8007e1e:	1dd3      	adds	r3, r2, #7
 8007e20:	f023 0307 	bic.w	r3, r3, #7
 8007e24:	4669      	mov	r1, sp
 8007e26:	ebad 0d03 	sub.w	sp, sp, r3
 8007e2a:	f10d 0a18 	add.w	sl, sp, #24
 8007e2e:	1e73      	subs	r3, r6, #1
 8007e30:	ee08 1a10 	vmov	s16, r1
 8007e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e36:	f82a 1013 	strh.w	r1, [sl, r3, lsl #1]
 8007e3a:	1eb1      	subs	r1, r6, #2
 8007e3c:	d40d      	bmi.n	8007e5a <taabe466+0x6ea>
 8007e3e:	1b83      	subs	r3, r0, r6
 8007e40:	3301      	adds	r3, #1
 8007e42:	440b      	add	r3, r1
 8007e44:	3a04      	subs	r2, #4
 8007e46:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007e4a:	4452      	add	r2, sl
 8007e4c:	f933 1902 	ldrsh.w	r1, [r3], #-2
 8007e50:	8011      	strh	r1, [r2, #0]
 8007e52:	4592      	cmp	sl, r2
 8007e54:	f1a2 0202 	sub.w	r2, r2, #2
 8007e58:	d1f8      	bne.n	8007e4c <taabe466+0x6dc>
 8007e5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f7ff fa51 	bl	8007304 <taabe356>
 8007e62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d064      	beq.n	8007f32 <taabe466+0x7c2>
 8007e68:	7802      	ldrb	r2, [r0, #0]
 8007e6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007e6e:	580d      	ldr	r5, [r1, r0]
 8007e70:	2a00      	cmp	r2, #0
 8007e72:	d064      	beq.n	8007f3e <taabe466+0x7ce>
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e78:	1c6c      	adds	r4, r5, #1
 8007e7a:	fb02 f303 	mul.w	r3, r2, r3
 8007e7e:	00a2      	lsls	r2, r4, #2
 8007e80:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007e84:	1dd3      	adds	r3, r2, #7
 8007e86:	f023 0307 	bic.w	r3, r3, #7
 8007e8a:	ebad 0d03 	sub.w	sp, sp, r3
 8007e8e:	ab06      	add	r3, sp, #24
 8007e90:	4618      	mov	r0, r3
 8007e92:	3a04      	subs	r2, #4
 8007e94:	f002 f8be 	bl	800a014 <memcpy>
 8007e98:	42a5      	cmp	r5, r4
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	d203      	bcs.n	8007ea6 <taabe466+0x736>
 8007e9e:	1e62      	subs	r2, r4, #1
 8007ea0:	69f9      	ldr	r1, [r7, #28]
 8007ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007ea6:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8007eaa:	e9cd 6a02 	strd	r6, sl, [sp, #8]
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	bfa8      	it	ge
 8007eb8:	461a      	movge	r2, r3
 8007eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	464a      	mov	r2, r9
 8007ec8:	f7ff faac 	bl	8007424 <pv_rhino_beams_insert>
 8007ecc:	ee18 3a10 	vmov	r3, s16
 8007ed0:	469d      	mov	sp, r3
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	f108 0801 	add.w	r8, r8, #1
 8007ed8:	4543      	cmp	r3, r8
 8007eda:	f47f af3f 	bne.w	8007d5c <taabe466+0x5ec>
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	f63f af27 	bhi.w	8007d3c <taabe466+0x5cc>
 8007eee:	46d9      	mov	r9, fp
 8007ef0:	f8d7 b040 	ldr.w	fp, [r7, #64]	; 0x40
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e6f3      	b.n	8007ce4 <taabe466+0x574>
 8007efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8007f02:	e9c7 331c 	strd	r3, r3, [r7, #112]	; 0x70
 8007f06:	4628      	mov	r0, r5
 8007f08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f0c:	f7ff fa36 	bl	800737c <taabe462>
 8007f10:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007f14:	4413      	add	r3, r2
 8007f16:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f1c:	781a      	ldrb	r2, [r3, #0]
 8007f1e:	4291      	cmp	r1, r2
 8007f20:	f47f af42 	bne.w	8007da8 <taabe466+0x638>
 8007f24:	69a2      	ldr	r2, [r4, #24]
 8007f26:	6979      	ldr	r1, [r7, #20]
 8007f28:	5c52      	ldrb	r2, [r2, r1]
 8007f2a:	2a00      	cmp	r2, #0
 8007f2c:	f47f af3c 	bne.w	8007da8 <taabe466+0x638>
 8007f30:	e7cf      	b.n	8007ed2 <taabe466+0x762>
 8007f32:	7804      	ldrb	r4, [r0, #0]
 8007f34:	b9b4      	cbnz	r4, 8007f64 <taabe466+0x7f4>
 8007f36:	ab06      	add	r3, sp, #24
 8007f38:	e7b5      	b.n	8007ea6 <taabe466+0x736>
 8007f3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f3c:	e763      	b.n	8007e06 <taabe466+0x696>
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f42:	fb02 f303 	mul.w	r3, r2, r3
 8007f46:	00aa      	lsls	r2, r5, #2
 8007f48:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007f4c:	1dd3      	adds	r3, r2, #7
 8007f4e:	f023 0307 	bic.w	r3, r3, #7
 8007f52:	ebad 0d03 	sub.w	sp, sp, r3
 8007f56:	ab06      	add	r3, sp, #24
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f002 f85b 	bl	800a014 <memcpy>
 8007f5e:	462c      	mov	r4, r5
 8007f60:	4603      	mov	r3, r0
 8007f62:	e7a0      	b.n	8007ea6 <taabe466+0x736>
 8007f64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f68:	2401      	movs	r4, #1
 8007f6a:	e798      	b.n	8007e9e <taabe466+0x72e>
 8007f6c:	46da      	mov	sl, fp
 8007f6e:	46cb      	mov	fp, r9
 8007f70:	e523      	b.n	80079ba <taabe466+0x24a>
 8007f72:	e9d8 b00c 	ldrd	fp, r0, [r8, #48]	; 0x30
 8007f76:	f85b 2025 	ldr.w	r2, [fp, r5, lsl #2]
 8007f7a:	63b8      	str	r0, [r7, #56]	; 0x38
 8007f7c:	0092      	lsls	r2, r2, #2
 8007f7e:	1dd1      	adds	r1, r2, #7
 8007f80:	f021 0107 	bic.w	r1, r1, #7
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	46ec      	mov	ip, sp
 8007f88:	ebad 0d01 	sub.w	sp, sp, r1
 8007f8c:	fb03 0a05 	mla	sl, r3, r5, r0
 8007f90:	f10d 0918 	add.w	r9, sp, #24
 8007f94:	4651      	mov	r1, sl
 8007f96:	4648      	mov	r0, r9
 8007f98:	ee08 ca90 	vmov	s17, ip
 8007f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9e:	f002 f839 	bl	800a014 <memcpy>
 8007fa2:	e9d7 300d 	ldrd	r3, r0, [r7, #52]	; 0x34
 8007fa6:	f85b 2024 	ldr.w	r2, [fp, r4, lsl #2]
 8007faa:	fb03 0104 	mla	r1, r3, r4, r0
 8007fae:	0092      	lsls	r2, r2, #2
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	f002 f82f 	bl	800a014 <memcpy>
 8007fb6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d075      	beq.n	80080aa <taabe466+0x93a>
 8007fbe:	f8d8 0034 	ldr.w	r0, [r8, #52]	; 0x34
 8007fc2:	fb04 f303 	mul.w	r3, r4, r3
 8007fc6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007fca:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8007fce:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	0092      	lsls	r2, r2, #2
 8007fd6:	f002 f81d 	bl	800a014 <memcpy>
 8007fda:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 8007fde:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8007fe2:	5999      	ldr	r1, [r3, r6]
 8007fe4:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8007fe8:	519a      	str	r2, [r3, r6]
 8007fea:	ee18 3a90 	vmov	r3, s17
 8007fee:	469d      	mov	sp, r3
 8007ff0:	e5b6      	b.n	8007b60 <taabe466+0x3f0>
 8007ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ff4:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8007ff6:	005a      	lsls	r2, r3, #1
 8007ff8:	1dd3      	adds	r3, r2, #7
 8007ffa:	f023 0307 	bic.w	r3, r3, #7
 8007ffe:	4668      	mov	r0, sp
 8008000:	ebad 0d03 	sub.w	sp, sp, r3
 8008004:	f10d 0818 	add.w	r8, sp, #24
 8008008:	ee08 0a10 	vmov	s16, r0
 800800c:	4640      	mov	r0, r8
 800800e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008010:	f002 f800 	bl	800a014 <memcpy>
 8008014:	f306 030f 	ssat	r3, #16, r6
 8008018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800801a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800801c:	4442      	add	r2, r8
 800801e:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 8008022:	fa01 f383 	sxtah	r3, r1, r3
 8008026:	f303 030f 	ssat	r3, #16, r3
 800802a:	f822 3c02 	strh.w	r3, [r2, #-2]
 800802e:	68eb      	ldr	r3, [r5, #12]
 8008030:	f853 1009 	ldr.w	r1, [r3, r9]
 8008034:	692b      	ldr	r3, [r5, #16]
 8008036:	f853 2009 	ldr.w	r2, [r3, r9]
 800803a:	696b      	ldr	r3, [r5, #20]
 800803c:	f853 3009 	ldr.w	r3, [r3, r9]
 8008040:	b1f8      	cbz	r0, 8008082 <taabe466+0x912>
 8008042:	697e      	ldr	r6, [r7, #20]
 8008044:	fb06 f000 	mul.w	r0, r6, r0
 8008048:	e9d5 650c 	ldrd	r6, r5, [r5, #48]	; 0x30
 800804c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8008050:	f856 5009 	ldr.w	r5, [r6, r9]
 8008054:	f8cd 800c 	str.w	r8, [sp, #12]
 8008058:	e9cd 5004 	strd	r5, r0, [sp, #16]
 800805c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800805e:	9002      	str	r0, [sp, #8]
 8008060:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008062:	9001      	str	r0, [sp, #4]
 8008064:	6bfd      	ldr	r5, [r7, #60]	; 0x3c
 8008066:	4285      	cmp	r5, r0
 8008068:	bfa8      	it	ge
 800806a:	4605      	movge	r5, r0
 800806c:	4620      	mov	r0, r4
 800806e:	2401      	movs	r4, #1
 8008070:	63fd      	str	r5, [r7, #60]	; 0x3c
 8008072:	9400      	str	r4, [sp, #0]
 8008074:	f7ff f9d6 	bl	8007424 <pv_rhino_beams_insert>
 8008078:	ee18 3a10 	vmov	r3, s16
 800807c:	469d      	mov	sp, r3
 800807e:	f7ff bbeb 	b.w	8007858 <taabe466+0xe8>
 8008082:	4605      	mov	r5, r0
 8008084:	e7e6      	b.n	8008054 <taabe466+0x8e4>
 8008086:	68a2      	ldr	r2, [r4, #8]
 8008088:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800808a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800808c:	0092      	lsls	r2, r2, #2
 800808e:	f001 ffc1 	bl	800a014 <memcpy>
 8008092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008094:	68a2      	ldr	r2, [r4, #8]
 8008096:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8008098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800809a:	fb03 f202 	mul.w	r2, r3, r2
 800809e:	0092      	lsls	r2, r2, #2
 80080a0:	f001 ffb8 	bl	800a014 <memcpy>
 80080a4:	e4c8      	b.n	8007a38 <taabe466+0x2c8>
 80080a6:	462c      	mov	r4, r5
 80080a8:	e473      	b.n	8007992 <taabe466+0x222>
 80080aa:	4618      	mov	r0, r3
 80080ac:	e78d      	b.n	8007fca <taabe466+0x85a>
 80080ae:	4671      	mov	r1, lr
 80080b0:	e435      	b.n	800791e <taabe466+0x1ae>
 80080b2:	4604      	mov	r4, r0
 80080b4:	e5ea      	b.n	8007c8c <taabe466+0x51c>
 80080b6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80080b8:	e5b0      	b.n	8007c1c <taabe466+0x4ac>
 80080ba:	bf00      	nop

080080bc <taabe347>:
 80080bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080c0:	6985      	ldr	r5, [r0, #24]
 80080c2:	6846      	ldr	r6, [r0, #4]
 80080c4:	68ab      	ldr	r3, [r5, #8]
 80080c6:	b083      	sub	sp, #12
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d040      	beq.n	800814e <taabe347+0x92>
 80080cc:	2400      	movs	r4, #0
 80080ce:	4680      	mov	r8, r0
 80080d0:	4627      	mov	r7, r4
 80080d2:	e003      	b.n	80080dc <taabe347+0x20>
 80080d4:	68ab      	ldr	r3, [r5, #8]
 80080d6:	3401      	adds	r4, #1
 80080d8:	429c      	cmp	r4, r3
 80080da:	d238      	bcs.n	800814e <taabe347+0x92>
 80080dc:	68eb      	ldr	r3, [r5, #12]
 80080de:	4630      	mov	r0, r6
 80080e0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80080e4:	f7ff f8fe 	bl	80072e4 <taabe55>
 80080e8:	3001      	adds	r0, #1
 80080ea:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80080ee:	d0f1      	beq.n	80080d4 <taabe347+0x18>
 80080f0:	692b      	ldr	r3, [r5, #16]
 80080f2:	9700      	str	r7, [sp, #0]
 80080f4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80080f8:	9701      	str	r7, [sp, #4]
 80080fa:	ab01      	add	r3, sp, #4
 80080fc:	466a      	mov	r2, sp
 80080fe:	4630      	mov	r0, r6
 8008100:	f7ff f93c 	bl	800737c <taabe462>
 8008104:	696a      	ldr	r2, [r5, #20]
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800810c:	3b01      	subs	r3, #1
 800810e:	4293      	cmp	r3, r2
 8008110:	d1e0      	bne.n	80080d4 <taabe347+0x18>
 8008112:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008114:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8008116:	f853 c009 	ldr.w	ip, [r3, r9]
 800811a:	6a2b      	ldr	r3, [r5, #32]
 800811c:	fb04 f303 	mul.w	r3, r4, r3
 8008120:	f1bc 0f00 	cmp.w	ip, #0
 8008124:	d00d      	beq.n	8008142 <taabe347+0x86>
 8008126:	eb03 020c 	add.w	r2, r3, ip
 800812a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800812e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8008132:	2200      	movs	r2, #0
 8008134:	f933 1b02 	ldrsh.w	r1, [r3], #2
 8008138:	4298      	cmp	r0, r3
 800813a:	440a      	add	r2, r1
 800813c:	d1fa      	bne.n	8008134 <taabe347+0x78>
 800813e:	fb92 fcfc 	sdiv	ip, r2, ip
 8008142:	f9b8 3014 	ldrsh.w	r3, [r8, #20]
 8008146:	4563      	cmp	r3, ip
 8008148:	ddc4      	ble.n	80080d4 <taabe347+0x18>
 800814a:	2001      	movs	r0, #1
 800814c:	e000      	b.n	8008150 <taabe347+0x94>
 800814e:	2000      	movs	r0, #0
 8008150:	b003      	add	sp, #12
 8008152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008156:	bf00      	nop

08008158 <taabe129>:
 8008158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800815c:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8008160:	6845      	ldr	r5, [r0, #4]
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	4692      	mov	sl, r2
 8008166:	9303      	str	r3, [sp, #12]
 8008168:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800816c:	6882      	ldr	r2, [r0, #8]
 800816e:	9004      	str	r0, [sp, #16]
 8008170:	468b      	mov	fp, r1
 8008172:	9202      	str	r2, [sp, #8]
 8008174:	b373      	cbz	r3, 80081d4 <taabe129+0x7c>
 8008176:	2400      	movs	r4, #0
 8008178:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
 800817c:	4627      	mov	r7, r4
 800817e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008182:	4628      	mov	r0, r5
 8008184:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8008188:	f7ff f8ac 	bl	80072e4 <taabe55>
 800818c:	4601      	mov	r1, r0
 800818e:	3101      	adds	r1, #1
 8008190:	ab07      	add	r3, sp, #28
 8008192:	aa06      	add	r2, sp, #24
 8008194:	4628      	mov	r0, r5
 8008196:	ea4f 0684 	mov.w	r6, r4, lsl #2
 800819a:	d016      	beq.n	80081ca <taabe129+0x72>
 800819c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80081a0:	9706      	str	r7, [sp, #24]
 80081a2:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80081a6:	9707      	str	r7, [sp, #28]
 80081a8:	f7ff f8e8 	bl	800737c <taabe462>
 80081ac:	f8d9 2014 	ldr.w	r2, [r9, #20]
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d106      	bne.n	80081ca <taabe129+0x72>
 80081bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80081c0:	599b      	ldr	r3, [r3, r6]
 80081c2:	4543      	cmp	r3, r8
 80081c4:	bfbc      	itt	lt
 80081c6:	4698      	movlt	r8, r3
 80081c8:	9402      	strlt	r4, [sp, #8]
 80081ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80081ce:	3401      	adds	r4, #1
 80081d0:	429c      	cmp	r4, r3
 80081d2:	d3d4      	bcc.n	800817e <taabe129+0x26>
 80081d4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80081d8:	9c02      	ldr	r4, [sp, #8]
 80081da:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
 80081de:	4628      	mov	r0, r5
 80081e0:	4641      	mov	r1, r8
 80081e2:	f7ff f87f 	bl	80072e4 <taabe55>
 80081e6:	4601      	mov	r1, r0
 80081e8:	4628      	mov	r0, r5
 80081ea:	f7ff f897 	bl	800731c <taabe296>
 80081ee:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80081f2:	f8cb 0000 	str.w	r0, [fp]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d03e      	beq.n	8008278 <taabe129+0x120>
 80081fa:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80081fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008202:	f8ca 0000 	str.w	r0, [sl]
 8008206:	2800      	cmp	r0, #0
 8008208:	dd38      	ble.n	800827c <taabe129+0x124>
 800820a:	2104      	movs	r1, #4
 800820c:	f001 fec0 	bl	8009f90 <calloc>
 8008210:	9b03      	ldr	r3, [sp, #12]
 8008212:	6018      	str	r0, [r3, #0]
 8008214:	2800      	cmp	r0, #0
 8008216:	d072      	beq.n	80082fe <taabe129+0x1a6>
 8008218:	f8da 0000 	ldr.w	r0, [sl]
 800821c:	2104      	movs	r1, #4
 800821e:	f001 feb7 	bl	8009f90 <calloc>
 8008222:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008224:	6018      	str	r0, [r3, #0]
 8008226:	2800      	cmp	r0, #0
 8008228:	d06b      	beq.n	8008302 <taabe129+0x1aa>
 800822a:	f8da 3000 	ldr.w	r3, [sl]
 800822e:	f1b3 0b01 	subs.w	fp, r3, #1
 8008232:	d436      	bmi.n	80082a2 <taabe129+0x14a>
 8008234:	f10d 0a1c 	add.w	sl, sp, #28
 8008238:	2700      	movs	r7, #0
 800823a:	4641      	mov	r1, r8
 800823c:	4628      	mov	r0, r5
 800823e:	f7ff f849 	bl	80072d4 <taabe227>
 8008242:	2400      	movs	r4, #0
 8008244:	4606      	mov	r6, r0
 8008246:	e00a      	b.n	800825e <taabe129+0x106>
 8008248:	f8cd a000 	str.w	sl, [sp]
 800824c:	e9cd 7706 	strd	r7, r7, [sp, #24]
 8008250:	f7ff f84c 	bl	80072ec <taabe644>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	4543      	cmp	r3, r8
 8008258:	f104 0401 	add.w	r4, r4, #1
 800825c:	d017      	beq.n	800828e <taabe129+0x136>
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	f7ff f83b 	bl	80072dc <taabe473>
 8008266:	4684      	mov	ip, r0
 8008268:	45a4      	cmp	ip, r4
 800826a:	4622      	mov	r2, r4
 800826c:	ab06      	add	r3, sp, #24
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	d8e9      	bhi.n	8008248 <taabe129+0xf0>
 8008274:	46b0      	mov	r8, r6
 8008276:	e7e0      	b.n	800823a <taabe129+0xe2>
 8008278:	f8ca 3000 	str.w	r3, [sl]
 800827c:	9a03      	ldr	r2, [sp, #12]
 800827e:	2300      	movs	r3, #0
 8008280:	6013      	str	r3, [r2, #0]
 8008282:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008284:	4618      	mov	r0, r3
 8008286:	6013      	str	r3, [r2, #0]
 8008288:	b009      	add	sp, #36	; 0x24
 800828a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800828e:	9906      	ldr	r1, [sp, #24]
 8008290:	4628      	mov	r0, r5
 8008292:	f7ff f837 	bl	8007304 <taabe356>
 8008296:	7803      	ldrb	r3, [r0, #0]
 8008298:	4604      	mov	r4, r0
 800829a:	b933      	cbnz	r3, 80082aa <taabe129+0x152>
 800829c:	f1bb 3fff 	cmp.w	fp, #4294967295
 80082a0:	d1e8      	bne.n	8008274 <taabe129+0x11c>
 80082a2:	2000      	movs	r0, #0
 80082a4:	b009      	add	sp, #36	; 0x24
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	9906      	ldr	r1, [sp, #24]
 80082ae:	f8d3 8000 	ldr.w	r8, [r3]
 80082b2:	4628      	mov	r0, r5
 80082b4:	f7ff f82c 	bl	8007310 <taabe385>
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	f848 002b 	str.w	r0, [r8, fp, lsl #2]
 80082be:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	ea4f 088b 	mov.w	r8, fp, lsl #2
 80082c8:	b132      	cbz	r2, 80082d8 <taabe129+0x180>
 80082ca:	9902      	ldr	r1, [sp, #8]
 80082cc:	fb01 f202 	mul.w	r2, r1, r2
 80082d0:	f8d9 1034 	ldr.w	r1, [r9, #52]	; 0x34
 80082d4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80082d8:	f852 1008 	ldr.w	r1, [r2, r8]
 80082dc:	9305      	str	r3, [sp, #20]
 80082de:	4628      	mov	r0, r5
 80082e0:	f7ff f836 	bl	8007350 <taabe59>
 80082e4:	9b05      	ldr	r3, [sp, #20]
 80082e6:	4602      	mov	r2, r0
 80082e8:	4618      	mov	r0, r3
 80082ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082ec:	4621      	mov	r1, r4
 80082ee:	681c      	ldr	r4, [r3, #0]
 80082f0:	f000 f858 	bl	80083a4 <taabe714>
 80082f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082f8:	f844 0008 	str.w	r0, [r4, r8]
 80082fc:	e7ce      	b.n	800829c <taabe129+0x144>
 80082fe:	2001      	movs	r0, #1
 8008300:	e7c2      	b.n	8008288 <taabe129+0x130>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	6818      	ldr	r0, [r3, #0]
 8008306:	f001 fe7d 	bl	800a004 <free>
 800830a:	2001      	movs	r0, #1
 800830c:	e7bc      	b.n	8008288 <taabe129+0x130>
 800830e:	bf00      	nop

08008310 <taabe599>:
 8008310:	6983      	ldr	r3, [r0, #24]
 8008312:	b4f0      	push	{r4, r5, r6, r7}
 8008314:	e9d3 0703 	ldrd	r0, r7, [r3, #12]
 8008318:	e9d3 6505 	ldrd	r6, r5, [r3, #20]
 800831c:	2200      	movs	r2, #0
 800831e:	2101      	movs	r1, #1
 8008320:	6099      	str	r1, [r3, #8]
 8008322:	69dc      	ldr	r4, [r3, #28]
 8008324:	6002      	str	r2, [r0, #0]
 8008326:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008328:	f04f 3cff 	mov.w	ip, #4294967295
 800832c:	f8c7 c000 	str.w	ip, [r7]
 8008330:	6032      	str	r2, [r6, #0]
 8008332:	7029      	strb	r1, [r5, #0]
 8008334:	6022      	str	r2, [r4, #0]
 8008336:	6001      	str	r1, [r0, #0]
 8008338:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800833c:	8002      	strh	r2, [r0, #0]
 800833e:	b109      	cbz	r1, 8008344 <taabe599+0x34>
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	bcf0      	pop	{r4, r5, r6, r7}
 8008346:	4770      	bx	lr

08008348 <binary_search>:
 8008348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834c:	1e4e      	subs	r6, r1, #1
 800834e:	d424      	bmi.n	800839a <binary_search+0x52>
 8008350:	4682      	mov	sl, r0
 8008352:	4619      	mov	r1, r3
 8008354:	4610      	mov	r0, r2
 8008356:	4690      	mov	r8, r2
 8008358:	4699      	mov	r9, r3
 800835a:	f002 fb1f 	bl	800a99c <strcspn>
 800835e:	2700      	movs	r7, #0
 8008360:	4683      	mov	fp, r0
 8008362:	e005      	b.n	8008370 <binary_search+0x28>
 8008364:	bfb4      	ite	lt
 8008366:	1c67      	addlt	r7, r4, #1
 8008368:	f104 36ff 	addge.w	r6, r4, #4294967295
 800836c:	42be      	cmp	r6, r7
 800836e:	db14      	blt.n	800839a <binary_search+0x52>
 8008370:	19bc      	adds	r4, r7, r6
 8008372:	1064      	asrs	r4, r4, #1
 8008374:	4649      	mov	r1, r9
 8008376:	f85a 5024 	ldr.w	r5, [sl, r4, lsl #2]
 800837a:	4628      	mov	r0, r5
 800837c:	f002 fb0e 	bl	800a99c <strcspn>
 8008380:	4558      	cmp	r0, fp
 8008382:	4602      	mov	r2, r0
 8008384:	4641      	mov	r1, r8
 8008386:	bfb8      	it	lt
 8008388:	465a      	movlt	r2, fp
 800838a:	4628      	mov	r0, r5
 800838c:	f002 fb17 	bl	800a9be <strncmp>
 8008390:	2800      	cmp	r0, #0
 8008392:	d1e7      	bne.n	8008364 <binary_search+0x1c>
 8008394:	4620      	mov	r0, r4
 8008396:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839a:	f04f 34ff 	mov.w	r4, #4294967295
 800839e:	4620      	mov	r0, r4
 80083a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080083a4 <taabe714>:
 80083a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	4606      	mov	r6, r0
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	4608      	mov	r0, r1
 80083ae:	460d      	mov	r5, r1
 80083b0:	4614      	mov	r4, r2
 80083b2:	f7f7 ff17 	bl	80001e4 <strlen>
 80083b6:	2803      	cmp	r0, #3
 80083b8:	d902      	bls.n	80083c0 <taabe714+0x1c>
 80083ba:	782b      	ldrb	r3, [r5, #0]
 80083bc:	2b70      	cmp	r3, #112	; 0x70
 80083be:	d003      	beq.n	80083c8 <taabe714+0x24>
 80083c0:	4620      	mov	r0, r4
 80083c2:	46bd      	mov	sp, r7
 80083c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c8:	786b      	ldrb	r3, [r5, #1]
 80083ca:	2b76      	cmp	r3, #118	; 0x76
 80083cc:	d1f8      	bne.n	80083c0 <taabe714+0x1c>
 80083ce:	78ab      	ldrb	r3, [r5, #2]
 80083d0:	2b2e      	cmp	r3, #46	; 0x2e
 80083d2:	d1f5      	bne.n	80083c0 <taabe714+0x1c>
 80083d4:	6831      	ldr	r1, [r6, #0]
 80083d6:	2900      	cmp	r1, #0
 80083d8:	d0f2      	beq.n	80083c0 <taabe714+0x1c>
 80083da:	ea4f 0981 	mov.w	r9, r1, lsl #2
 80083de:	f109 0307 	add.w	r3, r9, #7
 80083e2:	f023 0307 	bic.w	r3, r3, #7
 80083e6:	ebad 0d03 	sub.w	sp, sp, r3
 80083ea:	4668      	mov	r0, sp
 80083ec:	ebad 0d03 	sub.w	sp, sp, r3
 80083f0:	46e8      	mov	r8, sp
 80083f2:	f109 0a04 	add.w	sl, r9, #4
 80083f6:	dd0f      	ble.n	8008418 <taabe714+0x74>
 80083f8:	44b1      	add	r9, r6
 80083fa:	4632      	mov	r2, r6
 80083fc:	f1a8 0e04 	sub.w	lr, r8, #4
 8008400:	f1a0 0c04 	sub.w	ip, r0, #4
 8008404:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8008408:	4453      	add	r3, sl
 800840a:	f84e 3f04 	str.w	r3, [lr, #4]!
 800840e:	454a      	cmp	r2, r9
 8008410:	4433      	add	r3, r6
 8008412:	f84c 3f04 	str.w	r3, [ip, #4]!
 8008416:	d1f5      	bne.n	8008404 <taabe714+0x60>
 8008418:	4b25      	ldr	r3, [pc, #148]	; (80084b0 <taabe714+0x10c>)
 800841a:	462a      	mov	r2, r5
 800841c:	f7ff ff94 	bl	8008348 <binary_search>
 8008420:	2800      	cmp	r0, #0
 8008422:	dbcd      	blt.n	80083c0 <taabe714+0x1c>
 8008424:	f858 3020 	ldr.w	r3, [r8, r0, lsl #2]
 8008428:	eb06 0803 	add.w	r8, r6, r3
 800842c:	4640      	mov	r0, r8
 800842e:	f7f7 fed9 	bl	80001e4 <strlen>
 8008432:	eb08 0300 	add.w	r3, r8, r0
 8008436:	466d      	mov	r5, sp
 8008438:	f8d3 1001 	ldr.w	r1, [r3, #1]
 800843c:	2900      	cmp	r1, #0
 800843e:	d030      	beq.n	80084a2 <taabe714+0xfe>
 8008440:	ea4f 0381 	mov.w	r3, r1, lsl #2
 8008444:	f100 0205 	add.w	r2, r0, #5
 8008448:	f103 0007 	add.w	r0, r3, #7
 800844c:	f020 0007 	bic.w	r0, r0, #7
 8008450:	ebad 0d00 	sub.w	sp, sp, r0
 8008454:	466e      	mov	r6, sp
 8008456:	eb02 0e03 	add.w	lr, r2, r3
 800845a:	dd0c      	ble.n	8008476 <taabe714+0xd2>
 800845c:	3b04      	subs	r3, #4
 800845e:	4442      	add	r2, r8
 8008460:	eb06 0c03 	add.w	ip, r6, r3
 8008464:	1f30      	subs	r0, r6, #4
 8008466:	f852 3b04 	ldr.w	r3, [r2], #4
 800846a:	4473      	add	r3, lr
 800846c:	4443      	add	r3, r8
 800846e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008472:	4584      	cmp	ip, r0
 8008474:	d1f7      	bne.n	8008466 <taabe714+0xc2>
 8008476:	4b0f      	ldr	r3, [pc, #60]	; (80084b4 <taabe714+0x110>)
 8008478:	4622      	mov	r2, r4
 800847a:	4630      	mov	r0, r6
 800847c:	f7ff ff64 	bl	8008348 <binary_search>
 8008480:	2800      	cmp	r0, #0
 8008482:	db0e      	blt.n	80084a2 <taabe714+0xfe>
 8008484:	f856 6020 	ldr.w	r6, [r6, r0, lsl #2]
 8008488:	4630      	mov	r0, r6
 800848a:	f7f7 feab 	bl	80001e4 <strlen>
 800848e:	1e72      	subs	r2, r6, #1
 8008490:	2300      	movs	r3, #0
 8008492:	e004      	b.n	800849e <taabe714+0xfa>
 8008494:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8008498:	2909      	cmp	r1, #9
 800849a:	d005      	beq.n	80084a8 <taabe714+0x104>
 800849c:	3301      	adds	r3, #1
 800849e:	4283      	cmp	r3, r0
 80084a0:	dbf8      	blt.n	8008494 <taabe714+0xf0>
 80084a2:	4620      	mov	r0, r4
 80084a4:	46ad      	mov	sp, r5
 80084a6:	e78c      	b.n	80083c2 <taabe714+0x1e>
 80084a8:	1c9c      	adds	r4, r3, #2
 80084aa:	1930      	adds	r0, r6, r4
 80084ac:	46ad      	mov	sp, r5
 80084ae:	e788      	b.n	80083c2 <taabe714+0x1e>
 80084b0:	0800d3e4 	.word	0x0800d3e4
 80084b4:	0800d6e8 	.word	0x0800d6e8

080084b8 <taabe490>:
 80084b8:	2800      	cmp	r0, #0
 80084ba:	f000 80a1 	beq.w	8008600 <taabe490+0x148>
 80084be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c2:	2900      	cmp	r1, #0
 80084c4:	b083      	sub	sp, #12
 80084c6:	4689      	mov	r9, r1
 80084c8:	f340 8096 	ble.w	80085f8 <taabe490+0x140>
 80084cc:	f011 0f03 	tst.w	r1, #3
 80084d0:	f040 8092 	bne.w	80085f8 <taabe490+0x140>
 80084d4:	4617      	mov	r7, r2
 80084d6:	2a00      	cmp	r2, #0
 80084d8:	f000 808e 	beq.w	80085f8 <taabe490+0x140>
 80084dc:	461d      	mov	r5, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 808a 	beq.w	80085f8 <taabe490+0x140>
 80084e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8086 	beq.w	80085f8 <taabe490+0x140>
 80084ec:	4604      	mov	r4, r0
 80084ee:	4608      	mov	r0, r1
 80084f0:	f001 fd80 	bl	8009ff4 <malloc>
 80084f4:	4680      	mov	r8, r0
 80084f6:	6028      	str	r0, [r5, #0]
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f000 8088 	beq.w	800860e <taabe490+0x156>
 80084fe:	4621      	mov	r1, r4
 8008500:	464a      	mov	r2, r9
 8008502:	f001 fd87 	bl	800a014 <memcpy>
 8008506:	4a43      	ldr	r2, [pc, #268]	; (8008614 <taabe490+0x15c>)
 8008508:	f8d8 5000 	ldr.w	r5, [r8]
 800850c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008510:	ea4f 01a9 	mov.w	r1, r9, asr #2
 8008514:	2334      	movs	r3, #52	; 0x34
 8008516:	fbb3 f3f1 	udiv	r3, r3, r1
 800851a:	1d9e      	adds	r6, r3, #6
 800851c:	fb02 f606 	mul.w	r6, r2, r6
 8008520:	4a3d      	ldr	r2, [pc, #244]	; (8008618 <taabe490+0x160>)
 8008522:	fb02 6303 	mla	r3, r2, r3, r6
 8008526:	f102 4269 	add.w	r2, r2, #3909091328	; 0xe9000000
 800852a:	f5a2 12ab 	sub.w	r2, r2, #1400832	; 0x156000
 800852e:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 8008532:	3a9d      	subs	r2, #157	; 0x9d
 8008534:	4413      	add	r3, r2
 8008536:	3801      	subs	r0, #1
 8008538:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800853c:	3901      	subs	r1, #1
 800853e:	462c      	mov	r4, r5
 8008540:	469a      	mov	sl, r3
 8008542:	ea4f 0e96 	mov.w	lr, r6, lsr #2
 8008546:	f3c6 0981 	ubfx	r9, r6, #2, #2
 800854a:	b319      	cbz	r1, 8008594 <taabe490+0xdc>
 800854c:	4684      	mov	ip, r0
 800854e:	460d      	mov	r5, r1
 8008550:	ea8e 0305 	eor.w	r3, lr, r5
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	3d01      	subs	r5, #1
 800855a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 800855e:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8008562:	ea83 0b02 	eor.w	fp, r3, r2
 8008566:	ea4f 0284 	mov.w	r2, r4, lsl #2
 800856a:	ea82 1253 	eor.w	r2, r2, r3, lsr #5
 800856e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8008572:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
 8008576:	ea84 0406 	eor.w	r4, r4, r6
 800857a:	4413      	add	r3, r2
 800857c:	445c      	add	r4, fp
 800857e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8008582:	ea83 0304 	eor.w	r3, r3, r4
 8008586:	eba2 0403 	sub.w	r4, r2, r3
 800858a:	f8cc 4004 	str.w	r4, [ip, #4]
 800858e:	d1df      	bne.n	8008550 <taabe490+0x98>
 8008590:	f8d8 5000 	ldr.w	r5, [r8]
 8008594:	6803      	ldr	r3, [r0, #0]
 8008596:	f857 2029 	ldr.w	r2, [r7, r9, lsl #2]
 800859a:	ea83 0c02 	eor.w	ip, r3, r2
 800859e:	00a2      	lsls	r2, r4, #2
 80085a0:	ea82 1253 	eor.w	r2, r2, r3, lsr #5
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	ea83 03d4 	eor.w	r3, r3, r4, lsr #3
 80085aa:	4074      	eors	r4, r6
 80085ac:	f106 46c3 	add.w	r6, r6, #1635778560	; 0x61800000
 80085b0:	441a      	add	r2, r3
 80085b2:	44a4      	add	ip, r4
 80085b4:	f506 0691 	add.w	r6, r6, #4751360	; 0x488000
 80085b8:	ea82 020c 	eor.w	r2, r2, ip
 80085bc:	f206 6647 	addw	r6, r6, #1607	; 0x647
 80085c0:	1aac      	subs	r4, r5, r2
 80085c2:	4556      	cmp	r6, sl
 80085c4:	462b      	mov	r3, r5
 80085c6:	f8c8 4000 	str.w	r4, [r8]
 80085ca:	4625      	mov	r5, r4
 80085cc:	d1b9      	bne.n	8008542 <taabe490+0x8a>
 80085ce:	2c03      	cmp	r4, #3
 80085d0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80085d4:	d816      	bhi.n	8008604 <taabe490+0x14c>
 80085d6:	1ad2      	subs	r2, r2, r3
 80085d8:	f1a9 0904 	sub.w	r9, r9, #4
 80085dc:	444a      	add	r2, r9
 80085de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085e0:	2a00      	cmp	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	dd0e      	ble.n	8008604 <taabe490+0x14c>
 80085e6:	f108 0104 	add.w	r1, r8, #4
 80085ea:	4640      	mov	r0, r8
 80085ec:	f001 fd20 	bl	800a030 <memmove>
 80085f0:	2000      	movs	r0, #0
 80085f2:	b003      	add	sp, #12
 80085f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f8:	2003      	movs	r0, #3
 80085fa:	b003      	add	sp, #12
 80085fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008600:	2003      	movs	r0, #3
 8008602:	4770      	bx	lr
 8008604:	4640      	mov	r0, r8
 8008606:	f001 fcfd 	bl	800a004 <free>
 800860a:	2003      	movs	r0, #3
 800860c:	e7f5      	b.n	80085fa <taabe490+0x142>
 800860e:	2001      	movs	r0, #1
 8008610:	e7f3      	b.n	80085fa <taabe490+0x142>
 8008612:	bf00      	nop
 8008614:	9e3779b9 	.word	0x9e3779b9
 8008618:	61c88647 	.word	0x61c88647

0800861c <taabe267>:
 800861c:	b510      	push	{r4, lr}
 800861e:	2203      	movs	r2, #3
 8008620:	4604      	mov	r4, r0
 8008622:	f002 f9e0 	bl	800a9e6 <strncpy>
 8008626:	2300      	movs	r3, #0
 8008628:	70a3      	strb	r3, [r4, #2]
 800862a:	bd10      	pop	{r4, pc}

0800862c <taabe681>:
 800862c:	b508      	push	{r3, lr}
 800862e:	2203      	movs	r2, #3
 8008630:	f002 f9c5 	bl	800a9be <strncmp>
 8008634:	fab0 f080 	clz	r0, r0
 8008638:	0940      	lsrs	r0, r0, #5
 800863a:	bd08      	pop	{r3, pc}

0800863c <taabe592>:
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop

08008640 <taabe248>:
 8008640:	6880      	ldr	r0, [r0, #8]
 8008642:	b100      	cbz	r0, 8008646 <taabe248+0x6>
 8008644:	6800      	ldr	r0, [r0, #0]
 8008646:	4770      	bx	lr

08008648 <taabe525>:
 8008648:	b508      	push	{r3, lr}
 800864a:	2203      	movs	r2, #3
 800864c:	f002 f9b7 	bl	800a9be <strncmp>
 8008650:	fab0 f080 	clz	r0, r0
 8008654:	0940      	lsrs	r0, r0, #5
 8008656:	bd08      	pop	{r3, pc}

08008658 <taabe653>:
 8008658:	b430      	push	{r4, r5}
 800865a:	2500      	movs	r5, #0
 800865c:	4604      	mov	r4, r0
 800865e:	f010 0007 	ands.w	r0, r0, #7
 8008662:	601d      	str	r5, [r3, #0]
 8008664:	d117      	bne.n	8008696 <taabe653+0x3e>
 8008666:	0095      	lsls	r5, r2, #2
 8008668:	3527      	adds	r5, #39	; 0x27
 800866a:	f025 0507 	bic.w	r5, r5, #7
 800866e:	42a9      	cmp	r1, r5
 8008670:	dd0e      	ble.n	8008690 <taabe653+0x38>
 8008672:	3201      	adds	r2, #1
 8008674:	60a2      	str	r2, [r4, #8]
 8008676:	f104 021c 	add.w	r2, r4, #28
 800867a:	60e2      	str	r2, [r4, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	e9c4 2204 	strd	r2, r2, [r4, #16]
 8008682:	6061      	str	r1, [r4, #4]
 8008684:	6024      	str	r4, [r4, #0]
 8008686:	61e5      	str	r5, [r4, #28]
 8008688:	61a5      	str	r5, [r4, #24]
 800868a:	601c      	str	r4, [r3, #0]
 800868c:	bc30      	pop	{r4, r5}
 800868e:	4770      	bx	lr
 8008690:	2001      	movs	r0, #1
 8008692:	bc30      	pop	{r4, r5}
 8008694:	4770      	bx	lr
 8008696:	2003      	movs	r0, #3
 8008698:	bc30      	pop	{r4, r5}
 800869a:	4770      	bx	lr

0800869c <taabe284>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	6903      	ldr	r3, [r0, #16]
 80086a0:	6884      	ldr	r4, [r0, #8]
 80086a2:	429c      	cmp	r4, r3
 80086a4:	d02a      	beq.n	80086fc <taabe284+0x60>
 80086a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80086aa:	3b01      	subs	r3, #1
 80086ac:	68c4      	ldr	r4, [r0, #12]
 80086ae:	6847      	ldr	r7, [r0, #4]
 80086b0:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
 80086b4:	3107      	adds	r1, #7
 80086b6:	f021 0107 	bic.w	r1, r1, #7
 80086ba:	1875      	adds	r5, r6, r1
 80086bc:	42af      	cmp	r7, r5
 80086be:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80086c2:	db1b      	blt.n	80086fc <taabe284+0x60>
 80086c4:	4423      	add	r3, r4
 80086c6:	605d      	str	r5, [r3, #4]
 80086c8:	6904      	ldr	r4, [r0, #16]
 80086ca:	6943      	ldr	r3, [r0, #20]
 80086cc:	3401      	adds	r4, #1
 80086ce:	42a3      	cmp	r3, r4
 80086d0:	bfb8      	it	lt
 80086d2:	4623      	movlt	r3, r4
 80086d4:	6104      	str	r4, [r0, #16]
 80086d6:	6984      	ldr	r4, [r0, #24]
 80086d8:	6143      	str	r3, [r0, #20]
 80086da:	42ac      	cmp	r4, r5
 80086dc:	6803      	ldr	r3, [r0, #0]
 80086de:	bfb8      	it	lt
 80086e0:	462c      	movlt	r4, r5
 80086e2:	6184      	str	r4, [r0, #24]
 80086e4:	4433      	add	r3, r6
 80086e6:	b90a      	cbnz	r2, 80086ec <taabe284+0x50>
 80086e8:	4618      	mov	r0, r3
 80086ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ec:	460a      	mov	r2, r1
 80086ee:	4618      	mov	r0, r3
 80086f0:	2100      	movs	r1, #0
 80086f2:	f001 fcb7 	bl	800a064 <memset>
 80086f6:	4603      	mov	r3, r0
 80086f8:	4618      	mov	r0, r3
 80086fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086fc:	2300      	movs	r3, #0
 80086fe:	4618      	mov	r0, r3
 8008700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008702:	bf00      	nop

08008704 <taabe22>:
 8008704:	b1a1      	cbz	r1, 8008730 <taabe22+0x2c>
 8008706:	6903      	ldr	r3, [r0, #16]
 8008708:	2b01      	cmp	r3, #1
 800870a:	dd11      	ble.n	8008730 <taabe22+0x2c>
 800870c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8008710:	b410      	push	{r4}
 8008712:	3a02      	subs	r2, #2
 8008714:	68c4      	ldr	r4, [r0, #12]
 8008716:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 800871a:	6802      	ldr	r2, [r0, #0]
 800871c:	4422      	add	r2, r4
 800871e:	4291      	cmp	r1, r2
 8008720:	bf08      	it	eq
 8008722:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8008726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800872a:	bf08      	it	eq
 800872c:	6103      	streq	r3, [r0, #16]
 800872e:	4770      	bx	lr
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop

08008734 <taabe590>:
 8008734:	6980      	ldr	r0, [r0, #24]
 8008736:	4770      	bx	lr

08008738 <taabe734>:
 8008738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873c:	f04f 0800 	mov.w	r8, #0
 8008740:	4615      	mov	r5, r2
 8008742:	f8c2 8000 	str.w	r8, [r2]
 8008746:	460f      	mov	r7, r1
 8008748:	2201      	movs	r2, #1
 800874a:	2110      	movs	r1, #16
 800874c:	4606      	mov	r6, r0
 800874e:	f7ff ffa5 	bl	800869c <taabe284>
 8008752:	b180      	cbz	r0, 8008776 <taabe734+0x3e>
 8008754:	e9c0 6700 	strd	r6, r7, [r0]
 8008758:	f8a0 8008 	strh.w	r8, [r0, #8]
 800875c:	f100 020c 	add.w	r2, r0, #12
 8008760:	4604      	mov	r4, r0
 8008762:	4639      	mov	r1, r7
 8008764:	4630      	mov	r0, r6
 8008766:	f000 f91d 	bl	80089a4 <taabe378>
 800876a:	4606      	mov	r6, r0
 800876c:	b938      	cbnz	r0, 800877e <taabe734+0x46>
 800876e:	602c      	str	r4, [r5, #0]
 8008770:	4630      	mov	r0, r6
 8008772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008776:	2601      	movs	r6, #1
 8008778:	4630      	mov	r0, r6
 800877a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800877e:	68e0      	ldr	r0, [r4, #12]
 8008780:	f000 f952 	bl	8008a28 <taabe355>
 8008784:	6820      	ldr	r0, [r4, #0]
 8008786:	4621      	mov	r1, r4
 8008788:	f7ff ffbc 	bl	8008704 <taabe22>
 800878c:	4630      	mov	r0, r6
 800878e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008792:	bf00      	nop

08008794 <taabe4>:
 8008794:	b150      	cbz	r0, 80087ac <taabe4+0x18>
 8008796:	b510      	push	{r4, lr}
 8008798:	4604      	mov	r4, r0
 800879a:	68c0      	ldr	r0, [r0, #12]
 800879c:	f000 f944 	bl	8008a28 <taabe355>
 80087a0:	6820      	ldr	r0, [r4, #0]
 80087a2:	4621      	mov	r1, r4
 80087a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a8:	f7ff bfac 	b.w	8008704 <taabe22>
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop

080087b0 <taabe453>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	4688      	mov	r8, r1
 80087b6:	ed2d 8b04 	vpush	{d8-d9}
 80087ba:	e9d0 b100 	ldrd	fp, r1, [r0]
 80087be:	b083      	sub	sp, #12
 80087c0:	4606      	mov	r6, r0
 80087c2:	0089      	lsls	r1, r1, #2
 80087c4:	4617      	mov	r7, r2
 80087c6:	4658      	mov	r0, fp
 80087c8:	2200      	movs	r2, #0
 80087ca:	f7ff ff67 	bl	800869c <taabe284>
 80087ce:	9000      	str	r0, [sp, #0]
 80087d0:	2800      	cmp	r0, #0
 80087d2:	f000 80b9 	beq.w	8008948 <taabe453+0x198>
 80087d6:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80087da:	f9b8 3000 	ldrsh.w	r3, [r8]
 80087de:	eddf 6a66 	vldr	s13, [pc, #408]	; 8008978 <taabe453+0x1c8>
 80087e2:	ee07 1a10 	vmov	s14, r1
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80087ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087f2:	6871      	ldr	r1, [r6, #4]
 80087f4:	eee7 7a66 	vfms.f32	s15, s14, s13
 80087f8:	2901      	cmp	r1, #1
 80087fa:	edc0 7a00 	vstr	s15, [r0]
 80087fe:	dd15      	ble.n	800882c <taabe453+0x7c>
 8008800:	f1a8 0202 	sub.w	r2, r8, #2
 8008804:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8008808:	4644      	mov	r4, r8
 800880a:	1d05      	adds	r5, r0, #4
 800880c:	ee07 3a10 	vmov	s14, r3
 8008810:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800881c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008820:	4294      	cmp	r4, r2
 8008822:	eee7 7a66 	vfms.f32	s15, s14, s13
 8008826:	ece5 7a01 	vstmia	r5!, {s15}
 800882a:	d1ef      	bne.n	800880c <taabe453+0x5c>
 800882c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008830:	3b01      	subs	r3, #1
 8008832:	2200      	movs	r2, #0
 8008834:	f938 3013 	ldrsh.w	r3, [r8, r3, lsl #1]
 8008838:	8133      	strh	r3, [r6, #8]
 800883a:	f240 4104 	movw	r1, #1028	; 0x404
 800883e:	4658      	mov	r0, fp
 8008840:	f7ff ff2c 	bl	800869c <taabe284>
 8008844:	4682      	mov	sl, r0
 8008846:	2800      	cmp	r0, #0
 8008848:	f000 808a 	beq.w	8008960 <taabe453+0x1b0>
 800884c:	9900      	ldr	r1, [sp, #0]
 800884e:	68f0      	ldr	r0, [r6, #12]
 8008850:	4652      	mov	r2, sl
 8008852:	f000 f8fb 	bl	8008a4c <taabe716>
 8008856:	4601      	mov	r1, r0
 8008858:	9001      	str	r0, [sp, #4]
 800885a:	2800      	cmp	r0, #0
 800885c:	d161      	bne.n	8008922 <taabe453+0x172>
 800885e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 8008994 <taabe453+0x1e4>
 8008862:	eddf 9a46 	vldr	s19, [pc, #280]	; 800897c <taabe453+0x1cc>
 8008866:	eddf 8a46 	vldr	s17, [pc, #280]	; 8008980 <taabe453+0x1d0>
 800886a:	ed9f 8a46 	vldr	s16, [pc, #280]	; 8008984 <taabe453+0x1d4>
 800886e:	ed9f 9a46 	vldr	s18, [pc, #280]	; 8008988 <taabe453+0x1d8>
 8008872:	4e46      	ldr	r6, [pc, #280]	; (800898c <taabe453+0x1dc>)
 8008874:	4d46      	ldr	r5, [pc, #280]	; (8008990 <taabe453+0x1e0>)
 8008876:	2401      	movs	r4, #1
 8008878:	42a1      	cmp	r1, r4
 800887a:	f1a7 0702 	sub.w	r7, r7, #2
 800887e:	f109 084e 	add.w	r8, r9, #78	; 0x4e
 8008882:	f04f 0003 	mov.w	r0, #3
 8008886:	da42      	bge.n	800890e <taabe453+0x15e>
 8008888:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800897c <taabe453+0x1cc>
 800888c:	ed95 6a00 	vldr	s12, [r5]
 8008890:	eef0 7a47 	vmov.f32	s15, s14
 8008894:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008898:	eb0a 0c84 	add.w	ip, sl, r4, lsl #2
 800889c:	ecf1 6a01 	vldmia	r1!, {s13}
 80088a0:	458c      	cmp	ip, r1
 80088a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80088aa:	d1f7      	bne.n	800889c <taabe453+0xec>
 80088ac:	42a0      	cmp	r0, r4
 80088ae:	dd0d      	ble.n	80088cc <taabe453+0x11c>
 80088b0:	ed96 6a00 	vldr	s12, [r6]
 80088b4:	eb0a 0184 	add.w	r1, sl, r4, lsl #2
 80088b8:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80088bc:	ecf1 6a01 	vldmia	r1!, {s13}
 80088c0:	4288      	cmp	r0, r1
 80088c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80088ca:	d1f7      	bne.n	80088bc <taabe453+0x10c>
 80088cc:	ee27 7a28 	vmul.f32	s14, s14, s17
 80088d0:	eeb4 7ac8 	vcmpe.f32	s14, s16
 80088d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d8:	da31      	bge.n	800893e <taabe453+0x18e>
 80088da:	eeb4 7ac9 	vcmpe.f32	s14, s18
 80088de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e2:	d939      	bls.n	8008958 <taabe453+0x1a8>
 80088e4:	ee17 0a10 	vmov	r0, s14
 80088e8:	f7f7 fefe 	bl	80006e8 <__aeabi_f2lz>
 80088ec:	f000 fb6a 	bl	8008fc4 <taabe312>
 80088f0:	45c8      	cmp	r8, r9
 80088f2:	f827 0f02 	strh.w	r0, [r7, #2]!
 80088f6:	f106 0604 	add.w	r6, r6, #4
 80088fa:	f105 0504 	add.w	r5, r5, #4
 80088fe:	d010      	beq.n	8008922 <taabe453+0x172>
 8008900:	4621      	mov	r1, r4
 8008902:	f9b9 0002 	ldrsh.w	r0, [r9, #2]
 8008906:	f939 4b02 	ldrsh.w	r4, [r9], #2
 800890a:	42a1      	cmp	r1, r4
 800890c:	dbbc      	blt.n	8008888 <taabe453+0xd8>
 800890e:	42a0      	cmp	r0, r4
 8008910:	bfd8      	it	le
 8008912:	eeb0 7a69 	vmovle.f32	s14, s19
 8008916:	dde5      	ble.n	80088e4 <taabe453+0x134>
 8008918:	eddf 7a18 	vldr	s15, [pc, #96]	; 800897c <taabe453+0x1cc>
 800891c:	eeb0 7a67 	vmov.f32	s14, s15
 8008920:	e7c6      	b.n	80088b0 <taabe453+0x100>
 8008922:	4651      	mov	r1, sl
 8008924:	4658      	mov	r0, fp
 8008926:	f7ff feed 	bl	8008704 <taabe22>
 800892a:	4658      	mov	r0, fp
 800892c:	9900      	ldr	r1, [sp, #0]
 800892e:	f7ff fee9 	bl	8008704 <taabe22>
 8008932:	9801      	ldr	r0, [sp, #4]
 8008934:	b003      	add	sp, #12
 8008936:	ecbd 8b04 	vpop	{d8-d9}
 800893a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893e:	f04f 30ff 	mov.w	r0, #4294967295
 8008942:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008946:	e7d1      	b.n	80088ec <taabe453+0x13c>
 8008948:	2301      	movs	r3, #1
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	9801      	ldr	r0, [sp, #4]
 800894e:	b003      	add	sp, #12
 8008950:	ecbd 8b04 	vpop	{d8-d9}
 8008954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008958:	2000      	movs	r0, #0
 800895a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800895e:	e7c5      	b.n	80088ec <taabe453+0x13c>
 8008960:	4658      	mov	r0, fp
 8008962:	9900      	ldr	r1, [sp, #0]
 8008964:	f7ff fece 	bl	8008704 <taabe22>
 8008968:	2301      	movs	r3, #1
 800896a:	9301      	str	r3, [sp, #4]
 800896c:	9801      	ldr	r0, [sp, #4]
 800896e:	b003      	add	sp, #12
 8008970:	ecbd 8b04 	vpop	{d8-d9}
 8008974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008978:	3f7851ec 	.word	0x3f7851ec
 800897c:	00000000 	.word	0x00000000
 8008980:	50000000 	.word	0x50000000
 8008984:	5f000000 	.word	0x5f000000
 8008988:	df000000 	.word	0xdf000000
 800898c:	0800d7ec 	.word	0x0800d7ec
 8008990:	0800d88c 	.word	0x0800d88c
 8008994:	0800d79c 	.word	0x0800d79c

08008998 <taabe57>:
 8008998:	4603      	mov	r3, r0
 800899a:	2200      	movs	r2, #0
 800899c:	68c0      	ldr	r0, [r0, #12]
 800899e:	811a      	strh	r2, [r3, #8]
 80089a0:	f000 b914 	b.w	8008bcc <taabe642>

080089a4 <taabe378>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	2300      	movs	r3, #0
 80089a8:	4617      	mov	r7, r2
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	460d      	mov	r5, r1
 80089ae:	2201      	movs	r2, #1
 80089b0:	2110      	movs	r1, #16
 80089b2:	4606      	mov	r6, r0
 80089b4:	f7ff fe72 	bl	800869c <taabe284>
 80089b8:	b330      	cbz	r0, 8008a08 <taabe378+0x64>
 80089ba:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80089be:	e9c0 6500 	strd	r6, r5, [r0]
 80089c2:	4604      	mov	r4, r0
 80089c4:	db09      	blt.n	80089da <taabe378+0x36>
 80089c6:	f104 010c 	add.w	r1, r4, #12
 80089ca:	4630      	mov	r0, r6
 80089cc:	f000 fa48 	bl	8008e60 <taabe72>
 80089d0:	4605      	mov	r5, r0
 80089d2:	b9e0      	cbnz	r0, 8008a0e <taabe378+0x6a>
 80089d4:	603c      	str	r4, [r7, #0]
 80089d6:	4628      	mov	r0, r5
 80089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089da:	f5c5 7100 	rsb	r1, r5, #512	; 0x200
 80089de:	2201      	movs	r2, #1
 80089e0:	0089      	lsls	r1, r1, #2
 80089e2:	4630      	mov	r0, r6
 80089e4:	f7ff fe5a 	bl	800869c <taabe284>
 80089e8:	60a0      	str	r0, [r4, #8]
 80089ea:	2800      	cmp	r0, #0
 80089ec:	d1eb      	bne.n	80089c6 <taabe378+0x22>
 80089ee:	68e0      	ldr	r0, [r4, #12]
 80089f0:	f000 fa48 	bl	8008e84 <taabe544>
 80089f4:	6820      	ldr	r0, [r4, #0]
 80089f6:	68a1      	ldr	r1, [r4, #8]
 80089f8:	f7ff fe84 	bl	8008704 <taabe22>
 80089fc:	6820      	ldr	r0, [r4, #0]
 80089fe:	4621      	mov	r1, r4
 8008a00:	f7ff fe80 	bl	8008704 <taabe22>
 8008a04:	2501      	movs	r5, #1
 8008a06:	e7e6      	b.n	80089d6 <taabe378+0x32>
 8008a08:	2501      	movs	r5, #1
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a0e:	68e0      	ldr	r0, [r4, #12]
 8008a10:	f000 fa38 	bl	8008e84 <taabe544>
 8008a14:	6820      	ldr	r0, [r4, #0]
 8008a16:	68a1      	ldr	r1, [r4, #8]
 8008a18:	f7ff fe74 	bl	8008704 <taabe22>
 8008a1c:	6820      	ldr	r0, [r4, #0]
 8008a1e:	4621      	mov	r1, r4
 8008a20:	f7ff fe70 	bl	8008704 <taabe22>
 8008a24:	4628      	mov	r0, r5
 8008a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a28 <taabe355>:
 8008a28:	b170      	cbz	r0, 8008a48 <taabe355+0x20>
 8008a2a:	b510      	push	{r4, lr}
 8008a2c:	4604      	mov	r4, r0
 8008a2e:	68c0      	ldr	r0, [r0, #12]
 8008a30:	f000 fa28 	bl	8008e84 <taabe544>
 8008a34:	6820      	ldr	r0, [r4, #0]
 8008a36:	68a1      	ldr	r1, [r4, #8]
 8008a38:	f7ff fe64 	bl	8008704 <taabe22>
 8008a3c:	6820      	ldr	r0, [r4, #0]
 8008a3e:	4621      	mov	r1, r4
 8008a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a44:	f7ff be5e 	b.w	8008704 <taabe22>
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop

08008a4c <taabe716>:
 8008a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a50:	ed2d 8b02 	vpush	{d8}
 8008a54:	6807      	ldr	r7, [r0, #0]
 8008a56:	b083      	sub	sp, #12
 8008a58:	4605      	mov	r5, r0
 8008a5a:	4692      	mov	sl, r2
 8008a5c:	4688      	mov	r8, r1
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a64:	4638      	mov	r0, r7
 8008a66:	f7ff fe19 	bl	800869c <taabe284>
 8008a6a:	2800      	cmp	r0, #0
 8008a6c:	d04f      	beq.n	8008b0e <taabe716+0xc2>
 8008a6e:	4604      	mov	r4, r0
 8008a70:	2200      	movs	r2, #0
 8008a72:	f640 0108 	movw	r1, #2056	; 0x808
 8008a76:	4638      	mov	r0, r7
 8008a78:	f7ff fe10 	bl	800869c <taabe284>
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f000 808b 	beq.w	8008b9a <taabe716+0x14e>
 8008a84:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8008a88:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
 8008a8c:	db54      	blt.n	8008b38 <taabe716+0xec>
 8008a8e:	494d      	ldr	r1, [pc, #308]	; (8008bc4 <taabe716+0x178>)
 8008a90:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008bc8 <taabe716+0x17c>
 8008a94:	4622      	mov	r2, r4
 8008a96:	f504 6300 	add.w	r3, r4, #2048	; 0x800
 8008a9a:	f501 707f 	add.w	r0, r1, #1020	; 0x3fc
 8008a9e:	e001      	b.n	8008aa4 <taabe716+0x58>
 8008aa0:	ecf1 7a01 	vldmia	r1!, {s15}
 8008aa4:	ed92 7a00 	vldr	s14, [r2]
 8008aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008aac:	4281      	cmp	r1, r0
 8008aae:	eca2 7a01 	vstmia	r2!, {s14}
 8008ab2:	ed33 7a01 	vldmdb	r3!, {s14}
 8008ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008aba:	edc3 7a00 	vstr	s15, [r3]
 8008abe:	d1ef      	bne.n	8008aa0 <taabe716+0x54>
 8008ac0:	68e8      	ldr	r0, [r5, #12]
 8008ac2:	4632      	mov	r2, r6
 8008ac4:	4621      	mov	r1, r4
 8008ac6:	f000 f9e3 	bl	8008e90 <taabe429>
 8008aca:	4605      	mov	r5, r0
 8008acc:	bb30      	cbnz	r0, 8008b1c <taabe716+0xd0>
 8008ace:	4652      	mov	r2, sl
 8008ad0:	f106 0308 	add.w	r3, r6, #8
 8008ad4:	f506 6101 	add.w	r1, r6, #2064	; 0x810
 8008ad8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8008adc:	ed13 7a02 	vldr	s14, [r3, #-8]
 8008ae0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	eee7 7a07 	vfma.f32	s15, s14, s14
 8008aea:	4299      	cmp	r1, r3
 8008aec:	ece2 7a01 	vstmia	r2!, {s15}
 8008af0:	d1f2      	bne.n	8008ad8 <taabe716+0x8c>
 8008af2:	4631      	mov	r1, r6
 8008af4:	4638      	mov	r0, r7
 8008af6:	f7ff fe05 	bl	8008704 <taabe22>
 8008afa:	4638      	mov	r0, r7
 8008afc:	4621      	mov	r1, r4
 8008afe:	f7ff fe01 	bl	8008704 <taabe22>
 8008b02:	4628      	mov	r0, r5
 8008b04:	b003      	add	sp, #12
 8008b06:	ecbd 8b02 	vpop	{d8}
 8008b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	2501      	movs	r5, #1
 8008b10:	4628      	mov	r0, r5
 8008b12:	b003      	add	sp, #12
 8008b14:	ecbd 8b02 	vpop	{d8}
 8008b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff fdf0 	bl	8008704 <taabe22>
 8008b24:	4638      	mov	r0, r7
 8008b26:	4631      	mov	r1, r6
 8008b28:	f7ff fdec 	bl	8008704 <taabe22>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	b003      	add	sp, #12
 8008b30:	ecbd 8b02 	vpop	{d8}
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b38:	f5c9 7300 	rsb	r3, r9, #512	; 0x200
 8008b3c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8008b40:	68a9      	ldr	r1, [r5, #8]
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	465a      	mov	r2, fp
 8008b46:	4620      	mov	r0, r4
 8008b48:	ee08 1a90 	vmov	s17, r1
 8008b4c:	f001 fa70 	bl	800a030 <memmove>
 8008b50:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8008b54:	461a      	mov	r2, r3
 8008b56:	4641      	mov	r1, r8
 8008b58:	eb04 000b 	add.w	r0, r4, fp
 8008b5c:	ee08 3a10 	vmov	s16, r3
 8008b60:	f001 fa66 	bl	800a030 <memmove>
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	4599      	cmp	r9, r3
 8008b68:	da22      	bge.n	8008bb0 <taabe716+0x164>
 8008b6a:	ee18 1a90 	vmov	r1, s17
 8008b6e:	eba3 0909 	sub.w	r9, r3, r9
 8008b72:	ee18 3a10 	vmov	r3, s16
 8008b76:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8008b7a:	464a      	mov	r2, r9
 8008b7c:	4419      	add	r1, r3
 8008b7e:	ee18 0a90 	vmov	r0, s17
 8008b82:	ed8d 8a01 	vstr	s16, [sp, #4]
 8008b86:	f001 fa53 	bl	800a030 <memmove>
 8008b8a:	ee18 0a90 	vmov	r0, s17
 8008b8e:	9a01      	ldr	r2, [sp, #4]
 8008b90:	4641      	mov	r1, r8
 8008b92:	4448      	add	r0, r9
 8008b94:	f001 fa4c 	bl	800a030 <memmove>
 8008b98:	e779      	b.n	8008a8e <taabe716+0x42>
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	f7ff fdb1 	bl	8008704 <taabe22>
 8008ba2:	2501      	movs	r5, #1
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	b003      	add	sp, #12
 8008ba8:	ecbd 8b02 	vpop	{d8}
 8008bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb0:	eba9 0103 	sub.w	r1, r9, r3
 8008bb4:	ee18 0a90 	vmov	r0, s17
 8008bb8:	eb08 0181 	add.w	r1, r8, r1, lsl #2
 8008bbc:	465a      	mov	r2, fp
 8008bbe:	f001 fa37 	bl	800a030 <memmove>
 8008bc2:	e764      	b.n	8008a8e <taabe716+0x42>
 8008bc4:	0800d930 	.word	0x0800d930
 8008bc8:	00000000 	.word	0x00000000

08008bcc <taabe642>:
 8008bcc:	6883      	ldr	r3, [r0, #8]
 8008bce:	b13b      	cbz	r3, 8008be0 <taabe642+0x14>
 8008bd0:	6842      	ldr	r2, [r0, #4]
 8008bd2:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	0092      	lsls	r2, r2, #2
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f001 ba42 	b.w	800a064 <memset>
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop

08008be4 <taabe572.part.0>:
 8008be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008be8:	2300      	movs	r3, #0
 8008bea:	b087      	sub	sp, #28
 8008bec:	4604      	mov	r4, r0
 8008bee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008bf2:	460e      	mov	r6, r1
 8008bf4:	f7f7 faf6 	bl	80001e4 <strlen>
 8008bf8:	ab03      	add	r3, sp, #12
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	aa02      	add	r2, sp, #8
 8008bfe:	4620      	mov	r0, r4
 8008c00:	f001 f886 	bl	8009d10 <taabe171>
 8008c04:	4604      	mov	r4, r0
 8008c06:	b118      	cbz	r0, 8008c10 <taabe572.part.0+0x2c>
 8008c08:	4620      	mov	r0, r4
 8008c0a:	b007      	add	sp, #28
 8008c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c10:	ab05      	add	r3, sp, #20
 8008c12:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	4a2d      	ldr	r2, [pc, #180]	; (8008cd0 <taabe572.part.0+0xec>)
 8008c1a:	9903      	ldr	r1, [sp, #12]
 8008c1c:	9802      	ldr	r0, [sp, #8]
 8008c1e:	ab04      	add	r3, sp, #16
 8008c20:	f7ff fc4a 	bl	80084b8 <taabe490>
 8008c24:	4604      	mov	r4, r0
 8008c26:	9802      	ldr	r0, [sp, #8]
 8008c28:	f001 f9ec 	bl	800a004 <free>
 8008c2c:	2c00      	cmp	r4, #0
 8008c2e:	d1eb      	bne.n	8008c08 <taabe572.part.0+0x24>
 8008c30:	2126      	movs	r1, #38	; 0x26
 8008c32:	2001      	movs	r0, #1
 8008c34:	f001 f9ac 	bl	8009f90 <calloc>
 8008c38:	4605      	mov	r5, r0
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d042      	beq.n	8008cc4 <taabe572.part.0+0xe0>
 8008c3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008c42:	f1b9 0f1f 	cmp.w	r9, #31
 8008c46:	dd2d      	ble.n	8008ca4 <taabe572.part.0+0xc0>
 8008c48:	9f04      	ldr	r7, [sp, #16]
 8008c4a:	f8df e088 	ldr.w	lr, [pc, #136]	; 8008cd4 <taabe572.part.0+0xf0>
 8008c4e:	6879      	ldr	r1, [r7, #4]
 8008c50:	68ba      	ldr	r2, [r7, #8]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4684      	mov	ip, r0
 8008c56:	6838      	ldr	r0, [r7, #0]
 8008c58:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	6938      	ldr	r0, [r7, #16]
 8008c62:	6979      	ldr	r1, [r7, #20]
 8008c64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008c68:	f8de 1000 	ldr.w	r1, [lr]
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f001 fecd 	bl	800aa0c <strspn>
 8008c72:	4680      	mov	r8, r0
 8008c74:	4628      	mov	r0, r5
 8008c76:	f7f7 fab5 	bl	80001e4 <strlen>
 8008c7a:	4580      	cmp	r8, r0
 8008c7c:	d11a      	bne.n	8008cb4 <taabe572.part.0+0xd0>
 8008c7e:	f1b9 0f20 	cmp.w	r9, #32
 8008c82:	d017      	beq.n	8008cb4 <taabe572.part.0+0xd0>
 8008c84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008c88:	085a      	lsrs	r2, r3, #1
 8008c8a:	f003 0301 	and.w	r3, r3, #1
 8008c8e:	4638      	mov	r0, r7
 8008c90:	846a      	strh	r2, [r5, #34]	; 0x22
 8008c92:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008c96:	f001 f9b5 	bl	800a004 <free>
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	6035      	str	r5, [r6, #0]
 8008c9e:	b007      	add	sp, #28
 8008ca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ca4:	9804      	ldr	r0, [sp, #16]
 8008ca6:	f001 f9ad 	bl	800a004 <free>
 8008caa:	4628      	mov	r0, r5
 8008cac:	f001 f9aa 	bl	800a004 <free>
 8008cb0:	2403      	movs	r4, #3
 8008cb2:	e7a9      	b.n	8008c08 <taabe572.part.0+0x24>
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	f001 f9a5 	bl	800a004 <free>
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f001 f9a2 	bl	800a004 <free>
 8008cc0:	2403      	movs	r4, #3
 8008cc2:	e7a1      	b.n	8008c08 <taabe572.part.0+0x24>
 8008cc4:	9804      	ldr	r0, [sp, #16]
 8008cc6:	f001 f99d 	bl	800a004 <free>
 8008cca:	2401      	movs	r4, #1
 8008ccc:	e79c      	b.n	8008c08 <taabe572.part.0+0x24>
 8008cce:	bf00      	nop
 8008cd0:	200004e0 	.word	0x200004e0
 8008cd4:	200004dc 	.word	0x200004dc

08008cd8 <taabe572>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	2300      	movs	r3, #0
 8008cdc:	600b      	str	r3, [r1, #0]
 8008cde:	460c      	mov	r4, r1
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	f7f7 fa7f 	bl	80001e4 <strlen>
 8008ce6:	282f      	cmp	r0, #47	; 0x2f
 8008ce8:	d905      	bls.n	8008cf6 <taabe572+0x1e>
 8008cea:	4621      	mov	r1, r4
 8008cec:	4628      	mov	r0, r5
 8008cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cf2:	f7ff bf77 	b.w	8008be4 <taabe572.part.0>
 8008cf6:	2003      	movs	r0, #3
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	bf00      	nop

08008cfc <taabe246>:
 8008cfc:	b108      	cbz	r0, 8008d02 <taabe246+0x6>
 8008cfe:	f001 b981 	b.w	800a004 <free>
 8008d02:	4770      	bx	lr

08008d04 <taabe695>:
 8008d04:	b510      	push	{r4, lr}
 8008d06:	b082      	sub	sp, #8
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	f7f7 fa69 	bl	80001e4 <strlen>
 8008d12:	282f      	cmp	r0, #47	; 0x2f
 8008d14:	d90c      	bls.n	8008d30 <taabe695+0x2c>
 8008d16:	4620      	mov	r0, r4
 8008d18:	a901      	add	r1, sp, #4
 8008d1a:	f7ff ff63 	bl	8008be4 <taabe572.part.0>
 8008d1e:	9b01      	ldr	r3, [sp, #4]
 8008d20:	4604      	mov	r4, r0
 8008d22:	b113      	cbz	r3, 8008d2a <taabe695+0x26>
 8008d24:	4618      	mov	r0, r3
 8008d26:	f001 f96d 	bl	800a004 <free>
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	b002      	add	sp, #8
 8008d2e:	bd10      	pop	{r4, pc}
 8008d30:	2403      	movs	r4, #3
 8008d32:	4620      	mov	r0, r4
 8008d34:	b002      	add	sp, #8
 8008d36:	bd10      	pop	{r4, pc}

08008d38 <taabe250>:
 8008d38:	b40f      	push	{r0, r1, r2, r3}
 8008d3a:	b500      	push	{lr}
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <taabe250+0x34>)
 8008d3e:	b083      	sub	sp, #12
 8008d40:	aa04      	add	r2, sp, #16
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f852 1b04 	ldr.w	r1, [r2], #4
 8008d48:	9201      	str	r2, [sp, #4]
 8008d4a:	b923      	cbnz	r3, 8008d56 <taabe250+0x1e>
 8008d4c:	b003      	add	sp, #12
 8008d4e:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d52:	b004      	add	sp, #16
 8008d54:	4770      	bx	lr
 8008d56:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <taabe250+0x38>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6898      	ldr	r0, [r3, #8]
 8008d5c:	f001 fbda 	bl	800a514 <vfiprintf>
 8008d60:	b003      	add	sp, #12
 8008d62:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d66:	b004      	add	sp, #16
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	200004f0 	.word	0x200004f0
 8008d70:	2000050c 	.word	0x2000050c

08008d74 <pv_fft_complex_DIT_RN>:
 8008d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	eddf 4a36 	vldr	s9, [pc, #216]	; 8008e58 <pv_fft_complex_DIT_RN+0xe4>
 8008d80:	9001      	str	r0, [sp, #4]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	f44f 7b80 	mov.w	fp, #256	; 0x100
 8008d88:	2401      	movs	r4, #1
 8008d8a:	f04f 0a02 	mov.w	sl, #2
 8008d8e:	f04f 0980 	mov.w	r9, #128	; 0x80
 8008d92:	9f01      	ldr	r7, [sp, #4]
 8008d94:	ea4f 0e8a 	mov.w	lr, sl, lsl #2
 8008d98:	eb07 068a 	add.w	r6, r7, sl, lsl #2
 8008d9c:	f1b9 0f00 	cmp.w	r9, #0
 8008da0:	d04b      	beq.n	8008e3a <pv_fft_complex_DIT_RN+0xc6>
 8008da2:	ea4f 058b 	mov.w	r5, fp, lsl #2
 8008da6:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8008daa:	f04f 0c00 	mov.w	ip, #0
 8008dae:	b3f4      	cbz	r4, 8008e2e <pv_fft_complex_DIT_RN+0xba>
 8008db0:	492a      	ldr	r1, [pc, #168]	; (8008e5c <pv_fft_complex_DIT_RN+0xe8>)
 8008db2:	eef0 7a64 	vmov.f32	s15, s9
 8008db6:	f107 0208 	add.w	r2, r7, #8
 8008dba:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8008dbe:	f106 0308 	add.w	r3, r6, #8
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e003      	b.n	8008dce <pv_fft_complex_DIT_RN+0x5a>
 8008dc6:	edd1 7a00 	vldr	s15, [r1]
 8008dca:	ed91 5a80 	vldr	s10, [r1, #512]	; 0x200
 8008dce:	ed13 6a02 	vldr	s12, [r3, #-8]
 8008dd2:	ed53 5a01 	vldr	s11, [r3, #-4]
 8008dd6:	ee66 6a00 	vmul.f32	s13, s12, s0
 8008dda:	ee25 7a80 	vmul.f32	s14, s11, s0
 8008dde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008de2:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8008de6:	eeb0 7a66 	vmov.f32	s14, s13
 8008dea:	eea5 7a85 	vfma.f32	s14, s11, s10
 8008dee:	3001      	adds	r0, #1
 8008df0:	42a0      	cmp	r0, r4
 8008df2:	eee6 7a05 	vfma.f32	s15, s12, s10
 8008df6:	4429      	add	r1, r5
 8008df8:	f102 0208 	add.w	r2, r2, #8
 8008dfc:	ed12 6a04 	vldr	s12, [r2, #-16]
 8008e00:	ed52 6a03 	vldr	s13, [r2, #-12]
 8008e04:	ee36 5a27 	vadd.f32	s10, s12, s15
 8008e08:	ee76 5a87 	vadd.f32	s11, s13, s14
 8008e0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8008e10:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008e14:	ed02 5a04 	vstr	s10, [r2, #-16]
 8008e18:	ed42 5a03 	vstr	s11, [r2, #-12]
 8008e1c:	f103 0308 	add.w	r3, r3, #8
 8008e20:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008e24:	ed03 7a03 	vstr	s14, [r3, #-12]
 8008e28:	d1cd      	bne.n	8008dc6 <pv_fft_complex_DIT_RN+0x52>
 8008e2a:	4447      	add	r7, r8
 8008e2c:	4446      	add	r6, r8
 8008e2e:	f10c 0c01 	add.w	ip, ip, #1
 8008e32:	45cc      	cmp	ip, r9
 8008e34:	4477      	add	r7, lr
 8008e36:	4476      	add	r6, lr
 8008e38:	d1b9      	bne.n	8008dae <pv_fft_complex_DIT_RN+0x3a>
 8008e3a:	9b00      	ldr	r3, [sp, #0]
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8008e42:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8008e46:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008e4a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
 8008e4e:	9300      	str	r3, [sp, #0]
 8008e50:	d19f      	bne.n	8008d92 <pv_fft_complex_DIT_RN+0x1e>
 8008e52:	b003      	add	sp, #12
 8008e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	0800df40 	.word	0x0800df40

08008e60 <taabe72>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	2500      	movs	r5, #0
 8008e64:	460c      	mov	r4, r1
 8008e66:	600d      	str	r5, [r1, #0]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	2104      	movs	r1, #4
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	f7ff fc15 	bl	800869c <taabe284>
 8008e72:	b120      	cbz	r0, 8008e7e <taabe72+0x1e>
 8008e74:	4603      	mov	r3, r0
 8008e76:	6006      	str	r6, [r0, #0]
 8008e78:	4628      	mov	r0, r5
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	bd70      	pop	{r4, r5, r6, pc}
 8008e7e:	2001      	movs	r0, #1
 8008e80:	bd70      	pop	{r4, r5, r6, pc}
 8008e82:	bf00      	nop

08008e84 <taabe544>:
 8008e84:	4601      	mov	r1, r0
 8008e86:	b110      	cbz	r0, 8008e8e <taabe544+0xa>
 8008e88:	6800      	ldr	r0, [r0, #0]
 8008e8a:	f7ff bc3b 	b.w	8008704 <taabe22>
 8008e8e:	4770      	bx	lr

08008e90 <taabe429>:
 8008e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e94:	6806      	ldr	r6, [r0, #0]
 8008e96:	460c      	mov	r4, r1
 8008e98:	4617      	mov	r7, r2
 8008e9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	f7ff fbfb 	bl	800869c <taabe284>
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	d07e      	beq.n	8008fa8 <taabe429+0x118>
 8008eaa:	4a41      	ldr	r2, [pc, #260]	; (8008fb0 <taabe429+0x120>)
 8008eac:	4680      	mov	r8, r0
 8008eae:	46a4      	mov	ip, r4
 8008eb0:	f502 70ff 	add.w	r0, r2, #510	; 0x1fe
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e001      	b.n	8008ebc <taabe429+0x2c>
 8008eb8:	f932 3b02 	ldrsh.w	r3, [r2], #2
 8008ebc:	f8dc 1000 	ldr.w	r1, [ip]
 8008ec0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8008ec4:	4290      	cmp	r0, r2
 8008ec6:	6019      	str	r1, [r3, #0]
 8008ec8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8008ecc:	6059      	str	r1, [r3, #4]
 8008ece:	f10c 0c08 	add.w	ip, ip, #8
 8008ed2:	d1f1      	bne.n	8008eb8 <taabe429+0x28>
 8008ed4:	4640      	mov	r0, r8
 8008ed6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008eda:	f7ff ff4b 	bl	8008d74 <pv_fft_complex_DIT_RN>
 8008ede:	edd8 7a00 	vldr	s15, [r8]
 8008ee2:	ed98 7a01 	vldr	s14, [r8, #4]
 8008ee6:	eddf 4a33 	vldr	s9, [pc, #204]	; 8008fb4 <taabe429+0x124>
 8008eea:	4d33      	ldr	r5, [pc, #204]	; (8008fb8 <taabe429+0x128>)
 8008eec:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008fbc <taabe429+0x12c>
 8008ef0:	ed9f 6a33 	vldr	s12, [pc, #204]	; 8008fc0 <taabe429+0x130>
 8008ef4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ef8:	2300      	movs	r3, #0
 8008efa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008efe:	607b      	str	r3, [r7, #4]
 8008f00:	edc7 7a00 	vstr	s15, [r7]
 8008f04:	4643      	mov	r3, r8
 8008f06:	f508 61ff 	add.w	r1, r8, #2040	; 0x7f8
 8008f0a:	463c      	mov	r4, r7
 8008f0c:	f208 72fc 	addw	r2, r8, #2044	; 0x7fc
 8008f10:	f505 707e 	add.w	r0, r5, #1016	; 0x3f8
 8008f14:	e003      	b.n	8008f1e <taabe429+0x8e>
 8008f16:	ecb5 6a01 	vldmia	r5!, {s12}
 8008f1a:	edd5 5a7f 	vldr	s11, [r5, #508]	; 0x1fc
 8008f1e:	ed93 5a02 	vldr	s10, [r3, #8]
 8008f22:	edd3 6a03 	vldr	s13, [r3, #12]
 8008f26:	edd2 7a00 	vldr	s15, [r2]
 8008f2a:	468c      	mov	ip, r1
 8008f2c:	ed9c 7a00 	vldr	s14, [ip]
 8008f30:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008f34:	ee77 7a05 	vadd.f32	s15, s14, s10
 8008f38:	ee37 7a45 	vsub.f32	s14, s14, s10
 8008f3c:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8008f40:	3408      	adds	r4, #8
 8008f42:	4694      	mov	ip, r2
 8008f44:	3308      	adds	r3, #8
 8008f46:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008f4a:	42a8      	cmp	r0, r5
 8008f4c:	f1a1 0108 	sub.w	r1, r1, #8
 8008f50:	f1a2 0208 	sub.w	r2, r2, #8
 8008f54:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008f58:	edc4 7a00 	vstr	s15, [r4]
 8008f5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f60:	ed9c 5a00 	vldr	s10, [ip]
 8008f64:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8008f68:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008f6c:	eee6 7ac6 	vfms.f32	s15, s13, s12
 8008f70:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008f74:	edc4 7a01 	vstr	s15, [r4, #4]
 8008f78:	d1cd      	bne.n	8008f16 <taabe429+0x86>
 8008f7a:	edd8 7a00 	vldr	s15, [r8]
 8008f7e:	ed98 7a01 	vldr	s14, [r8, #4]
 8008f82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f86:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8008f8a:	ee67 4aa4 	vmul.f32	s9, s15, s9
 8008f8e:	f607 0704 	addw	r7, r7, #2052	; 0x804
 8008f92:	2300      	movs	r3, #0
 8008f94:	edc2 4a00 	vstr	s9, [r2]
 8008f98:	4630      	mov	r0, r6
 8008f9a:	4641      	mov	r1, r8
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	f7ff fbb1 	bl	8008704 <taabe22>
 8008fa2:	2000      	movs	r0, #0
 8008fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fa8:	2001      	movs	r0, #1
 8008faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fae:	bf00      	nop
 8008fb0:	0800dd42 	.word	0x0800dd42
 8008fb4:	3b000000 	.word	0x3b000000
 8008fb8:	0800df48 	.word	0x0800df48
 8008fbc:	3f7ffb11 	.word	0x3f7ffb11
 8008fc0:	3c490e67 	.word	0x3c490e67

08008fc4 <taabe312>:
 8008fc4:	ea50 0301 	orrs.w	r3, r0, r1
 8008fc8:	d034      	beq.n	8009034 <taabe312+0x70>
 8008fca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008fce:	f171 0300 	sbcs.w	r3, r1, #0
 8008fd2:	b500      	push	{lr}
 8008fd4:	da27      	bge.n	8009026 <taabe312+0x62>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	f04f 3cff 	mov.w	ip, #4294967295
 8008fdc:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8008fe0:	4584      	cmp	ip, r0
 8008fe2:	eb72 0e01 	sbcs.w	lr, r2, r1
 8008fe6:	db07      	blt.n	8008ff8 <taabe312+0x34>
 8008fe8:	1800      	adds	r0, r0, r0
 8008fea:	4149      	adcs	r1, r1
 8008fec:	4584      	cmp	ip, r0
 8008fee:	eb72 0e01 	sbcs.w	lr, r2, r1
 8008ff2:	f103 0301 	add.w	r3, r3, #1
 8008ff6:	daf7      	bge.n	8008fe8 <taabe312+0x24>
 8008ff8:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 8008ffc:	1509      	asrs	r1, r1, #20
 8008ffe:	4a0e      	ldr	r2, [pc, #56]	; (8009038 <taabe312+0x74>)
 8009000:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 8009004:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009008:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800900c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009010:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
 8009014:	f343 030d 	sbfx	r3, r3, #0, #14
 8009018:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800901c:	f300 000f 	ssat	r0, #16, r0
 8009020:	b200      	sxth	r0, r0
 8009022:	f85d fb04 	ldr.w	pc, [sp], #4
 8009026:	0840      	lsrs	r0, r0, #1
 8009028:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
 800902c:	f04f 33ff 	mov.w	r3, #4294967295
 8009030:	1049      	asrs	r1, r1, #1
 8009032:	e7d1      	b.n	8008fd8 <taabe312+0x14>
 8009034:	4801      	ldr	r0, [pc, #4]	; (800903c <taabe312+0x78>)
 8009036:	4770      	bx	lr
 8009038:	0800e940 	.word	0x0800e940
 800903c:	ffff8000 	.word	0xffff8000

08009040 <taabe419>:
 8009040:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8009044:	d022      	beq.n	800908c <taabe419+0x4c>
 8009046:	4240      	negs	r0, r0
 8009048:	b200      	sxth	r0, r0
 800904a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800904e:	4298      	cmp	r0, r3
 8009050:	bfa8      	it	ge
 8009052:	4618      	movge	r0, r3
 8009054:	4a0e      	ldr	r2, [pc, #56]	; (8009090 <taabe419+0x50>)
 8009056:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <taabe419+0x54>)
 8009058:	11c1      	asrs	r1, r0, #7
 800905a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800905e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8009062:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8009066:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800906a:	2300      	movs	r3, #0
 800906c:	fbc1 0302 	smlal	r0, r3, r1, r2
 8009070:	0fc0      	lsrs	r0, r0, #31
 8009072:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 8009076:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800907a:	ea4f 73e3 	mov.w	r3, r3, asr #31
 800907e:	f173 0300 	sbcs.w	r3, r3, #0
 8009082:	da00      	bge.n	8009086 <taabe419+0x46>
 8009084:	4770      	bx	lr
 8009086:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800908a:	4770      	bx	lr
 800908c:	20f2      	movs	r0, #242	; 0xf2
 800908e:	4770      	bx	lr
 8009090:	0800e740 	.word	0x0800e740
 8009094:	0800e540 	.word	0x0800e540

08009098 <taabe61>:
 8009098:	2800      	cmp	r0, #0
 800909a:	dd29      	ble.n	80090f0 <taabe61+0x58>
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	3902      	subs	r1, #2
 80090a0:	4c14      	ldr	r4, [pc, #80]	; (80090f4 <taabe61+0x5c>)
 80090a2:	4d15      	ldr	r5, [pc, #84]	; (80090f8 <taabe61+0x60>)
 80090a4:	f1a2 0c02 	sub.w	ip, r2, #2
 80090a8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80090ac:	f931 3f02 	ldrsh.w	r3, [r1, #2]!
 80090b0:	f5b3 5ffe 	cmp.w	r3, #8128	; 0x1fc0
 80090b4:	bfa8      	it	ge
 80090b6:	f44f 53fe 	movge.w	r3, #8128	; 0x1fc0
 80090ba:	42ab      	cmp	r3, r5
 80090bc:	bfb8      	it	lt
 80090be:	462b      	movlt	r3, r5
 80090c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80090c4:	323f      	adds	r2, #63	; 0x3f
 80090c6:	0992      	lsrs	r2, r2, #6
 80090c8:	f3c3 1687 	ubfx	r6, r3, #6, #8
 80090cc:	f934 2012 	ldrsh.w	r2, [r4, r2, lsl #1]
 80090d0:	f934 e016 	ldrsh.w	lr, [r4, r6, lsl #1]
 80090d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090d8:	f1c3 0640 	rsb	r6, r3, #64	; 0x40
 80090dc:	fb02 f303 	mul.w	r3, r2, r3
 80090e0:	fb06 330e 	mla	r3, r6, lr, r3
 80090e4:	119b      	asrs	r3, r3, #6
 80090e6:	4288      	cmp	r0, r1
 80090e8:	f82c 3f02 	strh.w	r3, [ip, #2]!
 80090ec:	d1de      	bne.n	80090ac <taabe61+0x14>
 80090ee:	bd70      	pop	{r4, r5, r6, pc}
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	0800ed44 	.word	0x0800ed44
 80090f8:	ffffe000 	.word	0xffffe000

080090fc <taabe39>:
 80090fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009100:	1e07      	subs	r7, r0, #0
 8009102:	4690      	mov	r8, r2
 8009104:	dd23      	ble.n	800914e <taabe39+0x52>
 8009106:	1e95      	subs	r5, r2, #2
 8009108:	f1a1 0c02 	sub.w	ip, r1, #2
 800910c:	462c      	mov	r4, r5
 800910e:	007e      	lsls	r6, r7, #1
 8009110:	eb0c 0047 	add.w	r0, ip, r7, lsl #1
 8009114:	46ae      	mov	lr, r5
 8009116:	f93c 3f02 	ldrsh.w	r3, [ip, #2]!
 800911a:	4584      	cmp	ip, r0
 800911c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009120:	f303 030f 	ssat	r3, #16, r3
 8009124:	f82e 3f02 	strh.w	r3, [lr, #2]!
 8009128:	d1f5      	bne.n	8009116 <taabe39+0x1a>
 800912a:	4642      	mov	r2, r8
 800912c:	4638      	mov	r0, r7
 800912e:	4641      	mov	r1, r8
 8009130:	f7ff ffb2 	bl	8009098 <taabe61>
 8009134:	19aa      	adds	r2, r5, r6
 8009136:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	42a2      	cmp	r2, r4
 800913e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8009142:	f303 030f 	ssat	r3, #16, r3
 8009146:	8023      	strh	r3, [r4, #0]
 8009148:	d1f5      	bne.n	8009136 <taabe39+0x3a>
 800914a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009152:	4611      	mov	r1, r2
 8009154:	f7ff bfa0 	b.w	8009098 <taabe61>

08009158 <taabe422.part.0>:
 8009158:	b570      	push	{r4, r5, r6, lr}
 800915a:	4605      	mov	r5, r0
 800915c:	6900      	ldr	r0, [r0, #16]
 800915e:	682e      	ldr	r6, [r5, #0]
 8009160:	f000 fb70 	bl	8009844 <taabe397>
 8009164:	68e8      	ldr	r0, [r5, #12]
 8009166:	f000 f8f7 	bl	8009358 <taabe0>
 800916a:	68a9      	ldr	r1, [r5, #8]
 800916c:	b171      	cbz	r1, 800918c <taabe422.part.0+0x34>
 800916e:	686b      	ldr	r3, [r5, #4]
 8009170:	681c      	ldr	r4, [r3, #0]
 8009172:	3c01      	subs	r4, #1
 8009174:	d407      	bmi.n	8009186 <taabe422.part.0+0x2e>
 8009176:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
 800917a:	3c01      	subs	r4, #1
 800917c:	f000 fa66 	bl	800964c <taabe41>
 8009180:	1c63      	adds	r3, r4, #1
 8009182:	68a9      	ldr	r1, [r5, #8]
 8009184:	d1f7      	bne.n	8009176 <taabe422.part.0+0x1e>
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff fabc 	bl	8008704 <taabe22>
 800918c:	4629      	mov	r1, r5
 800918e:	4630      	mov	r0, r6
 8009190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009194:	f7ff bab6 	b.w	8008704 <taabe22>

08009198 <taabe194>:
 8009198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800919c:	2400      	movs	r4, #0
 800919e:	4690      	mov	r8, r2
 80091a0:	6014      	str	r4, [r2, #0]
 80091a2:	4689      	mov	r9, r1
 80091a4:	2201      	movs	r2, #1
 80091a6:	2114      	movs	r1, #20
 80091a8:	4607      	mov	r7, r0
 80091aa:	f7ff fa77 	bl	800869c <taabe284>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d040      	beq.n	8009234 <taabe194+0x9c>
 80091b2:	f8d9 a000 	ldr.w	sl, [r9]
 80091b6:	e9c0 7900 	strd	r7, r9, [r0]
 80091ba:	4606      	mov	r6, r0
 80091bc:	2201      	movs	r2, #1
 80091be:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80091c2:	4638      	mov	r0, r7
 80091c4:	f7ff fa6a 	bl	800869c <taabe284>
 80091c8:	60b0      	str	r0, [r6, #8]
 80091ca:	b3b8      	cbz	r0, 800923c <taabe194+0xa4>
 80091cc:	45a2      	cmp	sl, r4
 80091ce:	dc03      	bgt.n	80091d8 <taabe194+0x40>
 80091d0:	e015      	b.n	80091fe <taabe194+0x66>
 80091d2:	45a2      	cmp	sl, r4
 80091d4:	d013      	beq.n	80091fe <taabe194+0x66>
 80091d6:	68b0      	ldr	r0, [r6, #8]
 80091d8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80091dc:	eb00 0284 	add.w	r2, r0, r4, lsl #2
 80091e0:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 80091e4:	4638      	mov	r0, r7
 80091e6:	f000 f9c3 	bl	8009570 <taabe288>
 80091ea:	3401      	adds	r4, #1
 80091ec:	4605      	mov	r5, r0
 80091ee:	2800      	cmp	r0, #0
 80091f0:	d0ef      	beq.n	80091d2 <taabe194+0x3a>
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7ff ffb0 	bl	8009158 <taabe422.part.0>
 80091f8:	4628      	mov	r0, r5
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fe:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8009202:	f106 030c 	add.w	r3, r6, #12
 8009206:	2200      	movs	r2, #0
 8009208:	4638      	mov	r0, r7
 800920a:	f000 f88d 	bl	8009328 <taabe703>
 800920e:	4605      	mov	r5, r0
 8009210:	2800      	cmp	r0, #0
 8009212:	d1ee      	bne.n	80091f2 <taabe194+0x5a>
 8009214:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8009218:	f106 0210 	add.w	r2, r6, #16
 800921c:	6859      	ldr	r1, [r3, #4]
 800921e:	4638      	mov	r0, r7
 8009220:	f000 fb00 	bl	8009824 <taabe358>
 8009224:	4605      	mov	r5, r0
 8009226:	2800      	cmp	r0, #0
 8009228:	d1e3      	bne.n	80091f2 <taabe194+0x5a>
 800922a:	f8c8 6000 	str.w	r6, [r8]
 800922e:	4628      	mov	r0, r5
 8009230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009234:	2501      	movs	r5, #1
 8009236:	4628      	mov	r0, r5
 8009238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff ff8b 	bl	8009158 <taabe422.part.0>
 8009242:	2501      	movs	r5, #1
 8009244:	e7d8      	b.n	80091f8 <taabe194+0x60>
 8009246:	bf00      	nop

08009248 <taabe422>:
 8009248:	b108      	cbz	r0, 800924e <taabe422+0x6>
 800924a:	f7ff bf85 	b.w	8009158 <taabe422.part.0>
 800924e:	4770      	bx	lr

08009250 <taabe265>:
 8009250:	6843      	ldr	r3, [r0, #4]
 8009252:	6858      	ldr	r0, [r3, #4]
 8009254:	4613      	mov	r3, r2
 8009256:	b110      	cbz	r0, 800925e <taabe265+0xe>
 8009258:	460a      	mov	r2, r1
 800925a:	f000 be69 	b.w	8009f30 <taabe673>
 800925e:	4770      	bx	lr

08009260 <taabe310>:
 8009260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	e9d0 8900 	ldrd	r8, r9, [r0]
 8009268:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	468a      	mov	sl, r1
 8009272:	6819      	ldr	r1, [r3, #0]
 8009274:	4606      	mov	r6, r0
 8009276:	4617      	mov	r7, r2
 8009278:	0049      	lsls	r1, r1, #1
 800927a:	2200      	movs	r2, #0
 800927c:	4640      	mov	r0, r8
 800927e:	f7ff fa0d 	bl	800869c <taabe284>
 8009282:	b3b0      	cbz	r0, 80092f2 <taabe310+0x92>
 8009284:	f8d9 3000 	ldr.w	r3, [r9]
 8009288:	2b00      	cmp	r3, #0
 800928a:	4605      	mov	r5, r0
 800928c:	dd12      	ble.n	80092b4 <taabe310+0x54>
 800928e:	2400      	movs	r4, #0
 8009290:	e004      	b.n	800929c <taabe310+0x3c>
 8009292:	f8d9 3000 	ldr.w	r3, [r9]
 8009296:	42a3      	cmp	r3, r4
 8009298:	46aa      	mov	sl, r5
 800929a:	dd0b      	ble.n	80092b4 <taabe310+0x54>
 800929c:	68b3      	ldr	r3, [r6, #8]
 800929e:	4651      	mov	r1, sl
 80092a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80092a4:	462a      	mov	r2, r5
 80092a6:	f000 f9eb 	bl	8009680 <taabe588>
 80092aa:	3401      	adds	r4, #1
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d0f0      	beq.n	8009292 <taabe310+0x32>
 80092b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80092b8:	6859      	ldr	r1, [r3, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	0089      	lsls	r1, r1, #2
 80092be:	4640      	mov	r0, r8
 80092c0:	f7ff f9ec 	bl	800869c <taabe284>
 80092c4:	4604      	mov	r4, r0
 80092c6:	b1b8      	cbz	r0, 80092f8 <taabe310+0x98>
 80092c8:	68f0      	ldr	r0, [r6, #12]
 80092ca:	4651      	mov	r1, sl
 80092cc:	4622      	mov	r2, r4
 80092ce:	f000 f849 	bl	8009364 <taabe278>
 80092d2:	463a      	mov	r2, r7
 80092d4:	6930      	ldr	r0, [r6, #16]
 80092d6:	4621      	mov	r1, r4
 80092d8:	f000 faba 	bl	8009850 <taabe152>
 80092dc:	4621      	mov	r1, r4
 80092de:	4640      	mov	r0, r8
 80092e0:	f7ff fa10 	bl	8008704 <taabe22>
 80092e4:	4640      	mov	r0, r8
 80092e6:	4629      	mov	r1, r5
 80092e8:	f7ff fa0c 	bl	8008704 <taabe22>
 80092ec:	2000      	movs	r0, #0
 80092ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f2:	2001      	movs	r0, #1
 80092f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f8:	4640      	mov	r0, r8
 80092fa:	4629      	mov	r1, r5
 80092fc:	f7ff fa02 	bl	8008704 <taabe22>
 8009300:	2001      	movs	r0, #1
 8009302:	e7d5      	b.n	80092b0 <taabe310+0x50>

08009304 <taabe51>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	6843      	ldr	r3, [r0, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	dd0b      	ble.n	8009326 <taabe51+0x22>
 800930e:	4605      	mov	r5, r0
 8009310:	2400      	movs	r4, #0
 8009312:	68ab      	ldr	r3, [r5, #8]
 8009314:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8009318:	f000 fa56 	bl	80097c8 <taabe756>
 800931c:	686b      	ldr	r3, [r5, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3401      	adds	r4, #1
 8009322:	42a3      	cmp	r3, r4
 8009324:	dcf5      	bgt.n	8009312 <taabe51+0xe>
 8009326:	bd38      	pop	{r3, r4, r5, pc}

08009328 <taabe703>:
 8009328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800932c:	2600      	movs	r6, #0
 800932e:	4689      	mov	r9, r1
 8009330:	4617      	mov	r7, r2
 8009332:	601e      	str	r6, [r3, #0]
 8009334:	2201      	movs	r2, #1
 8009336:	210c      	movs	r1, #12
 8009338:	461d      	mov	r5, r3
 800933a:	4680      	mov	r8, r0
 800933c:	f7ff f9ae 	bl	800869c <taabe284>
 8009340:	b138      	cbz	r0, 8009352 <taabe703+0x2a>
 8009342:	4604      	mov	r4, r0
 8009344:	e9c0 8900 	strd	r8, r9, [r0]
 8009348:	7207      	strb	r7, [r0, #8]
 800934a:	4630      	mov	r0, r6
 800934c:	602c      	str	r4, [r5, #0]
 800934e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009352:	2001      	movs	r0, #1
 8009354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009358 <taabe0>:
 8009358:	4601      	mov	r1, r0
 800935a:	b110      	cbz	r0, 8009362 <taabe0+0xa>
 800935c:	6800      	ldr	r0, [r0, #0]
 800935e:	f7ff b9d1 	b.w	8008704 <taabe22>
 8009362:	4770      	bx	lr

08009364 <taabe278>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	6843      	ldr	r3, [r0, #4]
 800936a:	7a00      	ldrb	r0, [r0, #8]
 800936c:	685c      	ldr	r4, [r3, #4]
 800936e:	b08d      	sub	sp, #52	; 0x34
 8009370:	e9d3 a502 	ldrd	sl, r5, [r3, #8]
 8009374:	9001      	str	r0, [sp, #4]
 8009376:	10a6      	asrs	r6, r4, #2
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	9208      	str	r2, [sp, #32]
 800937c:	9409      	str	r4, [sp, #36]	; 0x24
 800937e:	900b      	str	r0, [sp, #44]	; 0x2c
 8009380:	9507      	str	r5, [sp, #28]
 8009382:	960a      	str	r6, [sp, #40]	; 0x28
 8009384:	f000 8098 	beq.w	80094b8 <taabe278+0x154>
 8009388:	0043      	lsls	r3, r0, #1
 800938a:	425b      	negs	r3, r3
 800938c:	1044      	asrs	r4, r0, #1
 800938e:	9303      	str	r3, [sp, #12]
 8009390:	f000 0301 	and.w	r3, r0, #1
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	00a3      	lsls	r3, r4, #2
 8009398:	9306      	str	r3, [sp, #24]
 800939a:	00e3      	lsls	r3, r4, #3
 800939c:	9402      	str	r4, [sp, #8]
 800939e:	f105 0b04 	add.w	fp, r5, #4
 80093a2:	f102 0908 	add.w	r9, r2, #8
 80093a6:	9305      	str	r3, [sp, #20]
 80093a8:	9600      	str	r6, [sp, #0]
 80093aa:	f91b cc04 	ldrsb.w	ip, [fp, #-4]
 80093ae:	f91b 7c03 	ldrsb.w	r7, [fp, #-3]
 80093b2:	f91b 6c02 	ldrsb.w	r6, [fp, #-2]
 80093b6:	f91b 5c01 	ldrsb.w	r5, [fp, #-1]
 80093ba:	9b02      	ldr	r3, [sp, #8]
 80093bc:	ea4f 2c8c 	mov.w	ip, ip, lsl #10
 80093c0:	02bf      	lsls	r7, r7, #10
 80093c2:	02b6      	lsls	r6, r6, #10
 80093c4:	02ad      	lsls	r5, r5, #10
 80093c6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80093ca:	3740      	adds	r7, #64	; 0x40
 80093cc:	3640      	adds	r6, #64	; 0x40
 80093ce:	3540      	adds	r5, #64	; 0x40
 80093d0:	b333      	cbz	r3, 8009420 <taabe278+0xbc>
 80093d2:	f10a 0008 	add.w	r0, sl, #8
 80093d6:	469e      	mov	lr, r3
 80093d8:	4688      	mov	r8, r1
 80093da:	f850 4c08 	ldr.w	r4, [r0, #-8]
 80093de:	ea4f 2234 	mov.w	r2, r4, ror #8
 80093e2:	fa2f f282 	sxtb16	r2, r2
 80093e6:	fa2f f484 	sxtb16	r4, r4
 80093ea:	f858 3b04 	ldr.w	r3, [r8], #4
 80093ee:	fb24 cc03 	smlad	ip, r4, r3, ip
 80093f2:	fb22 7703 	smlad	r7, r2, r3, r7
 80093f6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80093fa:	ea4f 2432 	mov.w	r4, r2, ror #8
 80093fe:	fa2f f484 	sxtb16	r4, r4
 8009402:	fa2f f282 	sxtb16	r2, r2
 8009406:	fb22 6603 	smlad	r6, r2, r3, r6
 800940a:	fb24 5503 	smlad	r5, r4, r3, r5
 800940e:	f1be 0e01 	subs.w	lr, lr, #1
 8009412:	f100 0008 	add.w	r0, r0, #8
 8009416:	d1e0      	bne.n	80093da <taabe278+0x76>
 8009418:	9b06      	ldr	r3, [sp, #24]
 800941a:	4419      	add	r1, r3
 800941c:	9b05      	ldr	r3, [sp, #20]
 800941e:	449a      	add	sl, r3
 8009420:	9b04      	ldr	r3, [sp, #16]
 8009422:	b19b      	cbz	r3, 800944c <taabe278+0xe8>
 8009424:	4652      	mov	r2, sl
 8009426:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800942a:	f912 0b04 	ldrsb.w	r0, [r2], #4
 800942e:	fb13 cc00 	smlabb	ip, r3, r0, ip
 8009432:	f99a 0001 	ldrsb.w	r0, [sl, #1]
 8009436:	fb13 7700 	smlabb	r7, r3, r0, r7
 800943a:	f99a 0002 	ldrsb.w	r0, [sl, #2]
 800943e:	fb13 6600 	smlabb	r6, r3, r0, r6
 8009442:	f99a 0003 	ldrsb.w	r0, [sl, #3]
 8009446:	4692      	mov	sl, r2
 8009448:	fb13 5500 	smlabb	r5, r3, r0, r5
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d077      	beq.n	8009542 <taabe278+0x1de>
 8009452:	f939 3c08 	ldrsh.w	r3, [r9, #-8]
 8009456:	eb03 13ec 	add.w	r3, r3, ip, asr #7
 800945a:	f303 030f 	ssat	r3, #16, r3
 800945e:	f829 3c08 	strh.w	r3, [r9, #-8]
 8009462:	f939 3c06 	ldrsh.w	r3, [r9, #-6]
 8009466:	eb03 13e7 	add.w	r3, r3, r7, asr #7
 800946a:	f303 030f 	ssat	r3, #16, r3
 800946e:	f829 3c06 	strh.w	r3, [r9, #-6]
 8009472:	f939 3c04 	ldrsh.w	r3, [r9, #-4]
 8009476:	eb03 16e6 	add.w	r6, r3, r6, asr #7
 800947a:	f939 3c02 	ldrsh.w	r3, [r9, #-2]
 800947e:	f306 060f 	ssat	r6, #16, r6
 8009482:	eb03 15e5 	add.w	r5, r3, r5, asr #7
 8009486:	f829 6c04 	strh.w	r6, [r9, #-4]
 800948a:	f305 050f 	ssat	r5, #16, r5
 800948e:	f829 5c02 	strh.w	r5, [r9, #-2]
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	4419      	add	r1, r3
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	3b01      	subs	r3, #1
 800949a:	f10b 0b04 	add.w	fp, fp, #4
 800949e:	f109 0908 	add.w	r9, r9, #8
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	d181      	bne.n	80093aa <taabe278+0x46>
 80094a6:	9a07      	ldr	r2, [sp, #28]
 80094a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094aa:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80094ae:	9207      	str	r2, [sp, #28]
 80094b0:	9a08      	ldr	r2, [sp, #32]
 80094b2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094b6:	9308      	str	r3, [sp, #32]
 80094b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094ba:	f013 0003 	ands.w	r0, r3, #3
 80094be:	d03d      	beq.n	800953c <taabe278+0x1d8>
 80094c0:	9f07      	ldr	r7, [sp, #28]
 80094c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c4:	9e08      	ldr	r6, [sp, #32]
 80094c6:	4438      	add	r0, r7
 80094c8:	005c      	lsls	r4, r3, #1
 80094ca:	4684      	mov	ip, r0
 80094cc:	4618      	mov	r0, r3
 80094ce:	f917 3b01 	ldrsb.w	r3, [r7], #1
 80094d2:	029b      	lsls	r3, r3, #10
 80094d4:	4265      	negs	r5, r4
 80094d6:	46a6      	mov	lr, r4
 80094d8:	3340      	adds	r3, #64	; 0x40
 80094da:	9c01      	ldr	r4, [sp, #4]
 80094dc:	b300      	cbz	r0, 8009520 <taabe278+0x1bc>
 80094de:	eb01 020e 	add.w	r2, r1, lr
 80094e2:	46d0      	mov	r8, sl
 80094e4:	f831 bb02 	ldrh.w	fp, [r1], #2
 80094e8:	f918 9b01 	ldrsb.w	r9, [r8], #1
 80094ec:	4291      	cmp	r1, r2
 80094ee:	fb1b 3309 	smlabb	r3, fp, r9, r3
 80094f2:	d1f7      	bne.n	80094e4 <taabe278+0x180>
 80094f4:	4482      	add	sl, r0
 80094f6:	b1b4      	cbz	r4, 8009526 <taabe278+0x1c2>
 80094f8:	f9b6 1000 	ldrsh.w	r1, [r6]
 80094fc:	4567      	cmp	r7, ip
 80094fe:	eb01 13e3 	add.w	r3, r1, r3, asr #7
 8009502:	f303 030f 	ssat	r3, #16, r3
 8009506:	b21b      	sxth	r3, r3
 8009508:	46b0      	mov	r8, r6
 800950a:	8033      	strh	r3, [r6, #0]
 800950c:	eb02 0105 	add.w	r1, r2, r5
 8009510:	d014      	beq.n	800953c <taabe278+0x1d8>
 8009512:	f917 3b01 	ldrsb.w	r3, [r7], #1
 8009516:	029b      	lsls	r3, r3, #10
 8009518:	4646      	mov	r6, r8
 800951a:	3340      	adds	r3, #64	; 0x40
 800951c:	2800      	cmp	r0, #0
 800951e:	d1de      	bne.n	80094de <taabe278+0x17a>
 8009520:	460a      	mov	r2, r1
 8009522:	2c00      	cmp	r4, #0
 8009524:	d1e8      	bne.n	80094f8 <taabe278+0x194>
 8009526:	11db      	asrs	r3, r3, #7
 8009528:	4567      	cmp	r7, ip
 800952a:	f303 030f 	ssat	r3, #16, r3
 800952e:	b21b      	sxth	r3, r3
 8009530:	f106 0802 	add.w	r8, r6, #2
 8009534:	8033      	strh	r3, [r6, #0]
 8009536:	eb02 0105 	add.w	r1, r2, r5
 800953a:	d1ea      	bne.n	8009512 <taabe278+0x1ae>
 800953c:	b00d      	add	sp, #52	; 0x34
 800953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009542:	ea4f 1cec 	mov.w	ip, ip, asr #7
 8009546:	11ff      	asrs	r7, r7, #7
 8009548:	11f6      	asrs	r6, r6, #7
 800954a:	11ed      	asrs	r5, r5, #7
 800954c:	f30c 0c0f 	ssat	ip, #16, ip
 8009550:	f307 070f 	ssat	r7, #16, r7
 8009554:	f306 060f 	ssat	r6, #16, r6
 8009558:	f305 050f 	ssat	r5, #16, r5
 800955c:	f829 cc08 	strh.w	ip, [r9, #-8]
 8009560:	f829 7c06 	strh.w	r7, [r9, #-6]
 8009564:	f829 6c04 	strh.w	r6, [r9, #-4]
 8009568:	f829 5c02 	strh.w	r5, [r9, #-2]
 800956c:	e791      	b.n	8009492 <taabe278+0x12e>
 800956e:	bf00      	nop

08009570 <taabe288>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	2700      	movs	r7, #0
 8009576:	b082      	sub	sp, #8
 8009578:	4690      	mov	r8, r2
 800957a:	6017      	str	r7, [r2, #0]
 800957c:	460e      	mov	r6, r1
 800957e:	2201      	movs	r2, #1
 8009580:	2118      	movs	r1, #24
 8009582:	4605      	mov	r5, r0
 8009584:	f7ff f88a 	bl	800869c <taabe284>
 8009588:	2800      	cmp	r0, #0
 800958a:	d043      	beq.n	8009614 <taabe288+0xa4>
 800958c:	6873      	ldr	r3, [r6, #4]
 800958e:	6819      	ldr	r1, [r3, #0]
 8009590:	e9c0 5600 	strd	r5, r6, [r0]
 8009594:	0049      	lsls	r1, r1, #1
 8009596:	4604      	mov	r4, r0
 8009598:	2201      	movs	r2, #1
 800959a:	4628      	mov	r0, r5
 800959c:	9101      	str	r1, [sp, #4]
 800959e:	f7ff f87d 	bl	800869c <taabe284>
 80095a2:	9901      	ldr	r1, [sp, #4]
 80095a4:	60a0      	str	r0, [r4, #8]
 80095a6:	b1e8      	cbz	r0, 80095e4 <taabe288+0x74>
 80095a8:	2201      	movs	r2, #1
 80095aa:	4628      	mov	r0, r5
 80095ac:	f7ff f876 	bl	800869c <taabe284>
 80095b0:	60e0      	str	r0, [r4, #12]
 80095b2:	b1b8      	cbz	r0, 80095e4 <taabe288+0x74>
 80095b4:	463a      	mov	r2, r7
 80095b6:	6831      	ldr	r1, [r6, #0]
 80095b8:	f104 0310 	add.w	r3, r4, #16
 80095bc:	4628      	mov	r0, r5
 80095be:	f7ff feb3 	bl	8009328 <taabe703>
 80095c2:	4607      	mov	r7, r0
 80095c4:	bb58      	cbnz	r0, 800961e <taabe288+0xae>
 80095c6:	6871      	ldr	r1, [r6, #4]
 80095c8:	f104 0314 	add.w	r3, r4, #20
 80095cc:	4628      	mov	r0, r5
 80095ce:	2201      	movs	r2, #1
 80095d0:	f7ff feaa 	bl	8009328 <taabe703>
 80095d4:	4607      	mov	r7, r0
 80095d6:	bb10      	cbnz	r0, 800961e <taabe288+0xae>
 80095d8:	4638      	mov	r0, r7
 80095da:	f8c8 4000 	str.w	r4, [r8]
 80095de:	b002      	add	sp, #8
 80095e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e4:	6825      	ldr	r5, [r4, #0]
 80095e6:	6960      	ldr	r0, [r4, #20]
 80095e8:	f7ff feb6 	bl	8009358 <taabe0>
 80095ec:	6920      	ldr	r0, [r4, #16]
 80095ee:	f7ff feb3 	bl	8009358 <taabe0>
 80095f2:	68e1      	ldr	r1, [r4, #12]
 80095f4:	4628      	mov	r0, r5
 80095f6:	f7ff f885 	bl	8008704 <taabe22>
 80095fa:	68a1      	ldr	r1, [r4, #8]
 80095fc:	4628      	mov	r0, r5
 80095fe:	f7ff f881 	bl	8008704 <taabe22>
 8009602:	4628      	mov	r0, r5
 8009604:	4621      	mov	r1, r4
 8009606:	f7ff f87d 	bl	8008704 <taabe22>
 800960a:	2701      	movs	r7, #1
 800960c:	4638      	mov	r0, r7
 800960e:	b002      	add	sp, #8
 8009610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009614:	2701      	movs	r7, #1
 8009616:	4638      	mov	r0, r7
 8009618:	b002      	add	sp, #8
 800961a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800961e:	6825      	ldr	r5, [r4, #0]
 8009620:	6960      	ldr	r0, [r4, #20]
 8009622:	f7ff fe99 	bl	8009358 <taabe0>
 8009626:	6920      	ldr	r0, [r4, #16]
 8009628:	f7ff fe96 	bl	8009358 <taabe0>
 800962c:	68e1      	ldr	r1, [r4, #12]
 800962e:	4628      	mov	r0, r5
 8009630:	f7ff f868 	bl	8008704 <taabe22>
 8009634:	68a1      	ldr	r1, [r4, #8]
 8009636:	4628      	mov	r0, r5
 8009638:	f7ff f864 	bl	8008704 <taabe22>
 800963c:	4628      	mov	r0, r5
 800963e:	4621      	mov	r1, r4
 8009640:	f7ff f860 	bl	8008704 <taabe22>
 8009644:	4638      	mov	r0, r7
 8009646:	b002      	add	sp, #8
 8009648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800964c <taabe41>:
 800964c:	b1b0      	cbz	r0, 800967c <taabe41+0x30>
 800964e:	b538      	push	{r3, r4, r5, lr}
 8009650:	4604      	mov	r4, r0
 8009652:	6805      	ldr	r5, [r0, #0]
 8009654:	6940      	ldr	r0, [r0, #20]
 8009656:	f7ff fe7f 	bl	8009358 <taabe0>
 800965a:	6920      	ldr	r0, [r4, #16]
 800965c:	f7ff fe7c 	bl	8009358 <taabe0>
 8009660:	68e1      	ldr	r1, [r4, #12]
 8009662:	4628      	mov	r0, r5
 8009664:	f7ff f84e 	bl	8008704 <taabe22>
 8009668:	68a1      	ldr	r1, [r4, #8]
 800966a:	4628      	mov	r0, r5
 800966c:	f7ff f84a 	bl	8008704 <taabe22>
 8009670:	4621      	mov	r1, r4
 8009672:	4628      	mov	r0, r5
 8009674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009678:	f7ff b844 	b.w	8008704 <taabe22>
 800967c:	4770      	bx	lr
 800967e:	bf00      	nop

08009680 <taabe588>:
 8009680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009684:	e9d0 6300 	ldrd	r6, r3, [r0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	681f      	ldr	r7, [r3, #0]
 800968c:	b087      	sub	sp, #28
 800968e:	460c      	mov	r4, r1
 8009690:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8009694:	9202      	str	r2, [sp, #8]
 8009696:	4681      	mov	r9, r0
 8009698:	0049      	lsls	r1, r1, #1
 800969a:	2201      	movs	r2, #1
 800969c:	4630      	mov	r0, r6
 800969e:	f7fe fffd 	bl	800869c <taabe284>
 80096a2:	007b      	lsls	r3, r7, #1
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f000 8083 	beq.w	80097b2 <taabe588+0x132>
 80096ac:	4605      	mov	r5, r0
 80096ae:	4621      	mov	r1, r4
 80096b0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80096b4:	462a      	mov	r2, r5
 80096b6:	f7ff fe55 	bl	8009364 <taabe278>
 80096ba:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80096be:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80096c2:	9204      	str	r2, [sp, #16]
 80096c4:	4611      	mov	r1, r2
 80096c6:	007c      	lsls	r4, r7, #1
 80096c8:	462a      	mov	r2, r5
 80096ca:	f7ff fe4b 	bl	8009364 <taabe278>
 80096ce:	eb05 0804 	add.w	r8, r5, r4
 80096d2:	462a      	mov	r2, r5
 80096d4:	4629      	mov	r1, r5
 80096d6:	4638      	mov	r0, r7
 80096d8:	f7ff fcde 	bl	8009098 <taabe61>
 80096dc:	4642      	mov	r2, r8
 80096de:	4641      	mov	r1, r8
 80096e0:	4638      	mov	r0, r7
 80096e2:	9401      	str	r4, [sp, #4]
 80096e4:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80096e8:	f7ff fd08 	bl	80090fc <taabe39>
 80096ec:	4622      	mov	r2, r4
 80096ee:	4621      	mov	r1, r4
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff fcd1 	bl	8009098 <taabe61>
 80096f6:	f8d9 200c 	ldr.w	r2, [r9, #12]
 80096fa:	9203      	str	r2, [sp, #12]
 80096fc:	2f00      	cmp	r7, #0
 80096fe:	dd5c      	ble.n	80097ba <taabe588+0x13a>
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	3b02      	subs	r3, #2
 8009704:	f1a8 0002 	sub.w	r0, r8, #2
 8009708:	9305      	str	r3, [sp, #20]
 800970a:	1ea9      	subs	r1, r5, #2
 800970c:	3a02      	subs	r2, #2
 800970e:	eb05 0b03 	add.w	fp, r5, r3
 8009712:	f647 7aff 	movw	sl, #32767	; 0x7fff
 8009716:	f44f 2900 	mov.w	r9, #524288	; 0x80000
 800971a:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 800971e:	f931 ef02 	ldrsh.w	lr, [r1, #2]!
 8009722:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 8009726:	f830 cf02 	ldrh.w	ip, [r0, #2]!
 800972a:	fb1c 9c0e 	smlabb	ip, ip, lr, r9
 800972e:	ebaa 0e0e 	sub.w	lr, sl, lr
 8009732:	f30e 0e0f 	ssat	lr, #16, lr
 8009736:	fb13 830e 	smlabb	r3, r3, lr, r8
 800973a:	13db      	asrs	r3, r3, #15
 800973c:	4559      	cmp	r1, fp
 800973e:	eb03 532c 	add.w	r3, r3, ip, asr #20
 8009742:	f303 030f 	ssat	r3, #16, r3
 8009746:	8013      	strh	r3, [r2, #0]
 8009748:	d1e9      	bne.n	800971e <taabe588+0x9e>
 800974a:	4638      	mov	r0, r7
 800974c:	9f02      	ldr	r7, [sp, #8]
 800974e:	9903      	ldr	r1, [sp, #12]
 8009750:	463a      	mov	r2, r7
 8009752:	f7ff fcd3 	bl	80090fc <taabe39>
 8009756:	9b05      	ldr	r3, [sp, #20]
 8009758:	1eba      	subs	r2, r7, #2
 800975a:	4423      	add	r3, r4
 800975c:	469e      	mov	lr, r3
 800975e:	3c02      	subs	r4, #2
 8009760:	4617      	mov	r7, r2
 8009762:	4613      	mov	r3, r2
 8009764:	f44f 2800 	mov.w	r8, #524288	; 0x80000
 8009768:	f04f 0900 	mov.w	r9, #0
 800976c:	f834 0f02 	ldrh.w	r0, [r4, #2]!
 8009770:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8009774:	46c2      	mov	sl, r8
 8009776:	46cb      	mov	fp, r9
 8009778:	fbc0 ab81 	smlalbb	sl, fp, r0, r1
 800977c:	ea4f 511a 	mov.w	r1, sl, lsr #20
 8009780:	45a6      	cmp	lr, r4
 8009782:	ea41 310b 	orr.w	r1, r1, fp, lsl #12
 8009786:	f301 010f 	ssat	r1, #16, r1
 800978a:	8019      	strh	r1, [r3, #0]
 800978c:	d1ee      	bne.n	800976c <taabe588+0xec>
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	441a      	add	r2, r3
 8009792:	9b04      	ldr	r3, [sp, #16]
 8009794:	3b02      	subs	r3, #2
 8009796:	f937 1f02 	ldrsh.w	r1, [r7, #2]!
 800979a:	f823 1f02 	strh.w	r1, [r3, #2]!
 800979e:	42ba      	cmp	r2, r7
 80097a0:	d1f9      	bne.n	8009796 <taabe588+0x116>
 80097a2:	4630      	mov	r0, r6
 80097a4:	4629      	mov	r1, r5
 80097a6:	f7fe ffad 	bl	8008704 <taabe22>
 80097aa:	2000      	movs	r0, #0
 80097ac:	b007      	add	sp, #28
 80097ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b2:	2001      	movs	r0, #1
 80097b4:	b007      	add	sp, #28
 80097b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ba:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80097be:	4638      	mov	r0, r7
 80097c0:	f7ff fc9c 	bl	80090fc <taabe39>
 80097c4:	e7ed      	b.n	80097a2 <taabe588+0x122>
 80097c6:	bf00      	nop

080097c8 <taabe756>:
 80097c8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 80097cc:	b510      	push	{r4, lr}
 80097ce:	6852      	ldr	r2, [r2, #4]
 80097d0:	68c4      	ldr	r4, [r0, #12]
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	2a00      	cmp	r2, #0
 80097d6:	b082      	sub	sp, #8
 80097d8:	dd21      	ble.n	800981e <taabe756+0x56>
 80097da:	eb04 0142 	add.w	r1, r4, r2, lsl #1
 80097de:	428b      	cmp	r3, r1
 80097e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80097e4:	d205      	bcs.n	80097f2 <taabe756+0x2a>
 80097e6:	1899      	adds	r1, r3, r2
 80097e8:	428c      	cmp	r4, r1
 80097ea:	bf34      	ite	cc
 80097ec:	2100      	movcc	r1, #0
 80097ee:	2101      	movcs	r1, #1
 80097f0:	b161      	cbz	r1, 800980c <taabe756+0x44>
 80097f2:	2100      	movs	r1, #0
 80097f4:	4618      	mov	r0, r3
 80097f6:	9201      	str	r2, [sp, #4]
 80097f8:	f000 fc34 	bl	800a064 <memset>
 80097fc:	9a01      	ldr	r2, [sp, #4]
 80097fe:	2100      	movs	r1, #0
 8009800:	4620      	mov	r0, r4
 8009802:	b002      	add	sp, #8
 8009804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009808:	f000 bc2c 	b.w	800a064 <memset>
 800980c:	3b02      	subs	r3, #2
 800980e:	3c02      	subs	r4, #2
 8009810:	441a      	add	r2, r3
 8009812:	f823 1f02 	strh.w	r1, [r3, #2]!
 8009816:	4293      	cmp	r3, r2
 8009818:	f824 1f02 	strh.w	r1, [r4, #2]!
 800981c:	d1f9      	bne.n	8009812 <taabe756+0x4a>
 800981e:	b002      	add	sp, #8
 8009820:	bd10      	pop	{r4, pc}
 8009822:	bf00      	nop

08009824 <taabe358>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4614      	mov	r4, r2
 8009828:	460d      	mov	r5, r1
 800982a:	2201      	movs	r2, #1
 800982c:	2108      	movs	r1, #8
 800982e:	4606      	mov	r6, r0
 8009830:	f7fe ff34 	bl	800869c <taabe284>
 8009834:	6020      	str	r0, [r4, #0]
 8009836:	b118      	cbz	r0, 8009840 <taabe358+0x1c>
 8009838:	e9c0 6500 	strd	r6, r5, [r0]
 800983c:	2000      	movs	r0, #0
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	2001      	movs	r0, #1
 8009842:	bd70      	pop	{r4, r5, r6, pc}

08009844 <taabe397>:
 8009844:	4601      	mov	r1, r0
 8009846:	b110      	cbz	r0, 800984e <taabe397+0xa>
 8009848:	6800      	ldr	r0, [r0, #0]
 800984a:	f7fe bf5b 	b.w	8008704 <taabe22>
 800984e:	4770      	bx	lr

08009850 <taabe152>:
 8009850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009854:	6845      	ldr	r5, [r0, #4]
 8009856:	2d00      	cmp	r5, #0
 8009858:	dd5f      	ble.n	800991a <taabe152+0xca>
 800985a:	1e8e      	subs	r6, r1, #2
 800985c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800991c <taabe152+0xcc>
 8009860:	eb06 0a45 	add.w	sl, r6, r5, lsl #1
 8009864:	4633      	mov	r3, r6
 8009866:	f933 1f02 	ldrsh.w	r1, [r3, #2]!
 800986a:	4588      	cmp	r8, r1
 800986c:	bfb8      	it	lt
 800986e:	4688      	movlt	r8, r1
 8009870:	459a      	cmp	sl, r3
 8009872:	d1f8      	bne.n	8009866 <taabe152+0x16>
 8009874:	1f17      	subs	r7, r2, #4
 8009876:	463c      	mov	r4, r7
 8009878:	46b9      	mov	r9, r7
 800987a:	f936 0f02 	ldrsh.w	r0, [r6, #2]!
 800987e:	eba0 0008 	sub.w	r0, r0, r8
 8009882:	f300 000f 	ssat	r0, #16, r0
 8009886:	b200      	sxth	r0, r0
 8009888:	f7ff fbda 	bl	8009040 <taabe419>
 800988c:	45b2      	cmp	sl, r6
 800988e:	f849 0f04 	str.w	r0, [r9, #4]!
 8009892:	d1f2      	bne.n	800987a <taabe152+0x2a>
 8009894:	2200      	movs	r2, #0
 8009896:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800989a:	4638      	mov	r0, r7
 800989c:	4613      	mov	r3, r2
 800989e:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80098a2:	188a      	adds	r2, r1, r2
 80098a4:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80098a8:	4285      	cmp	r5, r0
 80098aa:	d1f8      	bne.n	800989e <taabe152+0x4e>
 80098ac:	2000      	movs	r0, #0
 80098ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80098b2:	f7f6 feb1 	bl	8000618 <__aeabi_ldivmod>
 80098b6:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80098ba:	f171 0300 	sbcs.w	r3, r1, #0
 80098be:	bfa8      	it	ge
 80098c0:	f06f 4000 	mvnge.w	r0, #2147483648	; 0x80000000
 80098c4:	460f      	mov	r7, r1
 80098c6:	bfa8      	it	ge
 80098c8:	2700      	movge	r7, #0
 80098ca:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80098ce:	f177 33ff 	sbcs.w	r3, r7, #4294967295
 80098d2:	db1d      	blt.n	8009910 <taabe152+0xc0>
 80098d4:	f854 3f04 	ldr.w	r3, [r4, #4]!
 80098d8:	fba3 2100 	umull	r2, r1, r3, r0
 80098dc:	17de      	asrs	r6, r3, #31
 80098de:	fb07 f303 	mul.w	r3, r7, r3
 80098e2:	f112 4280 	adds.w	r2, r2, #1073741824	; 0x40000000
 80098e6:	fb00 3306 	mla	r3, r0, r6, r3
 80098ea:	eb43 0301 	adc.w	r3, r3, r1
 80098ee:	0fd2      	lsrs	r2, r2, #31
 80098f0:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 80098f4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80098f8:	ea4f 73e3 	mov.w	r3, r3, asr #31
 80098fc:	f173 0300 	sbcs.w	r3, r3, #0
 8009900:	bfa8      	it	ge
 8009902:	f06f 4200 	mvnge.w	r2, #2147483648	; 0x80000000
 8009906:	42a5      	cmp	r5, r4
 8009908:	6022      	str	r2, [r4, #0]
 800990a:	d1e3      	bne.n	80098d4 <taabe152+0x84>
 800990c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009910:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009914:	f04f 37ff 	mov.w	r7, #4294967295
 8009918:	e7dc      	b.n	80098d4 <taabe152+0x84>
 800991a:	deff      	udf	#255	; 0xff
 800991c:	ffff8000 	.word	0xffff8000

08009920 <taabe738.part.0>:
 8009920:	b510      	push	{r4, lr}
 8009922:	4604      	mov	r4, r0
 8009924:	b082      	sub	sp, #8
 8009926:	6800      	ldr	r0, [r0, #0]
 8009928:	69a1      	ldr	r1, [r4, #24]
 800992a:	9001      	str	r0, [sp, #4]
 800992c:	f7fe feea 	bl	8008704 <taabe22>
 8009930:	6961      	ldr	r1, [r4, #20]
 8009932:	9801      	ldr	r0, [sp, #4]
 8009934:	f7fe fee6 	bl	8008704 <taabe22>
 8009938:	6921      	ldr	r1, [r4, #16]
 800993a:	9801      	ldr	r0, [sp, #4]
 800993c:	f7fe fee2 	bl	8008704 <taabe22>
 8009940:	68a1      	ldr	r1, [r4, #8]
 8009942:	9801      	ldr	r0, [sp, #4]
 8009944:	f7fe fede 	bl	8008704 <taabe22>
 8009948:	9801      	ldr	r0, [sp, #4]
 800994a:	4621      	mov	r1, r4
 800994c:	b002      	add	sp, #8
 800994e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009952:	f7fe bed7 	b.w	8008704 <taabe22>
 8009956:	bf00      	nop

08009958 <taabe521>:
 8009958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800995c:	4688      	mov	r8, r1
 800995e:	4616      	mov	r6, r2
 8009960:	2124      	movs	r1, #36	; 0x24
 8009962:	2201      	movs	r2, #1
 8009964:	461d      	mov	r5, r3
 8009966:	4607      	mov	r7, r0
 8009968:	f7fe fe98 	bl	800869c <taabe284>
 800996c:	9b06      	ldr	r3, [sp, #24]
 800996e:	6018      	str	r0, [r3, #0]
 8009970:	2800      	cmp	r0, #0
 8009972:	d070      	beq.n	8009a56 <taabe521+0xfe>
 8009974:	0073      	lsls	r3, r6, #1
 8009976:	4604      	mov	r4, r0
 8009978:	6007      	str	r7, [r0, #0]
 800997a:	6043      	str	r3, [r0, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	00f1      	lsls	r1, r6, #3
 8009980:	4638      	mov	r0, r7
 8009982:	f7fe fe8b 	bl	800869c <taabe284>
 8009986:	60a0      	str	r0, [r4, #8]
 8009988:	2800      	cmp	r0, #0
 800998a:	d05e      	beq.n	8009a4a <taabe521+0xf2>
 800998c:	2e00      	cmp	r6, #0
 800998e:	dd09      	ble.n	80099a4 <taabe521+0x4c>
 8009990:	f1a8 0304 	sub.w	r3, r8, #4
 8009994:	2100      	movs	r1, #0
 8009996:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800999a:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800999e:	3101      	adds	r1, #1
 80099a0:	428e      	cmp	r6, r1
 80099a2:	d1f8      	bne.n	8009996 <taabe521+0x3e>
 80099a4:	6861      	ldr	r1, [r4, #4]
 80099a6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80099aa:	60e3      	str	r3, [r4, #12]
 80099ac:	0089      	lsls	r1, r1, #2
 80099ae:	2200      	movs	r2, #0
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7fe fe73 	bl	800869c <taabe284>
 80099b6:	6120      	str	r0, [r4, #16]
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d046      	beq.n	8009a4a <taabe521+0xf2>
 80099bc:	6861      	ldr	r1, [r4, #4]
 80099be:	2900      	cmp	r1, #0
 80099c0:	dd09      	ble.n	80099d6 <taabe521+0x7e>
 80099c2:	3804      	subs	r0, #4
 80099c4:	2300      	movs	r3, #0
 80099c6:	68e1      	ldr	r1, [r4, #12]
 80099c8:	3101      	adds	r1, #1
 80099ca:	f840 1f04 	str.w	r1, [r0, #4]!
 80099ce:	6861      	ldr	r1, [r4, #4]
 80099d0:	3301      	adds	r3, #1
 80099d2:	4299      	cmp	r1, r3
 80099d4:	dcf7      	bgt.n	80099c6 <taabe521+0x6e>
 80099d6:	0089      	lsls	r1, r1, #2
 80099d8:	2200      	movs	r2, #0
 80099da:	4638      	mov	r0, r7
 80099dc:	f7fe fe5e 	bl	800869c <taabe284>
 80099e0:	6160      	str	r0, [r4, #20]
 80099e2:	b390      	cbz	r0, 8009a4a <taabe521+0xf2>
 80099e4:	6862      	ldr	r2, [r4, #4]
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	dd09      	ble.n	80099fe <taabe521+0xa6>
 80099ea:	3804      	subs	r0, #4
 80099ec:	2300      	movs	r3, #0
 80099ee:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80099f2:	f840 1f04 	str.w	r1, [r0, #4]!
 80099f6:	6862      	ldr	r2, [r4, #4]
 80099f8:	3301      	adds	r3, #1
 80099fa:	429a      	cmp	r2, r3
 80099fc:	dcf9      	bgt.n	80099f2 <taabe521+0x9a>
 80099fe:	1053      	asrs	r3, r2, #1
 8009a00:	f103 0801 	add.w	r8, r3, #1
 8009a04:	07d2      	lsls	r2, r2, #31
 8009a06:	bf54      	ite	pl
 8009a08:	fb03 f808 	mulpl.w	r8, r3, r8
 8009a0c:	fb08 f808 	mulmi.w	r8, r8, r8
 8009a10:	4638      	mov	r0, r7
 8009a12:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8009a16:	2200      	movs	r2, #0
 8009a18:	4639      	mov	r1, r7
 8009a1a:	f7fe fe3f 	bl	800869c <taabe284>
 8009a1e:	61a0      	str	r0, [r4, #24]
 8009a20:	b198      	cbz	r0, 8009a4a <taabe521+0xf2>
 8009a22:	f1b8 0f00 	cmp.w	r8, #0
 8009a26:	dd07      	ble.n	8009a38 <taabe521+0xe0>
 8009a28:	3802      	subs	r0, #2
 8009a2a:	19c1      	adds	r1, r0, r7
 8009a2c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8009a30:	f820 3f02 	strh.w	r3, [r0, #2]!
 8009a34:	4281      	cmp	r1, r0
 8009a36:	d1fb      	bne.n	8009a30 <taabe521+0xd8>
 8009a38:	42b5      	cmp	r5, r6
 8009a3a:	f04f 0000 	mov.w	r0, #0
 8009a3e:	bfa8      	it	ge
 8009a40:	4635      	movge	r5, r6
 8009a42:	e9c4 5007 	strd	r5, r0, [r4, #28]
 8009a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f7ff ff68 	bl	8009920 <taabe738.part.0>
 8009a50:	2001      	movs	r0, #1
 8009a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a56:	2001      	movs	r0, #1
 8009a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009a5c <taabe738>:
 8009a5c:	b108      	cbz	r0, 8009a62 <taabe738+0x6>
 8009a5e:	f7ff bf5f 	b.w	8009920 <taabe738.part.0>
 8009a62:	4770      	bx	lr

08009a64 <taabe343>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	6842      	ldr	r2, [r0, #4]
 8009a6a:	b089      	sub	sp, #36	; 0x24
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	9205      	str	r2, [sp, #20]
 8009a70:	3a01      	subs	r2, #1
 8009a72:	9004      	str	r0, [sp, #16]
 8009a74:	9102      	str	r1, [sp, #8]
 8009a76:	6880      	ldr	r0, [r0, #8]
 8009a78:	6959      	ldr	r1, [r3, #20]
 8009a7a:	f8d3 a010 	ldr.w	sl, [r3, #16]
 8009a7e:	f8d3 9018 	ldr.w	r9, [r3, #24]
 8009a82:	9006      	str	r0, [sp, #24]
 8009a84:	2a00      	cmp	r2, #0
 8009a86:	9201      	str	r2, [sp, #4]
 8009a88:	9107      	str	r1, [sp, #28]
 8009a8a:	dd78      	ble.n	8009b7e <taabe343+0x11a>
 8009a8c:	9a07      	ldr	r2, [sp, #28]
 8009a8e:	9b05      	ldr	r3, [sp, #20]
 8009a90:	9f01      	ldr	r7, [sp, #4]
 8009a92:	f8cd a00c 	str.w	sl, [sp, #12]
 8009a96:	eb02 0483 	add.w	r4, r2, r3, lsl #2
 8009a9a:	9a06      	ldr	r2, [sp, #24]
 8009a9c:	3c04      	subs	r4, #4
 8009a9e:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8009aa2:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8009aa6:	9a02      	ldr	r2, [sp, #8]
 8009aa8:	2000      	movs	r0, #0
 8009aaa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009aae:	f7ff fa89 	bl	8008fc4 <taabe312>
 8009ab2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8009ab6:	ea4f 0587 	mov.w	r5, r7, lsl #2
 8009aba:	f000 80cf 	beq.w	8009c5c <taabe343+0x1f8>
 8009abe:	4240      	negs	r0, r0
 8009ac0:	fa0f fb80 	sxth.w	fp, r0
 8009ac4:	46de      	mov	lr, fp
 8009ac6:	e954 2301 	ldrd	r2, r3, [r4, #-4]
 8009aca:	429a      	cmp	r2, r3
 8009acc:	f107 3aff 	add.w	sl, r7, #4294967295
 8009ad0:	f2c0 80b0 	blt.w	8009c34 <taabe343+0x1d0>
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	46ac      	mov	ip, r5
 8009ad8:	463b      	mov	r3, r7
 8009ada:	1f26      	subs	r6, r4, #4
 8009adc:	2f01      	cmp	r7, #1
 8009ade:	d00f      	beq.n	8009b00 <taabe343+0x9c>
 8009ae0:	f858 1c04 	ldr.w	r1, [r8, #-4]
 8009ae4:	f858 2c0c 	ldr.w	r2, [r8, #-12]
 8009ae8:	4291      	cmp	r1, r2
 8009aea:	d009      	beq.n	8009b00 <taabe343+0x9c>
 8009aec:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8009af0:	6802      	ldr	r2, [r0, #0]
 8009af2:	4291      	cmp	r1, r2
 8009af4:	da04      	bge.n	8009b00 <taabe343+0x9c>
 8009af6:	f1a5 0c08 	sub.w	ip, r5, #8
 8009afa:	1ebb      	subs	r3, r7, #2
 8009afc:	f1a4 0008 	sub.w	r0, r4, #8
 8009b00:	9a01      	ldr	r2, [sp, #4]
 8009b02:	42ba      	cmp	r2, r7
 8009b04:	f000 80a4 	beq.w	8009c50 <taabe343+0x1ec>
 8009b08:	9903      	ldr	r1, [sp, #12]
 8009b0a:	2501      	movs	r5, #1
 8009b0c:	f851 200c 	ldr.w	r2, [r1, ip]
 8009b10:	fa85 f282 	qadd	r2, r2, r5
 8009b14:	f841 2027 	str.w	r2, [r1, r7, lsl #2]
 8009b18:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009b1c:	4472      	add	r2, lr
 8009b1e:	f302 020f 	ssat	r2, #16, r2
 8009b22:	b212      	sxth	r2, r2
 8009b24:	6022      	str	r2, [r4, #0]
 8009b26:	fa47 f405 	asr.w	r4, r7, r5
 8009b2a:	1960      	adds	r0, r4, r5
 8009b2c:	07fa      	lsls	r2, r7, #31
 8009b2e:	ea4f 0563 	mov.w	r5, r3, asr #1
 8009b32:	f105 0101 	add.w	r1, r5, #1
 8009b36:	bf54      	ite	pl
 8009b38:	4360      	mulpl	r0, r4
 8009b3a:	4340      	mulmi	r0, r0
 8009b3c:	07df      	lsls	r7, r3, #31
 8009b3e:	bf54      	ite	pl
 8009b40:	4369      	mulpl	r1, r5
 8009b42:	4349      	mulmi	r1, r1
 8009b44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b48:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	4429      	add	r1, r5
 8009b50:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 8009b54:	eb09 0141 	add.w	r1, r9, r1, lsl #1
 8009b58:	1e82      	subs	r2, r0, #2
 8009b5a:	f933 7f02 	ldrsh.w	r7, [r3, #2]!
 8009b5e:	f822 7f02 	strh.w	r7, [r2, #2]!
 8009b62:	4299      	cmp	r1, r3
 8009b64:	d1f9      	bne.n	8009b5a <taabe343+0xf6>
 8009b66:	42a5      	cmp	r5, r4
 8009b68:	d06a      	beq.n	8009c40 <taabe343+0x1dc>
 8009b6a:	f820 b014 	strh.w	fp, [r0, r4, lsl #1]
 8009b6e:	f1ba 0700 	subs.w	r7, sl, #0
 8009b72:	f1a8 0804 	sub.w	r8, r8, #4
 8009b76:	4634      	mov	r4, r6
 8009b78:	dc93      	bgt.n	8009aa2 <taabe343+0x3e>
 8009b7a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009b7e:	9a02      	ldr	r2, [sp, #8]
 8009b80:	2301      	movs	r3, #1
 8009b82:	f8ca 3000 	str.w	r3, [sl]
 8009b86:	9b06      	ldr	r3, [sp, #24]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009b90:	f7ff fa18 	bl	8008fc4 <taabe312>
 8009b94:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8009b98:	d069      	beq.n	8009c6e <taabe343+0x20a>
 8009b9a:	4243      	negs	r3, r0
 8009b9c:	b21b      	sxth	r3, r3
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	9907      	ldr	r1, [sp, #28]
 8009ba2:	600a      	str	r2, [r1, #0]
 8009ba4:	9901      	ldr	r1, [sp, #4]
 8009ba6:	f8a9 3000 	strh.w	r3, [r9]
 8009baa:	104a      	asrs	r2, r1, #1
 8009bac:	07c9      	lsls	r1, r1, #31
 8009bae:	9904      	ldr	r1, [sp, #16]
 8009bb0:	69cc      	ldr	r4, [r1, #28]
 8009bb2:	f102 0301 	add.w	r3, r2, #1
 8009bb6:	bf54      	ite	pl
 8009bb8:	435a      	mulpl	r2, r3
 8009bba:	fb03 f203 	mulmi.w	r2, r3, r3
 8009bbe:	1b1b      	subs	r3, r3, r4
 8009bc0:	d459      	bmi.n	8009c76 <taabe343+0x212>
 8009bc2:	4422      	add	r2, r4
 8009bc4:	ebc4 76c4 	rsb	r6, r4, r4, lsl #31
 8009bc8:	2100      	movs	r1, #0
 8009bca:	eb09 0942 	add.w	r9, r9, r2, lsl #1
 8009bce:	1c5d      	adds	r5, r3, #1
 8009bd0:	0076      	lsls	r6, r6, #1
 8009bd2:	4608      	mov	r0, r1
 8009bd4:	2c00      	cmp	r4, #0
 8009bd6:	bfd8      	it	le
 8009bd8:	2200      	movle	r2, #0
 8009bda:	dd09      	ble.n	8009bf0 <taabe343+0x18c>
 8009bdc:	eb06 0309 	add.w	r3, r6, r9
 8009be0:	2200      	movs	r2, #0
 8009be2:	f933 7b02 	ldrsh.w	r7, [r3], #2
 8009be6:	4599      	cmp	r9, r3
 8009be8:	443a      	add	r2, r7
 8009bea:	d1fa      	bne.n	8009be2 <taabe343+0x17e>
 8009bec:	fb92 f2f4 	sdiv	r2, r2, r4
 8009bf0:	f302 020f 	ssat	r2, #16, r2
 8009bf4:	b212      	sxth	r2, r2
 8009bf6:	4290      	cmp	r0, r2
 8009bf8:	f101 0101 	add.w	r1, r1, #1
 8009bfc:	bfb8      	it	lt
 8009bfe:	4610      	movlt	r0, r2
 8009c00:	42a9      	cmp	r1, r5
 8009c02:	f109 0902 	add.w	r9, r9, #2
 8009c06:	d1e5      	bne.n	8009bd4 <taabe343+0x170>
 8009c08:	9b05      	ldr	r3, [sp, #20]
 8009c0a:	9904      	ldr	r1, [sp, #16]
 8009c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009c10:	3b01      	subs	r3, #1
 8009c12:	68ca      	ldr	r2, [r1, #12]
 8009c14:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	dc07      	bgt.n	8009c2c <taabe343+0x1c8>
 8009c1c:	6a0b      	ldr	r3, [r1, #32]
 8009c1e:	2b07      	cmp	r3, #7
 8009c20:	dc04      	bgt.n	8009c2c <taabe343+0x1c8>
 8009c22:	4240      	negs	r0, r0
 8009c24:	b200      	sxth	r0, r0
 8009c26:	b009      	add	sp, #36	; 0x24
 8009c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2c:	4813      	ldr	r0, [pc, #76]	; (8009c7c <taabe343+0x218>)
 8009c2e:	b009      	add	sp, #36	; 0x24
 8009c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c34:	1f26      	subs	r6, r4, #4
 8009c36:	4653      	mov	r3, sl
 8009c38:	f1a5 0c04 	sub.w	ip, r5, #4
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	e74d      	b.n	8009adc <taabe343+0x78>
 8009c40:	f930 3015 	ldrsh.w	r3, [r0, r5, lsl #1]
 8009c44:	449e      	add	lr, r3
 8009c46:	f30e 0e0f 	ssat	lr, #16, lr
 8009c4a:	f820 e015 	strh.w	lr, [r0, r5, lsl #1]
 8009c4e:	e78e      	b.n	8009b6e <taabe343+0x10a>
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d007      	beq.n	8009c64 <taabe343+0x200>
 8009c54:	9a04      	ldr	r2, [sp, #16]
 8009c56:	2101      	movs	r1, #1
 8009c58:	6211      	str	r1, [r2, #32]
 8009c5a:	e755      	b.n	8009b08 <taabe343+0xa4>
 8009c5c:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8009c60:	46f3      	mov	fp, lr
 8009c62:	e730      	b.n	8009ac6 <taabe343+0x62>
 8009c64:	9904      	ldr	r1, [sp, #16]
 8009c66:	6a0a      	ldr	r2, [r1, #32]
 8009c68:	3201      	adds	r2, #1
 8009c6a:	620a      	str	r2, [r1, #32]
 8009c6c:	e74c      	b.n	8009b08 <taabe343+0xa4>
 8009c6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009c72:	4613      	mov	r3, r2
 8009c74:	e794      	b.n	8009ba0 <taabe343+0x13c>
 8009c76:	2000      	movs	r0, #0
 8009c78:	e7c6      	b.n	8009c08 <taabe343+0x1a4>
 8009c7a:	bf00      	nop
 8009c7c:	ffff8000 	.word	0xffff8000

08009c80 <taabe7>:
 8009c80:	6843      	ldr	r3, [r0, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	dd2f      	ble.n	8009ce6 <taabe7+0x66>
 8009c86:	6901      	ldr	r1, [r0, #16]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	3904      	subs	r1, #4
 8009c8c:	68c3      	ldr	r3, [r0, #12]
 8009c8e:	3301      	adds	r3, #1
 8009c90:	f841 3f04 	str.w	r3, [r1, #4]!
 8009c94:	6843      	ldr	r3, [r0, #4]
 8009c96:	3201      	adds	r2, #1
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	dcf7      	bgt.n	8009c8c <taabe7+0xc>
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	dd22      	ble.n	8009ce6 <taabe7+0x66>
 8009ca0:	6941      	ldr	r1, [r0, #20]
 8009ca2:	b410      	push	{r4}
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	3904      	subs	r1, #4
 8009ca8:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8009cac:	f841 4f04 	str.w	r4, [r1, #4]!
 8009cb0:	6843      	ldr	r3, [r0, #4]
 8009cb2:	3201      	adds	r2, #1
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	dcf9      	bgt.n	8009cac <taabe7+0x2c>
 8009cb8:	1059      	asrs	r1, r3, #1
 8009cba:	1c4a      	adds	r2, r1, #1
 8009cbc:	07dc      	lsls	r4, r3, #31
 8009cbe:	bf54      	ite	pl
 8009cc0:	434a      	mulpl	r2, r1
 8009cc2:	4352      	mulmi	r2, r2
 8009cc4:	2a00      	cmp	r2, #0
 8009cc6:	dd09      	ble.n	8009cdc <taabe7+0x5c>
 8009cc8:	6983      	ldr	r3, [r0, #24]
 8009cca:	3b02      	subs	r3, #2
 8009ccc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8009cd0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009cd4:	f823 1f02 	strh.w	r1, [r3, #2]!
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d1fb      	bne.n	8009cd4 <taabe7+0x54>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ce2:	6203      	str	r3, [r0, #32]
 8009ce4:	4770      	bx	lr
 8009ce6:	1059      	asrs	r1, r3, #1
 8009ce8:	1c4a      	adds	r2, r1, #1
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	bf54      	ite	pl
 8009cee:	434a      	mulpl	r2, r1
 8009cf0:	4352      	mulmi	r2, r2
 8009cf2:	2a00      	cmp	r2, #0
 8009cf4:	dd09      	ble.n	8009d0a <taabe7+0x8a>
 8009cf6:	6983      	ldr	r3, [r0, #24]
 8009cf8:	3b02      	subs	r3, #2
 8009cfa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8009cfe:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8009d02:	f823 1f02 	strh.w	r1, [r3, #2]!
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d1fb      	bne.n	8009d02 <taabe7+0x82>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	6203      	str	r3, [r0, #32]
 8009d0e:	4770      	bx	lr

08009d10 <taabe171>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	b085      	sub	sp, #20
 8009d16:	2901      	cmp	r1, #1
 8009d18:	9201      	str	r2, [sp, #4]
 8009d1a:	f240 80d5 	bls.w	8009ec8 <taabe171+0x1b8>
 8009d1e:	9a01      	ldr	r2, [sp, #4]
 8009d20:	2400      	movs	r4, #0
 8009d22:	6014      	str	r4, [r2, #0]
 8009d24:	460f      	mov	r7, r1
 8009d26:	4680      	mov	r8, r0
 8009d28:	601c      	str	r4, [r3, #0]
 8009d2a:	46a2      	mov	sl, r4
 8009d2c:	46a1      	mov	r9, r4
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	f000 80d7 	beq.w	8009ee2 <taabe171+0x1d2>
 8009d34:	1e62      	subs	r2, r4, #1
 8009d36:	4442      	add	r2, r8
 8009d38:	2000      	movs	r0, #0
 8009d3a:	e004      	b.n	8009d46 <taabe171+0x36>
 8009d3c:	3401      	adds	r4, #1
 8009d3e:	42a7      	cmp	r7, r4
 8009d40:	f04f 0001 	mov.w	r0, #1
 8009d44:	d04e      	beq.n	8009de4 <taabe171+0xd4>
 8009d46:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009d4a:	2920      	cmp	r1, #32
 8009d4c:	d0f6      	beq.n	8009d3c <taabe171+0x2c>
 8009d4e:	42bc      	cmp	r4, r7
 8009d50:	d048      	beq.n	8009de4 <taabe171+0xd4>
 8009d52:	1eba      	subs	r2, r7, #2
 8009d54:	42a2      	cmp	r2, r4
 8009d56:	f818 6004 	ldrb.w	r6, [r8, r4]
 8009d5a:	d902      	bls.n	8009d62 <taabe171+0x52>
 8009d5c:	2e0d      	cmp	r6, #13
 8009d5e:	f000 80b7 	beq.w	8009ed0 <taabe171+0x1c0>
 8009d62:	2e0a      	cmp	r6, #10
 8009d64:	d039      	beq.n	8009dda <taabe171+0xca>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f040 80ae 	bne.w	8009ec8 <taabe171+0x1b8>
 8009d6c:	2e3d      	cmp	r6, #61	; 0x3d
 8009d6e:	f000 80a5 	beq.w	8009ebc <taabe171+0x1ac>
 8009d72:	4a6b      	ldr	r2, [pc, #428]	; (8009f20 <taabe171+0x210>)
 8009d74:	2141      	movs	r1, #65	; 0x41
 8009d76:	f102 003f 	add.w	r0, r2, #63	; 0x3f
 8009d7a:	e004      	b.n	8009d86 <taabe171+0x76>
 8009d7c:	4290      	cmp	r0, r2
 8009d7e:	f000 80a3 	beq.w	8009ec8 <taabe171+0x1b8>
 8009d82:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8009d86:	428e      	cmp	r6, r1
 8009d88:	d1f8      	bne.n	8009d7c <taabe171+0x6c>
 8009d8a:	4966      	ldr	r1, [pc, #408]	; (8009f24 <taabe171+0x214>)
 8009d8c:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 8009d90:	1c4d      	adds	r5, r1, #1
 8009d92:	f101 0080 	add.w	r0, r1, #128	; 0x80
 8009d96:	f04f 0c00 	mov.w	ip, #0
 8009d9a:	43c9      	mvns	r1, r1
 8009d9c:	e001      	b.n	8009da2 <taabe171+0x92>
 8009d9e:	f815 eb01 	ldrb.w	lr, [r5], #1
 8009da2:	194a      	adds	r2, r1, r5
 8009da4:	4072      	eors	r2, r6
 8009da6:	f1c2 0b00 	rsb	fp, r2, #0
 8009daa:	ea42 020b 	orr.w	r2, r2, fp
 8009dae:	43d2      	mvns	r2, r2
 8009db0:	0fd2      	lsrs	r2, r2, #31
 8009db2:	f1c2 0b00 	rsb	fp, r2, #0
 8009db6:	3a01      	subs	r2, #1
 8009db8:	ea0e 0e0b 	and.w	lr, lr, fp
 8009dbc:	ea02 0c0c 	and.w	ip, r2, ip
 8009dc0:	42a8      	cmp	r0, r5
 8009dc2:	ea4e 0c0c 	orr.w	ip, lr, ip
 8009dc6:	d1ea      	bne.n	8009d9e <taabe171+0x8e>
 8009dc8:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
 8009dcc:	d07c      	beq.n	8009ec8 <taabe171+0x1b8>
 8009dce:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8009dd2:	d802      	bhi.n	8009dda <taabe171+0xca>
 8009dd4:	f1ba 0f00 	cmp.w	sl, #0
 8009dd8:	d176      	bne.n	8009ec8 <taabe171+0x1b8>
 8009dda:	3401      	adds	r4, #1
 8009ddc:	42a7      	cmp	r7, r4
 8009dde:	f109 0901 	add.w	r9, r9, #1
 8009de2:	d8a7      	bhi.n	8009d34 <taabe171+0x24>
 8009de4:	9302      	str	r3, [sp, #8]
 8009de6:	f1b9 0f00 	cmp.w	r9, #0
 8009dea:	d06d      	beq.n	8009ec8 <taabe171+0x1b8>
 8009dec:	f009 0207 	and.w	r2, r9, #7
 8009df0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8009df4:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8009df8:	0052      	lsls	r2, r2, #1
 8009dfa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8009dfe:	3207      	adds	r2, #7
 8009e00:	ebca 0049 	rsb	r0, sl, r9, lsl #1
 8009e04:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8009e08:	2101      	movs	r1, #1
 8009e0a:	f000 f8c1 	bl	8009f90 <calloc>
 8009e0e:	9003      	str	r0, [sp, #12]
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d07e      	beq.n	8009f12 <taabe171+0x202>
 8009e14:	4a43      	ldr	r2, [pc, #268]	; (8009f24 <taabe171+0x214>)
 8009e16:	f108 38ff 	add.w	r8, r8, #4294967295
 8009e1a:	f04f 0900 	mov.w	r9, #0
 8009e1e:	4447      	add	r7, r8
 8009e20:	2603      	movs	r6, #3
 8009e22:	46ca      	mov	sl, r9
 8009e24:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 8009e28:	ea6f 0c02 	mvn.w	ip, r2
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	f818 5f01 	ldrb.w	r5, [r8, #1]!
 8009e32:	f1a5 020a 	sub.w	r2, r5, #10
 8009e36:	b2d2      	uxtb	r2, r2
 8009e38:	2a16      	cmp	r2, #22
 8009e3a:	d804      	bhi.n	8009e46 <taabe171+0x136>
 8009e3c:	493a      	ldr	r1, [pc, #232]	; (8009f28 <taabe171+0x218>)
 8009e3e:	fa21 f202 	lsr.w	r2, r1, r2
 8009e42:	07d2      	lsls	r2, r2, #31
 8009e44:	d42d      	bmi.n	8009ea2 <taabe171+0x192>
 8009e46:	4c39      	ldr	r4, [pc, #228]	; (8009f2c <taabe171+0x21c>)
 8009e48:	207f      	movs	r0, #127	; 0x7f
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	e001      	b.n	8009e52 <taabe171+0x142>
 8009e4e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009e52:	eb0c 0204 	add.w	r2, ip, r4
 8009e56:	406a      	eors	r2, r5
 8009e58:	f1c2 0b00 	rsb	fp, r2, #0
 8009e5c:	ea42 020b 	orr.w	r2, r2, fp
 8009e60:	43d2      	mvns	r2, r2
 8009e62:	0fd2      	lsrs	r2, r2, #31
 8009e64:	f1c2 0b00 	rsb	fp, r2, #0
 8009e68:	3a01      	subs	r2, #1
 8009e6a:	ea00 000b 	and.w	r0, r0, fp
 8009e6e:	4011      	ands	r1, r2
 8009e70:	45a6      	cmp	lr, r4
 8009e72:	ea41 0100 	orr.w	r1, r1, r0
 8009e76:	d1ea      	bne.n	8009e4e <taabe171+0x13e>
 8009e78:	f1a1 0240 	sub.w	r2, r1, #64	; 0x40
 8009e7c:	fab2 f282 	clz	r2, r2
 8009e80:	0952      	lsrs	r2, r2, #5
 8009e82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009e86:	4250      	negs	r0, r2
 8009e88:	f109 0901 	add.w	r9, r9, #1
 8009e8c:	ea41 1a8a 	orr.w	sl, r1, sl, lsl #6
 8009e90:	3a01      	subs	r2, #1
 8009e92:	1e71      	subs	r1, r6, #1
 8009e94:	4001      	ands	r1, r0
 8009e96:	4016      	ands	r6, r2
 8009e98:	f1b9 0f04 	cmp.w	r9, #4
 8009e9c:	ea46 0601 	orr.w	r6, r6, r1
 8009ea0:	d021      	beq.n	8009ee6 <taabe171+0x1d6>
 8009ea2:	4547      	cmp	r7, r8
 8009ea4:	d1c3      	bne.n	8009e2e <taabe171+0x11e>
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
 8009eac:	9801      	ldr	r0, [sp, #4]
 8009eae:	1a52      	subs	r2, r2, r1
 8009eb0:	6001      	str	r1, [r0, #0]
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	b005      	add	sp, #20
 8009eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebc:	f10a 0a01 	add.w	sl, sl, #1
 8009ec0:	f1ba 0f02 	cmp.w	sl, #2
 8009ec4:	f77f af61 	ble.w	8009d8a <taabe171+0x7a>
 8009ec8:	2003      	movs	r0, #3
 8009eca:	b005      	add	sp, #20
 8009ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ed0:	1c62      	adds	r2, r4, #1
 8009ed2:	f818 1002 	ldrb.w	r1, [r8, r2]
 8009ed6:	290a      	cmp	r1, #10
 8009ed8:	d017      	beq.n	8009f0a <taabe171+0x1fa>
 8009eda:	2800      	cmp	r0, #0
 8009edc:	f43f af49 	beq.w	8009d72 <taabe171+0x62>
 8009ee0:	e7f2      	b.n	8009ec8 <taabe171+0x1b8>
 8009ee2:	4620      	mov	r0, r4
 8009ee4:	e733      	b.n	8009d4e <taabe171+0x3e>
 8009ee6:	b196      	cbz	r6, 8009f0e <taabe171+0x1fe>
 8009ee8:	ea4f 422a 	mov.w	r2, sl, asr #16
 8009eec:	2e01      	cmp	r6, #1
 8009eee:	701a      	strb	r2, [r3, #0]
 8009ef0:	d011      	beq.n	8009f16 <taabe171+0x206>
 8009ef2:	2e02      	cmp	r6, #2
 8009ef4:	ea4f 222a 	mov.w	r2, sl, asr #8
 8009ef8:	705a      	strb	r2, [r3, #1]
 8009efa:	bf16      	itet	ne
 8009efc:	f883 a002 	strbne.w	sl, [r3, #2]
 8009f00:	3302      	addeq	r3, #2
 8009f02:	3303      	addne	r3, #3
 8009f04:	f04f 0900 	mov.w	r9, #0
 8009f08:	e7cb      	b.n	8009ea2 <taabe171+0x192>
 8009f0a:	4614      	mov	r4, r2
 8009f0c:	e766      	b.n	8009ddc <taabe171+0xcc>
 8009f0e:	46b1      	mov	r9, r6
 8009f10:	e7c7      	b.n	8009ea2 <taabe171+0x192>
 8009f12:	2001      	movs	r0, #1
 8009f14:	e7d9      	b.n	8009eca <taabe171+0x1ba>
 8009f16:	3301      	adds	r3, #1
 8009f18:	f04f 0900 	mov.w	r9, #0
 8009f1c:	e7c1      	b.n	8009ea2 <taabe171+0x192>
 8009f1e:	bf00      	nop
 8009f20:	08048d70 	.word	0x08048d70
 8009f24:	08048cf0 	.word	0x08048cf0
 8009f28:	00400009 	.word	0x00400009
 8009f2c:	08048cf1 	.word	0x08048cf1

08009f30 <taabe673>:
 8009f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f34:	f8d0 8000 	ldr.w	r8, [r0]
 8009f38:	f1b8 0f00 	cmp.w	r8, #0
 8009f3c:	dd25      	ble.n	8009f8a <taabe673+0x5a>
 8009f3e:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8009f42:	ea4f 0648 	mov.w	r6, r8, lsl #1
 8009f46:	f1a4 0a02 	sub.w	sl, r4, #2
 8009f4a:	f1a0 0902 	sub.w	r9, r0, #2
 8009f4e:	2700      	movs	r7, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	f93a 4f02 	ldrsh.w	r4, [sl, #2]!
 8009f56:	f939 5f02 	ldrsh.w	r5, [r9, #2]!
 8009f5a:	dd13      	ble.n	8009f84 <taabe673+0x54>
 8009f5c:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 8009f60:	f04f 0e00 	mov.w	lr, #0
 8009f64:	f931 000c 	ldrsh.w	r0, [r1, ip]
 8009f68:	f10e 0e01 	add.w	lr, lr, #1
 8009f6c:	1b00      	subs	r0, r0, r4
 8009f6e:	fb05 f000 	mul.w	r0, r5, r0
 8009f72:	4573      	cmp	r3, lr
 8009f74:	ea4f 20a0 	mov.w	r0, r0, asr #10
 8009f78:	f300 000f 	ssat	r0, #16, r0
 8009f7c:	f822 000c 	strh.w	r0, [r2, ip]
 8009f80:	44b4      	add	ip, r6
 8009f82:	d1ef      	bne.n	8009f64 <taabe673+0x34>
 8009f84:	3701      	adds	r7, #1
 8009f86:	45b8      	cmp	r8, r7
 8009f88:	d1e2      	bne.n	8009f50 <taabe673+0x20>
 8009f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f8e:	bf00      	nop

08009f90 <calloc>:
 8009f90:	4b02      	ldr	r3, [pc, #8]	; (8009f9c <calloc+0xc>)
 8009f92:	460a      	mov	r2, r1
 8009f94:	4601      	mov	r1, r0
 8009f96:	6818      	ldr	r0, [r3, #0]
 8009f98:	f000 b86c 	b.w	800a074 <_calloc_r>
 8009f9c:	2000050c 	.word	0x2000050c

08009fa0 <__errno>:
 8009fa0:	4b01      	ldr	r3, [pc, #4]	; (8009fa8 <__errno+0x8>)
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	4770      	bx	lr
 8009fa6:	bf00      	nop
 8009fa8:	2000050c 	.word	0x2000050c

08009fac <__libc_init_array>:
 8009fac:	b570      	push	{r4, r5, r6, lr}
 8009fae:	4d0d      	ldr	r5, [pc, #52]	; (8009fe4 <__libc_init_array+0x38>)
 8009fb0:	4c0d      	ldr	r4, [pc, #52]	; (8009fe8 <__libc_init_array+0x3c>)
 8009fb2:	1b64      	subs	r4, r4, r5
 8009fb4:	10a4      	asrs	r4, r4, #2
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	42a6      	cmp	r6, r4
 8009fba:	d109      	bne.n	8009fd0 <__libc_init_array+0x24>
 8009fbc:	4d0b      	ldr	r5, [pc, #44]	; (8009fec <__libc_init_array+0x40>)
 8009fbe:	4c0c      	ldr	r4, [pc, #48]	; (8009ff0 <__libc_init_array+0x44>)
 8009fc0:	f001 fcc2 	bl	800b948 <_init>
 8009fc4:	1b64      	subs	r4, r4, r5
 8009fc6:	10a4      	asrs	r4, r4, #2
 8009fc8:	2600      	movs	r6, #0
 8009fca:	42a6      	cmp	r6, r4
 8009fcc:	d105      	bne.n	8009fda <__libc_init_array+0x2e>
 8009fce:	bd70      	pop	{r4, r5, r6, pc}
 8009fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd4:	4798      	blx	r3
 8009fd6:	3601      	adds	r6, #1
 8009fd8:	e7ee      	b.n	8009fb8 <__libc_init_array+0xc>
 8009fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fde:	4798      	blx	r3
 8009fe0:	3601      	adds	r6, #1
 8009fe2:	e7f2      	b.n	8009fca <__libc_init_array+0x1e>
 8009fe4:	08048e68 	.word	0x08048e68
 8009fe8:	08048e68 	.word	0x08048e68
 8009fec:	08048e68 	.word	0x08048e68
 8009ff0:	08048e6c 	.word	0x08048e6c

08009ff4 <malloc>:
 8009ff4:	4b02      	ldr	r3, [pc, #8]	; (800a000 <malloc+0xc>)
 8009ff6:	4601      	mov	r1, r0
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	f000 b8bd 	b.w	800a178 <_malloc_r>
 8009ffe:	bf00      	nop
 800a000:	2000050c 	.word	0x2000050c

0800a004 <free>:
 800a004:	4b02      	ldr	r3, [pc, #8]	; (800a010 <free+0xc>)
 800a006:	4601      	mov	r1, r0
 800a008:	6818      	ldr	r0, [r3, #0]
 800a00a:	f000 b849 	b.w	800a0a0 <_free_r>
 800a00e:	bf00      	nop
 800a010:	2000050c 	.word	0x2000050c

0800a014 <memcpy>:
 800a014:	440a      	add	r2, r1
 800a016:	4291      	cmp	r1, r2
 800a018:	f100 33ff 	add.w	r3, r0, #4294967295
 800a01c:	d100      	bne.n	800a020 <memcpy+0xc>
 800a01e:	4770      	bx	lr
 800a020:	b510      	push	{r4, lr}
 800a022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a02a:	4291      	cmp	r1, r2
 800a02c:	d1f9      	bne.n	800a022 <memcpy+0xe>
 800a02e:	bd10      	pop	{r4, pc}

0800a030 <memmove>:
 800a030:	4288      	cmp	r0, r1
 800a032:	b510      	push	{r4, lr}
 800a034:	eb01 0402 	add.w	r4, r1, r2
 800a038:	d902      	bls.n	800a040 <memmove+0x10>
 800a03a:	4284      	cmp	r4, r0
 800a03c:	4623      	mov	r3, r4
 800a03e:	d807      	bhi.n	800a050 <memmove+0x20>
 800a040:	1e43      	subs	r3, r0, #1
 800a042:	42a1      	cmp	r1, r4
 800a044:	d008      	beq.n	800a058 <memmove+0x28>
 800a046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a04a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a04e:	e7f8      	b.n	800a042 <memmove+0x12>
 800a050:	4402      	add	r2, r0
 800a052:	4601      	mov	r1, r0
 800a054:	428a      	cmp	r2, r1
 800a056:	d100      	bne.n	800a05a <memmove+0x2a>
 800a058:	bd10      	pop	{r4, pc}
 800a05a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a05e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a062:	e7f7      	b.n	800a054 <memmove+0x24>

0800a064 <memset>:
 800a064:	4402      	add	r2, r0
 800a066:	4603      	mov	r3, r0
 800a068:	4293      	cmp	r3, r2
 800a06a:	d100      	bne.n	800a06e <memset+0xa>
 800a06c:	4770      	bx	lr
 800a06e:	f803 1b01 	strb.w	r1, [r3], #1
 800a072:	e7f9      	b.n	800a068 <memset+0x4>

0800a074 <_calloc_r>:
 800a074:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a076:	fba1 2402 	umull	r2, r4, r1, r2
 800a07a:	b94c      	cbnz	r4, 800a090 <_calloc_r+0x1c>
 800a07c:	4611      	mov	r1, r2
 800a07e:	9201      	str	r2, [sp, #4]
 800a080:	f000 f87a 	bl	800a178 <_malloc_r>
 800a084:	9a01      	ldr	r2, [sp, #4]
 800a086:	4605      	mov	r5, r0
 800a088:	b930      	cbnz	r0, 800a098 <_calloc_r+0x24>
 800a08a:	4628      	mov	r0, r5
 800a08c:	b003      	add	sp, #12
 800a08e:	bd30      	pop	{r4, r5, pc}
 800a090:	220c      	movs	r2, #12
 800a092:	6002      	str	r2, [r0, #0]
 800a094:	2500      	movs	r5, #0
 800a096:	e7f8      	b.n	800a08a <_calloc_r+0x16>
 800a098:	4621      	mov	r1, r4
 800a09a:	f7ff ffe3 	bl	800a064 <memset>
 800a09e:	e7f4      	b.n	800a08a <_calloc_r+0x16>

0800a0a0 <_free_r>:
 800a0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0a2:	2900      	cmp	r1, #0
 800a0a4:	d044      	beq.n	800a130 <_free_r+0x90>
 800a0a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0aa:	9001      	str	r0, [sp, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a0b2:	bfb8      	it	lt
 800a0b4:	18e4      	addlt	r4, r4, r3
 800a0b6:	f000 ff99 	bl	800afec <__malloc_lock>
 800a0ba:	4a1e      	ldr	r2, [pc, #120]	; (800a134 <_free_r+0x94>)
 800a0bc:	9801      	ldr	r0, [sp, #4]
 800a0be:	6813      	ldr	r3, [r2, #0]
 800a0c0:	b933      	cbnz	r3, 800a0d0 <_free_r+0x30>
 800a0c2:	6063      	str	r3, [r4, #4]
 800a0c4:	6014      	str	r4, [r2, #0]
 800a0c6:	b003      	add	sp, #12
 800a0c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0cc:	f000 bf94 	b.w	800aff8 <__malloc_unlock>
 800a0d0:	42a3      	cmp	r3, r4
 800a0d2:	d908      	bls.n	800a0e6 <_free_r+0x46>
 800a0d4:	6825      	ldr	r5, [r4, #0]
 800a0d6:	1961      	adds	r1, r4, r5
 800a0d8:	428b      	cmp	r3, r1
 800a0da:	bf01      	itttt	eq
 800a0dc:	6819      	ldreq	r1, [r3, #0]
 800a0de:	685b      	ldreq	r3, [r3, #4]
 800a0e0:	1949      	addeq	r1, r1, r5
 800a0e2:	6021      	streq	r1, [r4, #0]
 800a0e4:	e7ed      	b.n	800a0c2 <_free_r+0x22>
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	b10b      	cbz	r3, 800a0f0 <_free_r+0x50>
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	d9fa      	bls.n	800a0e6 <_free_r+0x46>
 800a0f0:	6811      	ldr	r1, [r2, #0]
 800a0f2:	1855      	adds	r5, r2, r1
 800a0f4:	42a5      	cmp	r5, r4
 800a0f6:	d10b      	bne.n	800a110 <_free_r+0x70>
 800a0f8:	6824      	ldr	r4, [r4, #0]
 800a0fa:	4421      	add	r1, r4
 800a0fc:	1854      	adds	r4, r2, r1
 800a0fe:	42a3      	cmp	r3, r4
 800a100:	6011      	str	r1, [r2, #0]
 800a102:	d1e0      	bne.n	800a0c6 <_free_r+0x26>
 800a104:	681c      	ldr	r4, [r3, #0]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	6053      	str	r3, [r2, #4]
 800a10a:	4421      	add	r1, r4
 800a10c:	6011      	str	r1, [r2, #0]
 800a10e:	e7da      	b.n	800a0c6 <_free_r+0x26>
 800a110:	d902      	bls.n	800a118 <_free_r+0x78>
 800a112:	230c      	movs	r3, #12
 800a114:	6003      	str	r3, [r0, #0]
 800a116:	e7d6      	b.n	800a0c6 <_free_r+0x26>
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	1961      	adds	r1, r4, r5
 800a11c:	428b      	cmp	r3, r1
 800a11e:	bf04      	itt	eq
 800a120:	6819      	ldreq	r1, [r3, #0]
 800a122:	685b      	ldreq	r3, [r3, #4]
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	bf04      	itt	eq
 800a128:	1949      	addeq	r1, r1, r5
 800a12a:	6021      	streq	r1, [r4, #0]
 800a12c:	6054      	str	r4, [r2, #4]
 800a12e:	e7ca      	b.n	800a0c6 <_free_r+0x26>
 800a130:	b003      	add	sp, #12
 800a132:	bd30      	pop	{r4, r5, pc}
 800a134:	200128e8 	.word	0x200128e8

0800a138 <sbrk_aligned>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	4e0e      	ldr	r6, [pc, #56]	; (800a174 <sbrk_aligned+0x3c>)
 800a13c:	460c      	mov	r4, r1
 800a13e:	6831      	ldr	r1, [r6, #0]
 800a140:	4605      	mov	r5, r0
 800a142:	b911      	cbnz	r1, 800a14a <sbrk_aligned+0x12>
 800a144:	f000 fc12 	bl	800a96c <_sbrk_r>
 800a148:	6030      	str	r0, [r6, #0]
 800a14a:	4621      	mov	r1, r4
 800a14c:	4628      	mov	r0, r5
 800a14e:	f000 fc0d 	bl	800a96c <_sbrk_r>
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	d00a      	beq.n	800a16c <sbrk_aligned+0x34>
 800a156:	1cc4      	adds	r4, r0, #3
 800a158:	f024 0403 	bic.w	r4, r4, #3
 800a15c:	42a0      	cmp	r0, r4
 800a15e:	d007      	beq.n	800a170 <sbrk_aligned+0x38>
 800a160:	1a21      	subs	r1, r4, r0
 800a162:	4628      	mov	r0, r5
 800a164:	f000 fc02 	bl	800a96c <_sbrk_r>
 800a168:	3001      	adds	r0, #1
 800a16a:	d101      	bne.n	800a170 <sbrk_aligned+0x38>
 800a16c:	f04f 34ff 	mov.w	r4, #4294967295
 800a170:	4620      	mov	r0, r4
 800a172:	bd70      	pop	{r4, r5, r6, pc}
 800a174:	200128ec 	.word	0x200128ec

0800a178 <_malloc_r>:
 800a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	1ccd      	adds	r5, r1, #3
 800a17e:	f025 0503 	bic.w	r5, r5, #3
 800a182:	3508      	adds	r5, #8
 800a184:	2d0c      	cmp	r5, #12
 800a186:	bf38      	it	cc
 800a188:	250c      	movcc	r5, #12
 800a18a:	2d00      	cmp	r5, #0
 800a18c:	4607      	mov	r7, r0
 800a18e:	db01      	blt.n	800a194 <_malloc_r+0x1c>
 800a190:	42a9      	cmp	r1, r5
 800a192:	d905      	bls.n	800a1a0 <_malloc_r+0x28>
 800a194:	230c      	movs	r3, #12
 800a196:	603b      	str	r3, [r7, #0]
 800a198:	2600      	movs	r6, #0
 800a19a:	4630      	mov	r0, r6
 800a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a0:	4e2e      	ldr	r6, [pc, #184]	; (800a25c <_malloc_r+0xe4>)
 800a1a2:	f000 ff23 	bl	800afec <__malloc_lock>
 800a1a6:	6833      	ldr	r3, [r6, #0]
 800a1a8:	461c      	mov	r4, r3
 800a1aa:	bb34      	cbnz	r4, 800a1fa <_malloc_r+0x82>
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f7ff ffc2 	bl	800a138 <sbrk_aligned>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	d14d      	bne.n	800a256 <_malloc_r+0xde>
 800a1ba:	6834      	ldr	r4, [r6, #0]
 800a1bc:	4626      	mov	r6, r4
 800a1be:	2e00      	cmp	r6, #0
 800a1c0:	d140      	bne.n	800a244 <_malloc_r+0xcc>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	4631      	mov	r1, r6
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	eb04 0803 	add.w	r8, r4, r3
 800a1cc:	f000 fbce 	bl	800a96c <_sbrk_r>
 800a1d0:	4580      	cmp	r8, r0
 800a1d2:	d13a      	bne.n	800a24a <_malloc_r+0xd2>
 800a1d4:	6821      	ldr	r1, [r4, #0]
 800a1d6:	3503      	adds	r5, #3
 800a1d8:	1a6d      	subs	r5, r5, r1
 800a1da:	f025 0503 	bic.w	r5, r5, #3
 800a1de:	3508      	adds	r5, #8
 800a1e0:	2d0c      	cmp	r5, #12
 800a1e2:	bf38      	it	cc
 800a1e4:	250c      	movcc	r5, #12
 800a1e6:	4629      	mov	r1, r5
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f7ff ffa5 	bl	800a138 <sbrk_aligned>
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	d02b      	beq.n	800a24a <_malloc_r+0xd2>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	442b      	add	r3, r5
 800a1f6:	6023      	str	r3, [r4, #0]
 800a1f8:	e00e      	b.n	800a218 <_malloc_r+0xa0>
 800a1fa:	6822      	ldr	r2, [r4, #0]
 800a1fc:	1b52      	subs	r2, r2, r5
 800a1fe:	d41e      	bmi.n	800a23e <_malloc_r+0xc6>
 800a200:	2a0b      	cmp	r2, #11
 800a202:	d916      	bls.n	800a232 <_malloc_r+0xba>
 800a204:	1961      	adds	r1, r4, r5
 800a206:	42a3      	cmp	r3, r4
 800a208:	6025      	str	r5, [r4, #0]
 800a20a:	bf18      	it	ne
 800a20c:	6059      	strne	r1, [r3, #4]
 800a20e:	6863      	ldr	r3, [r4, #4]
 800a210:	bf08      	it	eq
 800a212:	6031      	streq	r1, [r6, #0]
 800a214:	5162      	str	r2, [r4, r5]
 800a216:	604b      	str	r3, [r1, #4]
 800a218:	4638      	mov	r0, r7
 800a21a:	f104 060b 	add.w	r6, r4, #11
 800a21e:	f000 feeb 	bl	800aff8 <__malloc_unlock>
 800a222:	f026 0607 	bic.w	r6, r6, #7
 800a226:	1d23      	adds	r3, r4, #4
 800a228:	1af2      	subs	r2, r6, r3
 800a22a:	d0b6      	beq.n	800a19a <_malloc_r+0x22>
 800a22c:	1b9b      	subs	r3, r3, r6
 800a22e:	50a3      	str	r3, [r4, r2]
 800a230:	e7b3      	b.n	800a19a <_malloc_r+0x22>
 800a232:	6862      	ldr	r2, [r4, #4]
 800a234:	42a3      	cmp	r3, r4
 800a236:	bf0c      	ite	eq
 800a238:	6032      	streq	r2, [r6, #0]
 800a23a:	605a      	strne	r2, [r3, #4]
 800a23c:	e7ec      	b.n	800a218 <_malloc_r+0xa0>
 800a23e:	4623      	mov	r3, r4
 800a240:	6864      	ldr	r4, [r4, #4]
 800a242:	e7b2      	b.n	800a1aa <_malloc_r+0x32>
 800a244:	4634      	mov	r4, r6
 800a246:	6876      	ldr	r6, [r6, #4]
 800a248:	e7b9      	b.n	800a1be <_malloc_r+0x46>
 800a24a:	230c      	movs	r3, #12
 800a24c:	603b      	str	r3, [r7, #0]
 800a24e:	4638      	mov	r0, r7
 800a250:	f000 fed2 	bl	800aff8 <__malloc_unlock>
 800a254:	e7a1      	b.n	800a19a <_malloc_r+0x22>
 800a256:	6025      	str	r5, [r4, #0]
 800a258:	e7de      	b.n	800a218 <_malloc_r+0xa0>
 800a25a:	bf00      	nop
 800a25c:	200128e8 	.word	0x200128e8

0800a260 <__sfputc_r>:
 800a260:	6893      	ldr	r3, [r2, #8]
 800a262:	3b01      	subs	r3, #1
 800a264:	2b00      	cmp	r3, #0
 800a266:	b410      	push	{r4}
 800a268:	6093      	str	r3, [r2, #8]
 800a26a:	da08      	bge.n	800a27e <__sfputc_r+0x1e>
 800a26c:	6994      	ldr	r4, [r2, #24]
 800a26e:	42a3      	cmp	r3, r4
 800a270:	db01      	blt.n	800a276 <__sfputc_r+0x16>
 800a272:	290a      	cmp	r1, #10
 800a274:	d103      	bne.n	800a27e <__sfputc_r+0x1e>
 800a276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a27a:	f000 bbd7 	b.w	800aa2c <__swbuf_r>
 800a27e:	6813      	ldr	r3, [r2, #0]
 800a280:	1c58      	adds	r0, r3, #1
 800a282:	6010      	str	r0, [r2, #0]
 800a284:	7019      	strb	r1, [r3, #0]
 800a286:	4608      	mov	r0, r1
 800a288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <__sfputs_r>:
 800a28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a290:	4606      	mov	r6, r0
 800a292:	460f      	mov	r7, r1
 800a294:	4614      	mov	r4, r2
 800a296:	18d5      	adds	r5, r2, r3
 800a298:	42ac      	cmp	r4, r5
 800a29a:	d101      	bne.n	800a2a0 <__sfputs_r+0x12>
 800a29c:	2000      	movs	r0, #0
 800a29e:	e007      	b.n	800a2b0 <__sfputs_r+0x22>
 800a2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a4:	463a      	mov	r2, r7
 800a2a6:	4630      	mov	r0, r6
 800a2a8:	f7ff ffda 	bl	800a260 <__sfputc_r>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	d1f3      	bne.n	800a298 <__sfputs_r+0xa>
 800a2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a2b4 <_vfiprintf_r>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	460d      	mov	r5, r1
 800a2ba:	b09d      	sub	sp, #116	; 0x74
 800a2bc:	4614      	mov	r4, r2
 800a2be:	4698      	mov	r8, r3
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	b118      	cbz	r0, 800a2cc <_vfiprintf_r+0x18>
 800a2c4:	6983      	ldr	r3, [r0, #24]
 800a2c6:	b90b      	cbnz	r3, 800a2cc <_vfiprintf_r+0x18>
 800a2c8:	f000 fd8a 	bl	800ade0 <__sinit>
 800a2cc:	4b89      	ldr	r3, [pc, #548]	; (800a4f4 <_vfiprintf_r+0x240>)
 800a2ce:	429d      	cmp	r5, r3
 800a2d0:	d11b      	bne.n	800a30a <_vfiprintf_r+0x56>
 800a2d2:	6875      	ldr	r5, [r6, #4]
 800a2d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2d6:	07d9      	lsls	r1, r3, #31
 800a2d8:	d405      	bmi.n	800a2e6 <_vfiprintf_r+0x32>
 800a2da:	89ab      	ldrh	r3, [r5, #12]
 800a2dc:	059a      	lsls	r2, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_vfiprintf_r+0x32>
 800a2e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e2:	f000 fe1b 	bl	800af1c <__retarget_lock_acquire_recursive>
 800a2e6:	89ab      	ldrh	r3, [r5, #12]
 800a2e8:	071b      	lsls	r3, r3, #28
 800a2ea:	d501      	bpl.n	800a2f0 <_vfiprintf_r+0x3c>
 800a2ec:	692b      	ldr	r3, [r5, #16]
 800a2ee:	b9eb      	cbnz	r3, 800a32c <_vfiprintf_r+0x78>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	f000 fbec 	bl	800aad0 <__swsetup_r>
 800a2f8:	b1c0      	cbz	r0, 800a32c <_vfiprintf_r+0x78>
 800a2fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2fc:	07dc      	lsls	r4, r3, #31
 800a2fe:	d50e      	bpl.n	800a31e <_vfiprintf_r+0x6a>
 800a300:	f04f 30ff 	mov.w	r0, #4294967295
 800a304:	b01d      	add	sp, #116	; 0x74
 800a306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30a:	4b7b      	ldr	r3, [pc, #492]	; (800a4f8 <_vfiprintf_r+0x244>)
 800a30c:	429d      	cmp	r5, r3
 800a30e:	d101      	bne.n	800a314 <_vfiprintf_r+0x60>
 800a310:	68b5      	ldr	r5, [r6, #8]
 800a312:	e7df      	b.n	800a2d4 <_vfiprintf_r+0x20>
 800a314:	4b79      	ldr	r3, [pc, #484]	; (800a4fc <_vfiprintf_r+0x248>)
 800a316:	429d      	cmp	r5, r3
 800a318:	bf08      	it	eq
 800a31a:	68f5      	ldreq	r5, [r6, #12]
 800a31c:	e7da      	b.n	800a2d4 <_vfiprintf_r+0x20>
 800a31e:	89ab      	ldrh	r3, [r5, #12]
 800a320:	0598      	lsls	r0, r3, #22
 800a322:	d4ed      	bmi.n	800a300 <_vfiprintf_r+0x4c>
 800a324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a326:	f000 fdfa 	bl	800af1e <__retarget_lock_release_recursive>
 800a32a:	e7e9      	b.n	800a300 <_vfiprintf_r+0x4c>
 800a32c:	2300      	movs	r3, #0
 800a32e:	9309      	str	r3, [sp, #36]	; 0x24
 800a330:	2320      	movs	r3, #32
 800a332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a336:	f8cd 800c 	str.w	r8, [sp, #12]
 800a33a:	2330      	movs	r3, #48	; 0x30
 800a33c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a500 <_vfiprintf_r+0x24c>
 800a340:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a344:	f04f 0901 	mov.w	r9, #1
 800a348:	4623      	mov	r3, r4
 800a34a:	469a      	mov	sl, r3
 800a34c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a350:	b10a      	cbz	r2, 800a356 <_vfiprintf_r+0xa2>
 800a352:	2a25      	cmp	r2, #37	; 0x25
 800a354:	d1f9      	bne.n	800a34a <_vfiprintf_r+0x96>
 800a356:	ebba 0b04 	subs.w	fp, sl, r4
 800a35a:	d00b      	beq.n	800a374 <_vfiprintf_r+0xc0>
 800a35c:	465b      	mov	r3, fp
 800a35e:	4622      	mov	r2, r4
 800a360:	4629      	mov	r1, r5
 800a362:	4630      	mov	r0, r6
 800a364:	f7ff ff93 	bl	800a28e <__sfputs_r>
 800a368:	3001      	adds	r0, #1
 800a36a:	f000 80aa 	beq.w	800a4c2 <_vfiprintf_r+0x20e>
 800a36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a370:	445a      	add	r2, fp
 800a372:	9209      	str	r2, [sp, #36]	; 0x24
 800a374:	f89a 3000 	ldrb.w	r3, [sl]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f000 80a2 	beq.w	800a4c2 <_vfiprintf_r+0x20e>
 800a37e:	2300      	movs	r3, #0
 800a380:	f04f 32ff 	mov.w	r2, #4294967295
 800a384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a388:	f10a 0a01 	add.w	sl, sl, #1
 800a38c:	9304      	str	r3, [sp, #16]
 800a38e:	9307      	str	r3, [sp, #28]
 800a390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a394:	931a      	str	r3, [sp, #104]	; 0x68
 800a396:	4654      	mov	r4, sl
 800a398:	2205      	movs	r2, #5
 800a39a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a39e:	4858      	ldr	r0, [pc, #352]	; (800a500 <_vfiprintf_r+0x24c>)
 800a3a0:	f7f5 ff2e 	bl	8000200 <memchr>
 800a3a4:	9a04      	ldr	r2, [sp, #16]
 800a3a6:	b9d8      	cbnz	r0, 800a3e0 <_vfiprintf_r+0x12c>
 800a3a8:	06d1      	lsls	r1, r2, #27
 800a3aa:	bf44      	itt	mi
 800a3ac:	2320      	movmi	r3, #32
 800a3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3b2:	0713      	lsls	r3, r2, #28
 800a3b4:	bf44      	itt	mi
 800a3b6:	232b      	movmi	r3, #43	; 0x2b
 800a3b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a3c2:	d015      	beq.n	800a3f0 <_vfiprintf_r+0x13c>
 800a3c4:	9a07      	ldr	r2, [sp, #28]
 800a3c6:	4654      	mov	r4, sl
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	f04f 0c0a 	mov.w	ip, #10
 800a3ce:	4621      	mov	r1, r4
 800a3d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3d4:	3b30      	subs	r3, #48	; 0x30
 800a3d6:	2b09      	cmp	r3, #9
 800a3d8:	d94e      	bls.n	800a478 <_vfiprintf_r+0x1c4>
 800a3da:	b1b0      	cbz	r0, 800a40a <_vfiprintf_r+0x156>
 800a3dc:	9207      	str	r2, [sp, #28]
 800a3de:	e014      	b.n	800a40a <_vfiprintf_r+0x156>
 800a3e0:	eba0 0308 	sub.w	r3, r0, r8
 800a3e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	46a2      	mov	sl, r4
 800a3ee:	e7d2      	b.n	800a396 <_vfiprintf_r+0xe2>
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	1d19      	adds	r1, r3, #4
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	9103      	str	r1, [sp, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	bfbb      	ittet	lt
 800a3fc:	425b      	neglt	r3, r3
 800a3fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a402:	9307      	strge	r3, [sp, #28]
 800a404:	9307      	strlt	r3, [sp, #28]
 800a406:	bfb8      	it	lt
 800a408:	9204      	strlt	r2, [sp, #16]
 800a40a:	7823      	ldrb	r3, [r4, #0]
 800a40c:	2b2e      	cmp	r3, #46	; 0x2e
 800a40e:	d10c      	bne.n	800a42a <_vfiprintf_r+0x176>
 800a410:	7863      	ldrb	r3, [r4, #1]
 800a412:	2b2a      	cmp	r3, #42	; 0x2a
 800a414:	d135      	bne.n	800a482 <_vfiprintf_r+0x1ce>
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	1d1a      	adds	r2, r3, #4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	9203      	str	r2, [sp, #12]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	bfb8      	it	lt
 800a422:	f04f 33ff 	movlt.w	r3, #4294967295
 800a426:	3402      	adds	r4, #2
 800a428:	9305      	str	r3, [sp, #20]
 800a42a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a510 <_vfiprintf_r+0x25c>
 800a42e:	7821      	ldrb	r1, [r4, #0]
 800a430:	2203      	movs	r2, #3
 800a432:	4650      	mov	r0, sl
 800a434:	f7f5 fee4 	bl	8000200 <memchr>
 800a438:	b140      	cbz	r0, 800a44c <_vfiprintf_r+0x198>
 800a43a:	2340      	movs	r3, #64	; 0x40
 800a43c:	eba0 000a 	sub.w	r0, r0, sl
 800a440:	fa03 f000 	lsl.w	r0, r3, r0
 800a444:	9b04      	ldr	r3, [sp, #16]
 800a446:	4303      	orrs	r3, r0
 800a448:	3401      	adds	r4, #1
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a450:	482c      	ldr	r0, [pc, #176]	; (800a504 <_vfiprintf_r+0x250>)
 800a452:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a456:	2206      	movs	r2, #6
 800a458:	f7f5 fed2 	bl	8000200 <memchr>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d03f      	beq.n	800a4e0 <_vfiprintf_r+0x22c>
 800a460:	4b29      	ldr	r3, [pc, #164]	; (800a508 <_vfiprintf_r+0x254>)
 800a462:	bb1b      	cbnz	r3, 800a4ac <_vfiprintf_r+0x1f8>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	3307      	adds	r3, #7
 800a468:	f023 0307 	bic.w	r3, r3, #7
 800a46c:	3308      	adds	r3, #8
 800a46e:	9303      	str	r3, [sp, #12]
 800a470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a472:	443b      	add	r3, r7
 800a474:	9309      	str	r3, [sp, #36]	; 0x24
 800a476:	e767      	b.n	800a348 <_vfiprintf_r+0x94>
 800a478:	fb0c 3202 	mla	r2, ip, r2, r3
 800a47c:	460c      	mov	r4, r1
 800a47e:	2001      	movs	r0, #1
 800a480:	e7a5      	b.n	800a3ce <_vfiprintf_r+0x11a>
 800a482:	2300      	movs	r3, #0
 800a484:	3401      	adds	r4, #1
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	4619      	mov	r1, r3
 800a48a:	f04f 0c0a 	mov.w	ip, #10
 800a48e:	4620      	mov	r0, r4
 800a490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a494:	3a30      	subs	r2, #48	; 0x30
 800a496:	2a09      	cmp	r2, #9
 800a498:	d903      	bls.n	800a4a2 <_vfiprintf_r+0x1ee>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0c5      	beq.n	800a42a <_vfiprintf_r+0x176>
 800a49e:	9105      	str	r1, [sp, #20]
 800a4a0:	e7c3      	b.n	800a42a <_vfiprintf_r+0x176>
 800a4a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e7f0      	b.n	800a48e <_vfiprintf_r+0x1da>
 800a4ac:	ab03      	add	r3, sp, #12
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4b16      	ldr	r3, [pc, #88]	; (800a50c <_vfiprintf_r+0x258>)
 800a4b4:	a904      	add	r1, sp, #16
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f3af 8000 	nop.w
 800a4bc:	4607      	mov	r7, r0
 800a4be:	1c78      	adds	r0, r7, #1
 800a4c0:	d1d6      	bne.n	800a470 <_vfiprintf_r+0x1bc>
 800a4c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4c4:	07d9      	lsls	r1, r3, #31
 800a4c6:	d405      	bmi.n	800a4d4 <_vfiprintf_r+0x220>
 800a4c8:	89ab      	ldrh	r3, [r5, #12]
 800a4ca:	059a      	lsls	r2, r3, #22
 800a4cc:	d402      	bmi.n	800a4d4 <_vfiprintf_r+0x220>
 800a4ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4d0:	f000 fd25 	bl	800af1e <__retarget_lock_release_recursive>
 800a4d4:	89ab      	ldrh	r3, [r5, #12]
 800a4d6:	065b      	lsls	r3, r3, #25
 800a4d8:	f53f af12 	bmi.w	800a300 <_vfiprintf_r+0x4c>
 800a4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4de:	e711      	b.n	800a304 <_vfiprintf_r+0x50>
 800a4e0:	ab03      	add	r3, sp, #12
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	462a      	mov	r2, r5
 800a4e6:	4b09      	ldr	r3, [pc, #36]	; (800a50c <_vfiprintf_r+0x258>)
 800a4e8:	a904      	add	r1, sp, #16
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	f000 f88a 	bl	800a604 <_printf_i>
 800a4f0:	e7e4      	b.n	800a4bc <_vfiprintf_r+0x208>
 800a4f2:	bf00      	nop
 800a4f4:	08048e08 	.word	0x08048e08
 800a4f8:	08048e28 	.word	0x08048e28
 800a4fc:	08048de8 	.word	0x08048de8
 800a500:	08048db4 	.word	0x08048db4
 800a504:	08048dbe 	.word	0x08048dbe
 800a508:	00000000 	.word	0x00000000
 800a50c:	0800a28f 	.word	0x0800a28f
 800a510:	08048dba 	.word	0x08048dba

0800a514 <vfiprintf>:
 800a514:	4613      	mov	r3, r2
 800a516:	460a      	mov	r2, r1
 800a518:	4601      	mov	r1, r0
 800a51a:	4802      	ldr	r0, [pc, #8]	; (800a524 <vfiprintf+0x10>)
 800a51c:	6800      	ldr	r0, [r0, #0]
 800a51e:	f7ff bec9 	b.w	800a2b4 <_vfiprintf_r>
 800a522:	bf00      	nop
 800a524:	2000050c 	.word	0x2000050c

0800a528 <_printf_common>:
 800a528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a52c:	4616      	mov	r6, r2
 800a52e:	4699      	mov	r9, r3
 800a530:	688a      	ldr	r2, [r1, #8]
 800a532:	690b      	ldr	r3, [r1, #16]
 800a534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a538:	4293      	cmp	r3, r2
 800a53a:	bfb8      	it	lt
 800a53c:	4613      	movlt	r3, r2
 800a53e:	6033      	str	r3, [r6, #0]
 800a540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a544:	4607      	mov	r7, r0
 800a546:	460c      	mov	r4, r1
 800a548:	b10a      	cbz	r2, 800a54e <_printf_common+0x26>
 800a54a:	3301      	adds	r3, #1
 800a54c:	6033      	str	r3, [r6, #0]
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	0699      	lsls	r1, r3, #26
 800a552:	bf42      	ittt	mi
 800a554:	6833      	ldrmi	r3, [r6, #0]
 800a556:	3302      	addmi	r3, #2
 800a558:	6033      	strmi	r3, [r6, #0]
 800a55a:	6825      	ldr	r5, [r4, #0]
 800a55c:	f015 0506 	ands.w	r5, r5, #6
 800a560:	d106      	bne.n	800a570 <_printf_common+0x48>
 800a562:	f104 0a19 	add.w	sl, r4, #25
 800a566:	68e3      	ldr	r3, [r4, #12]
 800a568:	6832      	ldr	r2, [r6, #0]
 800a56a:	1a9b      	subs	r3, r3, r2
 800a56c:	42ab      	cmp	r3, r5
 800a56e:	dc26      	bgt.n	800a5be <_printf_common+0x96>
 800a570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a574:	1e13      	subs	r3, r2, #0
 800a576:	6822      	ldr	r2, [r4, #0]
 800a578:	bf18      	it	ne
 800a57a:	2301      	movne	r3, #1
 800a57c:	0692      	lsls	r2, r2, #26
 800a57e:	d42b      	bmi.n	800a5d8 <_printf_common+0xb0>
 800a580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a584:	4649      	mov	r1, r9
 800a586:	4638      	mov	r0, r7
 800a588:	47c0      	blx	r8
 800a58a:	3001      	adds	r0, #1
 800a58c:	d01e      	beq.n	800a5cc <_printf_common+0xa4>
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	68e5      	ldr	r5, [r4, #12]
 800a592:	6832      	ldr	r2, [r6, #0]
 800a594:	f003 0306 	and.w	r3, r3, #6
 800a598:	2b04      	cmp	r3, #4
 800a59a:	bf08      	it	eq
 800a59c:	1aad      	subeq	r5, r5, r2
 800a59e:	68a3      	ldr	r3, [r4, #8]
 800a5a0:	6922      	ldr	r2, [r4, #16]
 800a5a2:	bf0c      	ite	eq
 800a5a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a8:	2500      	movne	r5, #0
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	bfc4      	itt	gt
 800a5ae:	1a9b      	subgt	r3, r3, r2
 800a5b0:	18ed      	addgt	r5, r5, r3
 800a5b2:	2600      	movs	r6, #0
 800a5b4:	341a      	adds	r4, #26
 800a5b6:	42b5      	cmp	r5, r6
 800a5b8:	d11a      	bne.n	800a5f0 <_printf_common+0xc8>
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	e008      	b.n	800a5d0 <_printf_common+0xa8>
 800a5be:	2301      	movs	r3, #1
 800a5c0:	4652      	mov	r2, sl
 800a5c2:	4649      	mov	r1, r9
 800a5c4:	4638      	mov	r0, r7
 800a5c6:	47c0      	blx	r8
 800a5c8:	3001      	adds	r0, #1
 800a5ca:	d103      	bne.n	800a5d4 <_printf_common+0xac>
 800a5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5d4:	3501      	adds	r5, #1
 800a5d6:	e7c6      	b.n	800a566 <_printf_common+0x3e>
 800a5d8:	18e1      	adds	r1, r4, r3
 800a5da:	1c5a      	adds	r2, r3, #1
 800a5dc:	2030      	movs	r0, #48	; 0x30
 800a5de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5e2:	4422      	add	r2, r4
 800a5e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5ec:	3302      	adds	r3, #2
 800a5ee:	e7c7      	b.n	800a580 <_printf_common+0x58>
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	4638      	mov	r0, r7
 800a5f8:	47c0      	blx	r8
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	d0e6      	beq.n	800a5cc <_printf_common+0xa4>
 800a5fe:	3601      	adds	r6, #1
 800a600:	e7d9      	b.n	800a5b6 <_printf_common+0x8e>
	...

0800a604 <_printf_i>:
 800a604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a608:	7e0f      	ldrb	r7, [r1, #24]
 800a60a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a60c:	2f78      	cmp	r7, #120	; 0x78
 800a60e:	4691      	mov	r9, r2
 800a610:	4680      	mov	r8, r0
 800a612:	460c      	mov	r4, r1
 800a614:	469a      	mov	sl, r3
 800a616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a61a:	d807      	bhi.n	800a62c <_printf_i+0x28>
 800a61c:	2f62      	cmp	r7, #98	; 0x62
 800a61e:	d80a      	bhi.n	800a636 <_printf_i+0x32>
 800a620:	2f00      	cmp	r7, #0
 800a622:	f000 80d8 	beq.w	800a7d6 <_printf_i+0x1d2>
 800a626:	2f58      	cmp	r7, #88	; 0x58
 800a628:	f000 80a3 	beq.w	800a772 <_printf_i+0x16e>
 800a62c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a634:	e03a      	b.n	800a6ac <_printf_i+0xa8>
 800a636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a63a:	2b15      	cmp	r3, #21
 800a63c:	d8f6      	bhi.n	800a62c <_printf_i+0x28>
 800a63e:	a101      	add	r1, pc, #4	; (adr r1, 800a644 <_printf_i+0x40>)
 800a640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a644:	0800a69d 	.word	0x0800a69d
 800a648:	0800a6b1 	.word	0x0800a6b1
 800a64c:	0800a62d 	.word	0x0800a62d
 800a650:	0800a62d 	.word	0x0800a62d
 800a654:	0800a62d 	.word	0x0800a62d
 800a658:	0800a62d 	.word	0x0800a62d
 800a65c:	0800a6b1 	.word	0x0800a6b1
 800a660:	0800a62d 	.word	0x0800a62d
 800a664:	0800a62d 	.word	0x0800a62d
 800a668:	0800a62d 	.word	0x0800a62d
 800a66c:	0800a62d 	.word	0x0800a62d
 800a670:	0800a7bd 	.word	0x0800a7bd
 800a674:	0800a6e1 	.word	0x0800a6e1
 800a678:	0800a79f 	.word	0x0800a79f
 800a67c:	0800a62d 	.word	0x0800a62d
 800a680:	0800a62d 	.word	0x0800a62d
 800a684:	0800a7df 	.word	0x0800a7df
 800a688:	0800a62d 	.word	0x0800a62d
 800a68c:	0800a6e1 	.word	0x0800a6e1
 800a690:	0800a62d 	.word	0x0800a62d
 800a694:	0800a62d 	.word	0x0800a62d
 800a698:	0800a7a7 	.word	0x0800a7a7
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	1d1a      	adds	r2, r3, #4
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	602a      	str	r2, [r5, #0]
 800a6a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e0a3      	b.n	800a7f8 <_printf_i+0x1f4>
 800a6b0:	6820      	ldr	r0, [r4, #0]
 800a6b2:	6829      	ldr	r1, [r5, #0]
 800a6b4:	0606      	lsls	r6, r0, #24
 800a6b6:	f101 0304 	add.w	r3, r1, #4
 800a6ba:	d50a      	bpl.n	800a6d2 <_printf_i+0xce>
 800a6bc:	680e      	ldr	r6, [r1, #0]
 800a6be:	602b      	str	r3, [r5, #0]
 800a6c0:	2e00      	cmp	r6, #0
 800a6c2:	da03      	bge.n	800a6cc <_printf_i+0xc8>
 800a6c4:	232d      	movs	r3, #45	; 0x2d
 800a6c6:	4276      	negs	r6, r6
 800a6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6cc:	485e      	ldr	r0, [pc, #376]	; (800a848 <_printf_i+0x244>)
 800a6ce:	230a      	movs	r3, #10
 800a6d0:	e019      	b.n	800a706 <_printf_i+0x102>
 800a6d2:	680e      	ldr	r6, [r1, #0]
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6da:	bf18      	it	ne
 800a6dc:	b236      	sxthne	r6, r6
 800a6de:	e7ef      	b.n	800a6c0 <_printf_i+0xbc>
 800a6e0:	682b      	ldr	r3, [r5, #0]
 800a6e2:	6820      	ldr	r0, [r4, #0]
 800a6e4:	1d19      	adds	r1, r3, #4
 800a6e6:	6029      	str	r1, [r5, #0]
 800a6e8:	0601      	lsls	r1, r0, #24
 800a6ea:	d501      	bpl.n	800a6f0 <_printf_i+0xec>
 800a6ec:	681e      	ldr	r6, [r3, #0]
 800a6ee:	e002      	b.n	800a6f6 <_printf_i+0xf2>
 800a6f0:	0646      	lsls	r6, r0, #25
 800a6f2:	d5fb      	bpl.n	800a6ec <_printf_i+0xe8>
 800a6f4:	881e      	ldrh	r6, [r3, #0]
 800a6f6:	4854      	ldr	r0, [pc, #336]	; (800a848 <_printf_i+0x244>)
 800a6f8:	2f6f      	cmp	r7, #111	; 0x6f
 800a6fa:	bf0c      	ite	eq
 800a6fc:	2308      	moveq	r3, #8
 800a6fe:	230a      	movne	r3, #10
 800a700:	2100      	movs	r1, #0
 800a702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a706:	6865      	ldr	r5, [r4, #4]
 800a708:	60a5      	str	r5, [r4, #8]
 800a70a:	2d00      	cmp	r5, #0
 800a70c:	bfa2      	ittt	ge
 800a70e:	6821      	ldrge	r1, [r4, #0]
 800a710:	f021 0104 	bicge.w	r1, r1, #4
 800a714:	6021      	strge	r1, [r4, #0]
 800a716:	b90e      	cbnz	r6, 800a71c <_printf_i+0x118>
 800a718:	2d00      	cmp	r5, #0
 800a71a:	d04d      	beq.n	800a7b8 <_printf_i+0x1b4>
 800a71c:	4615      	mov	r5, r2
 800a71e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a722:	fb03 6711 	mls	r7, r3, r1, r6
 800a726:	5dc7      	ldrb	r7, [r0, r7]
 800a728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a72c:	4637      	mov	r7, r6
 800a72e:	42bb      	cmp	r3, r7
 800a730:	460e      	mov	r6, r1
 800a732:	d9f4      	bls.n	800a71e <_printf_i+0x11a>
 800a734:	2b08      	cmp	r3, #8
 800a736:	d10b      	bne.n	800a750 <_printf_i+0x14c>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	07de      	lsls	r6, r3, #31
 800a73c:	d508      	bpl.n	800a750 <_printf_i+0x14c>
 800a73e:	6923      	ldr	r3, [r4, #16]
 800a740:	6861      	ldr	r1, [r4, #4]
 800a742:	4299      	cmp	r1, r3
 800a744:	bfde      	ittt	le
 800a746:	2330      	movle	r3, #48	; 0x30
 800a748:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a74c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a750:	1b52      	subs	r2, r2, r5
 800a752:	6122      	str	r2, [r4, #16]
 800a754:	f8cd a000 	str.w	sl, [sp]
 800a758:	464b      	mov	r3, r9
 800a75a:	aa03      	add	r2, sp, #12
 800a75c:	4621      	mov	r1, r4
 800a75e:	4640      	mov	r0, r8
 800a760:	f7ff fee2 	bl	800a528 <_printf_common>
 800a764:	3001      	adds	r0, #1
 800a766:	d14c      	bne.n	800a802 <_printf_i+0x1fe>
 800a768:	f04f 30ff 	mov.w	r0, #4294967295
 800a76c:	b004      	add	sp, #16
 800a76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a772:	4835      	ldr	r0, [pc, #212]	; (800a848 <_printf_i+0x244>)
 800a774:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a778:	6829      	ldr	r1, [r5, #0]
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a780:	6029      	str	r1, [r5, #0]
 800a782:	061d      	lsls	r5, r3, #24
 800a784:	d514      	bpl.n	800a7b0 <_printf_i+0x1ac>
 800a786:	07df      	lsls	r7, r3, #31
 800a788:	bf44      	itt	mi
 800a78a:	f043 0320 	orrmi.w	r3, r3, #32
 800a78e:	6023      	strmi	r3, [r4, #0]
 800a790:	b91e      	cbnz	r6, 800a79a <_printf_i+0x196>
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	f023 0320 	bic.w	r3, r3, #32
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	2310      	movs	r3, #16
 800a79c:	e7b0      	b.n	800a700 <_printf_i+0xfc>
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	f043 0320 	orr.w	r3, r3, #32
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	2378      	movs	r3, #120	; 0x78
 800a7a8:	4828      	ldr	r0, [pc, #160]	; (800a84c <_printf_i+0x248>)
 800a7aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7ae:	e7e3      	b.n	800a778 <_printf_i+0x174>
 800a7b0:	0659      	lsls	r1, r3, #25
 800a7b2:	bf48      	it	mi
 800a7b4:	b2b6      	uxthmi	r6, r6
 800a7b6:	e7e6      	b.n	800a786 <_printf_i+0x182>
 800a7b8:	4615      	mov	r5, r2
 800a7ba:	e7bb      	b.n	800a734 <_printf_i+0x130>
 800a7bc:	682b      	ldr	r3, [r5, #0]
 800a7be:	6826      	ldr	r6, [r4, #0]
 800a7c0:	6961      	ldr	r1, [r4, #20]
 800a7c2:	1d18      	adds	r0, r3, #4
 800a7c4:	6028      	str	r0, [r5, #0]
 800a7c6:	0635      	lsls	r5, r6, #24
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	d501      	bpl.n	800a7d0 <_printf_i+0x1cc>
 800a7cc:	6019      	str	r1, [r3, #0]
 800a7ce:	e002      	b.n	800a7d6 <_printf_i+0x1d2>
 800a7d0:	0670      	lsls	r0, r6, #25
 800a7d2:	d5fb      	bpl.n	800a7cc <_printf_i+0x1c8>
 800a7d4:	8019      	strh	r1, [r3, #0]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	6123      	str	r3, [r4, #16]
 800a7da:	4615      	mov	r5, r2
 800a7dc:	e7ba      	b.n	800a754 <_printf_i+0x150>
 800a7de:	682b      	ldr	r3, [r5, #0]
 800a7e0:	1d1a      	adds	r2, r3, #4
 800a7e2:	602a      	str	r2, [r5, #0]
 800a7e4:	681d      	ldr	r5, [r3, #0]
 800a7e6:	6862      	ldr	r2, [r4, #4]
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	f7f5 fd08 	bl	8000200 <memchr>
 800a7f0:	b108      	cbz	r0, 800a7f6 <_printf_i+0x1f2>
 800a7f2:	1b40      	subs	r0, r0, r5
 800a7f4:	6060      	str	r0, [r4, #4]
 800a7f6:	6863      	ldr	r3, [r4, #4]
 800a7f8:	6123      	str	r3, [r4, #16]
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a800:	e7a8      	b.n	800a754 <_printf_i+0x150>
 800a802:	6923      	ldr	r3, [r4, #16]
 800a804:	462a      	mov	r2, r5
 800a806:	4649      	mov	r1, r9
 800a808:	4640      	mov	r0, r8
 800a80a:	47d0      	blx	sl
 800a80c:	3001      	adds	r0, #1
 800a80e:	d0ab      	beq.n	800a768 <_printf_i+0x164>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	079b      	lsls	r3, r3, #30
 800a814:	d413      	bmi.n	800a83e <_printf_i+0x23a>
 800a816:	68e0      	ldr	r0, [r4, #12]
 800a818:	9b03      	ldr	r3, [sp, #12]
 800a81a:	4298      	cmp	r0, r3
 800a81c:	bfb8      	it	lt
 800a81e:	4618      	movlt	r0, r3
 800a820:	e7a4      	b.n	800a76c <_printf_i+0x168>
 800a822:	2301      	movs	r3, #1
 800a824:	4632      	mov	r2, r6
 800a826:	4649      	mov	r1, r9
 800a828:	4640      	mov	r0, r8
 800a82a:	47d0      	blx	sl
 800a82c:	3001      	adds	r0, #1
 800a82e:	d09b      	beq.n	800a768 <_printf_i+0x164>
 800a830:	3501      	adds	r5, #1
 800a832:	68e3      	ldr	r3, [r4, #12]
 800a834:	9903      	ldr	r1, [sp, #12]
 800a836:	1a5b      	subs	r3, r3, r1
 800a838:	42ab      	cmp	r3, r5
 800a83a:	dcf2      	bgt.n	800a822 <_printf_i+0x21e>
 800a83c:	e7eb      	b.n	800a816 <_printf_i+0x212>
 800a83e:	2500      	movs	r5, #0
 800a840:	f104 0619 	add.w	r6, r4, #25
 800a844:	e7f5      	b.n	800a832 <_printf_i+0x22e>
 800a846:	bf00      	nop
 800a848:	08048dc5 	.word	0x08048dc5
 800a84c:	08048dd6 	.word	0x08048dd6

0800a850 <iprintf>:
 800a850:	b40f      	push	{r0, r1, r2, r3}
 800a852:	4b0a      	ldr	r3, [pc, #40]	; (800a87c <iprintf+0x2c>)
 800a854:	b513      	push	{r0, r1, r4, lr}
 800a856:	681c      	ldr	r4, [r3, #0]
 800a858:	b124      	cbz	r4, 800a864 <iprintf+0x14>
 800a85a:	69a3      	ldr	r3, [r4, #24]
 800a85c:	b913      	cbnz	r3, 800a864 <iprintf+0x14>
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 fabe 	bl	800ade0 <__sinit>
 800a864:	ab05      	add	r3, sp, #20
 800a866:	9a04      	ldr	r2, [sp, #16]
 800a868:	68a1      	ldr	r1, [r4, #8]
 800a86a:	9301      	str	r3, [sp, #4]
 800a86c:	4620      	mov	r0, r4
 800a86e:	f7ff fd21 	bl	800a2b4 <_vfiprintf_r>
 800a872:	b002      	add	sp, #8
 800a874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a878:	b004      	add	sp, #16
 800a87a:	4770      	bx	lr
 800a87c:	2000050c 	.word	0x2000050c

0800a880 <_puts_r>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	460e      	mov	r6, r1
 800a884:	4605      	mov	r5, r0
 800a886:	b118      	cbz	r0, 800a890 <_puts_r+0x10>
 800a888:	6983      	ldr	r3, [r0, #24]
 800a88a:	b90b      	cbnz	r3, 800a890 <_puts_r+0x10>
 800a88c:	f000 faa8 	bl	800ade0 <__sinit>
 800a890:	69ab      	ldr	r3, [r5, #24]
 800a892:	68ac      	ldr	r4, [r5, #8]
 800a894:	b913      	cbnz	r3, 800a89c <_puts_r+0x1c>
 800a896:	4628      	mov	r0, r5
 800a898:	f000 faa2 	bl	800ade0 <__sinit>
 800a89c:	4b2c      	ldr	r3, [pc, #176]	; (800a950 <_puts_r+0xd0>)
 800a89e:	429c      	cmp	r4, r3
 800a8a0:	d120      	bne.n	800a8e4 <_puts_r+0x64>
 800a8a2:	686c      	ldr	r4, [r5, #4]
 800a8a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8a6:	07db      	lsls	r3, r3, #31
 800a8a8:	d405      	bmi.n	800a8b6 <_puts_r+0x36>
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	0598      	lsls	r0, r3, #22
 800a8ae:	d402      	bmi.n	800a8b6 <_puts_r+0x36>
 800a8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8b2:	f000 fb33 	bl	800af1c <__retarget_lock_acquire_recursive>
 800a8b6:	89a3      	ldrh	r3, [r4, #12]
 800a8b8:	0719      	lsls	r1, r3, #28
 800a8ba:	d51d      	bpl.n	800a8f8 <_puts_r+0x78>
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	b1db      	cbz	r3, 800a8f8 <_puts_r+0x78>
 800a8c0:	3e01      	subs	r6, #1
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	60a3      	str	r3, [r4, #8]
 800a8cc:	bb39      	cbnz	r1, 800a91e <_puts_r+0x9e>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	da38      	bge.n	800a944 <_puts_r+0xc4>
 800a8d2:	4622      	mov	r2, r4
 800a8d4:	210a      	movs	r1, #10
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	f000 f8a8 	bl	800aa2c <__swbuf_r>
 800a8dc:	3001      	adds	r0, #1
 800a8de:	d011      	beq.n	800a904 <_puts_r+0x84>
 800a8e0:	250a      	movs	r5, #10
 800a8e2:	e011      	b.n	800a908 <_puts_r+0x88>
 800a8e4:	4b1b      	ldr	r3, [pc, #108]	; (800a954 <_puts_r+0xd4>)
 800a8e6:	429c      	cmp	r4, r3
 800a8e8:	d101      	bne.n	800a8ee <_puts_r+0x6e>
 800a8ea:	68ac      	ldr	r4, [r5, #8]
 800a8ec:	e7da      	b.n	800a8a4 <_puts_r+0x24>
 800a8ee:	4b1a      	ldr	r3, [pc, #104]	; (800a958 <_puts_r+0xd8>)
 800a8f0:	429c      	cmp	r4, r3
 800a8f2:	bf08      	it	eq
 800a8f4:	68ec      	ldreq	r4, [r5, #12]
 800a8f6:	e7d5      	b.n	800a8a4 <_puts_r+0x24>
 800a8f8:	4621      	mov	r1, r4
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f000 f8e8 	bl	800aad0 <__swsetup_r>
 800a900:	2800      	cmp	r0, #0
 800a902:	d0dd      	beq.n	800a8c0 <_puts_r+0x40>
 800a904:	f04f 35ff 	mov.w	r5, #4294967295
 800a908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a90a:	07da      	lsls	r2, r3, #31
 800a90c:	d405      	bmi.n	800a91a <_puts_r+0x9a>
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	059b      	lsls	r3, r3, #22
 800a912:	d402      	bmi.n	800a91a <_puts_r+0x9a>
 800a914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a916:	f000 fb02 	bl	800af1e <__retarget_lock_release_recursive>
 800a91a:	4628      	mov	r0, r5
 800a91c:	bd70      	pop	{r4, r5, r6, pc}
 800a91e:	2b00      	cmp	r3, #0
 800a920:	da04      	bge.n	800a92c <_puts_r+0xac>
 800a922:	69a2      	ldr	r2, [r4, #24]
 800a924:	429a      	cmp	r2, r3
 800a926:	dc06      	bgt.n	800a936 <_puts_r+0xb6>
 800a928:	290a      	cmp	r1, #10
 800a92a:	d004      	beq.n	800a936 <_puts_r+0xb6>
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	1c5a      	adds	r2, r3, #1
 800a930:	6022      	str	r2, [r4, #0]
 800a932:	7019      	strb	r1, [r3, #0]
 800a934:	e7c5      	b.n	800a8c2 <_puts_r+0x42>
 800a936:	4622      	mov	r2, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 f877 	bl	800aa2c <__swbuf_r>
 800a93e:	3001      	adds	r0, #1
 800a940:	d1bf      	bne.n	800a8c2 <_puts_r+0x42>
 800a942:	e7df      	b.n	800a904 <_puts_r+0x84>
 800a944:	6823      	ldr	r3, [r4, #0]
 800a946:	250a      	movs	r5, #10
 800a948:	1c5a      	adds	r2, r3, #1
 800a94a:	6022      	str	r2, [r4, #0]
 800a94c:	701d      	strb	r5, [r3, #0]
 800a94e:	e7db      	b.n	800a908 <_puts_r+0x88>
 800a950:	08048e08 	.word	0x08048e08
 800a954:	08048e28 	.word	0x08048e28
 800a958:	08048de8 	.word	0x08048de8

0800a95c <puts>:
 800a95c:	4b02      	ldr	r3, [pc, #8]	; (800a968 <puts+0xc>)
 800a95e:	4601      	mov	r1, r0
 800a960:	6818      	ldr	r0, [r3, #0]
 800a962:	f7ff bf8d 	b.w	800a880 <_puts_r>
 800a966:	bf00      	nop
 800a968:	2000050c 	.word	0x2000050c

0800a96c <_sbrk_r>:
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4d06      	ldr	r5, [pc, #24]	; (800a988 <_sbrk_r+0x1c>)
 800a970:	2300      	movs	r3, #0
 800a972:	4604      	mov	r4, r0
 800a974:	4608      	mov	r0, r1
 800a976:	602b      	str	r3, [r5, #0]
 800a978:	f7f8 fca8 	bl	80032cc <_sbrk>
 800a97c:	1c43      	adds	r3, r0, #1
 800a97e:	d102      	bne.n	800a986 <_sbrk_r+0x1a>
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	b103      	cbz	r3, 800a986 <_sbrk_r+0x1a>
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	bd38      	pop	{r3, r4, r5, pc}
 800a988:	200128f4 	.word	0x200128f4

0800a98c <strcpy>:
 800a98c:	4603      	mov	r3, r0
 800a98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a992:	f803 2b01 	strb.w	r2, [r3], #1
 800a996:	2a00      	cmp	r2, #0
 800a998:	d1f9      	bne.n	800a98e <strcpy+0x2>
 800a99a:	4770      	bx	lr

0800a99c <strcspn>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	4603      	mov	r3, r0
 800a9a0:	461e      	mov	r6, r3
 800a9a2:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a9a6:	b144      	cbz	r4, 800a9ba <strcspn+0x1e>
 800a9a8:	1e4a      	subs	r2, r1, #1
 800a9aa:	e001      	b.n	800a9b0 <strcspn+0x14>
 800a9ac:	42a5      	cmp	r5, r4
 800a9ae:	d004      	beq.n	800a9ba <strcspn+0x1e>
 800a9b0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a9b4:	2d00      	cmp	r5, #0
 800a9b6:	d1f9      	bne.n	800a9ac <strcspn+0x10>
 800a9b8:	e7f2      	b.n	800a9a0 <strcspn+0x4>
 800a9ba:	1a30      	subs	r0, r6, r0
 800a9bc:	bd70      	pop	{r4, r5, r6, pc}

0800a9be <strncmp>:
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	b17a      	cbz	r2, 800a9e2 <strncmp+0x24>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	3901      	subs	r1, #1
 800a9c6:	1884      	adds	r4, r0, r2
 800a9c8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a9cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a9d0:	4290      	cmp	r0, r2
 800a9d2:	d101      	bne.n	800a9d8 <strncmp+0x1a>
 800a9d4:	42a3      	cmp	r3, r4
 800a9d6:	d101      	bne.n	800a9dc <strncmp+0x1e>
 800a9d8:	1a80      	subs	r0, r0, r2
 800a9da:	bd10      	pop	{r4, pc}
 800a9dc:	2800      	cmp	r0, #0
 800a9de:	d1f3      	bne.n	800a9c8 <strncmp+0xa>
 800a9e0:	e7fa      	b.n	800a9d8 <strncmp+0x1a>
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	e7f9      	b.n	800a9da <strncmp+0x1c>

0800a9e6 <strncpy>:
 800a9e6:	b510      	push	{r4, lr}
 800a9e8:	3901      	subs	r1, #1
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	b132      	cbz	r2, 800a9fc <strncpy+0x16>
 800a9ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a9f2:	f803 4b01 	strb.w	r4, [r3], #1
 800a9f6:	3a01      	subs	r2, #1
 800a9f8:	2c00      	cmp	r4, #0
 800a9fa:	d1f7      	bne.n	800a9ec <strncpy+0x6>
 800a9fc:	441a      	add	r2, r3
 800a9fe:	2100      	movs	r1, #0
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d100      	bne.n	800aa06 <strncpy+0x20>
 800aa04:	bd10      	pop	{r4, pc}
 800aa06:	f803 1b01 	strb.w	r1, [r3], #1
 800aa0a:	e7f9      	b.n	800aa00 <strncpy+0x1a>

0800aa0c <strspn>:
 800aa0c:	b570      	push	{r4, r5, r6, lr}
 800aa0e:	4603      	mov	r3, r0
 800aa10:	461e      	mov	r6, r3
 800aa12:	f813 4b01 	ldrb.w	r4, [r3], #1
 800aa16:	b13c      	cbz	r4, 800aa28 <strspn+0x1c>
 800aa18:	1e4a      	subs	r2, r1, #1
 800aa1a:	e001      	b.n	800aa20 <strspn+0x14>
 800aa1c:	42a5      	cmp	r5, r4
 800aa1e:	d0f7      	beq.n	800aa10 <strspn+0x4>
 800aa20:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800aa24:	2d00      	cmp	r5, #0
 800aa26:	d1f9      	bne.n	800aa1c <strspn+0x10>
 800aa28:	1a30      	subs	r0, r6, r0
 800aa2a:	bd70      	pop	{r4, r5, r6, pc}

0800aa2c <__swbuf_r>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	460e      	mov	r6, r1
 800aa30:	4614      	mov	r4, r2
 800aa32:	4605      	mov	r5, r0
 800aa34:	b118      	cbz	r0, 800aa3e <__swbuf_r+0x12>
 800aa36:	6983      	ldr	r3, [r0, #24]
 800aa38:	b90b      	cbnz	r3, 800aa3e <__swbuf_r+0x12>
 800aa3a:	f000 f9d1 	bl	800ade0 <__sinit>
 800aa3e:	4b21      	ldr	r3, [pc, #132]	; (800aac4 <__swbuf_r+0x98>)
 800aa40:	429c      	cmp	r4, r3
 800aa42:	d12b      	bne.n	800aa9c <__swbuf_r+0x70>
 800aa44:	686c      	ldr	r4, [r5, #4]
 800aa46:	69a3      	ldr	r3, [r4, #24]
 800aa48:	60a3      	str	r3, [r4, #8]
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	071a      	lsls	r2, r3, #28
 800aa4e:	d52f      	bpl.n	800aab0 <__swbuf_r+0x84>
 800aa50:	6923      	ldr	r3, [r4, #16]
 800aa52:	b36b      	cbz	r3, 800aab0 <__swbuf_r+0x84>
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	6820      	ldr	r0, [r4, #0]
 800aa58:	1ac0      	subs	r0, r0, r3
 800aa5a:	6963      	ldr	r3, [r4, #20]
 800aa5c:	b2f6      	uxtb	r6, r6
 800aa5e:	4283      	cmp	r3, r0
 800aa60:	4637      	mov	r7, r6
 800aa62:	dc04      	bgt.n	800aa6e <__swbuf_r+0x42>
 800aa64:	4621      	mov	r1, r4
 800aa66:	4628      	mov	r0, r5
 800aa68:	f000 f926 	bl	800acb8 <_fflush_r>
 800aa6c:	bb30      	cbnz	r0, 800aabc <__swbuf_r+0x90>
 800aa6e:	68a3      	ldr	r3, [r4, #8]
 800aa70:	3b01      	subs	r3, #1
 800aa72:	60a3      	str	r3, [r4, #8]
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	6022      	str	r2, [r4, #0]
 800aa7a:	701e      	strb	r6, [r3, #0]
 800aa7c:	6963      	ldr	r3, [r4, #20]
 800aa7e:	3001      	adds	r0, #1
 800aa80:	4283      	cmp	r3, r0
 800aa82:	d004      	beq.n	800aa8e <__swbuf_r+0x62>
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	07db      	lsls	r3, r3, #31
 800aa88:	d506      	bpl.n	800aa98 <__swbuf_r+0x6c>
 800aa8a:	2e0a      	cmp	r6, #10
 800aa8c:	d104      	bne.n	800aa98 <__swbuf_r+0x6c>
 800aa8e:	4621      	mov	r1, r4
 800aa90:	4628      	mov	r0, r5
 800aa92:	f000 f911 	bl	800acb8 <_fflush_r>
 800aa96:	b988      	cbnz	r0, 800aabc <__swbuf_r+0x90>
 800aa98:	4638      	mov	r0, r7
 800aa9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa9c:	4b0a      	ldr	r3, [pc, #40]	; (800aac8 <__swbuf_r+0x9c>)
 800aa9e:	429c      	cmp	r4, r3
 800aaa0:	d101      	bne.n	800aaa6 <__swbuf_r+0x7a>
 800aaa2:	68ac      	ldr	r4, [r5, #8]
 800aaa4:	e7cf      	b.n	800aa46 <__swbuf_r+0x1a>
 800aaa6:	4b09      	ldr	r3, [pc, #36]	; (800aacc <__swbuf_r+0xa0>)
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	bf08      	it	eq
 800aaac:	68ec      	ldreq	r4, [r5, #12]
 800aaae:	e7ca      	b.n	800aa46 <__swbuf_r+0x1a>
 800aab0:	4621      	mov	r1, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 f80c 	bl	800aad0 <__swsetup_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d0cb      	beq.n	800aa54 <__swbuf_r+0x28>
 800aabc:	f04f 37ff 	mov.w	r7, #4294967295
 800aac0:	e7ea      	b.n	800aa98 <__swbuf_r+0x6c>
 800aac2:	bf00      	nop
 800aac4:	08048e08 	.word	0x08048e08
 800aac8:	08048e28 	.word	0x08048e28
 800aacc:	08048de8 	.word	0x08048de8

0800aad0 <__swsetup_r>:
 800aad0:	4b32      	ldr	r3, [pc, #200]	; (800ab9c <__swsetup_r+0xcc>)
 800aad2:	b570      	push	{r4, r5, r6, lr}
 800aad4:	681d      	ldr	r5, [r3, #0]
 800aad6:	4606      	mov	r6, r0
 800aad8:	460c      	mov	r4, r1
 800aada:	b125      	cbz	r5, 800aae6 <__swsetup_r+0x16>
 800aadc:	69ab      	ldr	r3, [r5, #24]
 800aade:	b913      	cbnz	r3, 800aae6 <__swsetup_r+0x16>
 800aae0:	4628      	mov	r0, r5
 800aae2:	f000 f97d 	bl	800ade0 <__sinit>
 800aae6:	4b2e      	ldr	r3, [pc, #184]	; (800aba0 <__swsetup_r+0xd0>)
 800aae8:	429c      	cmp	r4, r3
 800aaea:	d10f      	bne.n	800ab0c <__swsetup_r+0x3c>
 800aaec:	686c      	ldr	r4, [r5, #4]
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaf4:	0719      	lsls	r1, r3, #28
 800aaf6:	d42c      	bmi.n	800ab52 <__swsetup_r+0x82>
 800aaf8:	06dd      	lsls	r5, r3, #27
 800aafa:	d411      	bmi.n	800ab20 <__swsetup_r+0x50>
 800aafc:	2309      	movs	r3, #9
 800aafe:	6033      	str	r3, [r6, #0]
 800ab00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab04:	81a3      	strh	r3, [r4, #12]
 800ab06:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0a:	e03e      	b.n	800ab8a <__swsetup_r+0xba>
 800ab0c:	4b25      	ldr	r3, [pc, #148]	; (800aba4 <__swsetup_r+0xd4>)
 800ab0e:	429c      	cmp	r4, r3
 800ab10:	d101      	bne.n	800ab16 <__swsetup_r+0x46>
 800ab12:	68ac      	ldr	r4, [r5, #8]
 800ab14:	e7eb      	b.n	800aaee <__swsetup_r+0x1e>
 800ab16:	4b24      	ldr	r3, [pc, #144]	; (800aba8 <__swsetup_r+0xd8>)
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	bf08      	it	eq
 800ab1c:	68ec      	ldreq	r4, [r5, #12]
 800ab1e:	e7e6      	b.n	800aaee <__swsetup_r+0x1e>
 800ab20:	0758      	lsls	r0, r3, #29
 800ab22:	d512      	bpl.n	800ab4a <__swsetup_r+0x7a>
 800ab24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab26:	b141      	cbz	r1, 800ab3a <__swsetup_r+0x6a>
 800ab28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab2c:	4299      	cmp	r1, r3
 800ab2e:	d002      	beq.n	800ab36 <__swsetup_r+0x66>
 800ab30:	4630      	mov	r0, r6
 800ab32:	f7ff fab5 	bl	800a0a0 <_free_r>
 800ab36:	2300      	movs	r3, #0
 800ab38:	6363      	str	r3, [r4, #52]	; 0x34
 800ab3a:	89a3      	ldrh	r3, [r4, #12]
 800ab3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ab40:	81a3      	strh	r3, [r4, #12]
 800ab42:	2300      	movs	r3, #0
 800ab44:	6063      	str	r3, [r4, #4]
 800ab46:	6923      	ldr	r3, [r4, #16]
 800ab48:	6023      	str	r3, [r4, #0]
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	f043 0308 	orr.w	r3, r3, #8
 800ab50:	81a3      	strh	r3, [r4, #12]
 800ab52:	6923      	ldr	r3, [r4, #16]
 800ab54:	b94b      	cbnz	r3, 800ab6a <__swsetup_r+0x9a>
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ab5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab60:	d003      	beq.n	800ab6a <__swsetup_r+0x9a>
 800ab62:	4621      	mov	r1, r4
 800ab64:	4630      	mov	r0, r6
 800ab66:	f000 fa01 	bl	800af6c <__smakebuf_r>
 800ab6a:	89a0      	ldrh	r0, [r4, #12]
 800ab6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab70:	f010 0301 	ands.w	r3, r0, #1
 800ab74:	d00a      	beq.n	800ab8c <__swsetup_r+0xbc>
 800ab76:	2300      	movs	r3, #0
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	6963      	ldr	r3, [r4, #20]
 800ab7c:	425b      	negs	r3, r3
 800ab7e:	61a3      	str	r3, [r4, #24]
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	b943      	cbnz	r3, 800ab96 <__swsetup_r+0xc6>
 800ab84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ab88:	d1ba      	bne.n	800ab00 <__swsetup_r+0x30>
 800ab8a:	bd70      	pop	{r4, r5, r6, pc}
 800ab8c:	0781      	lsls	r1, r0, #30
 800ab8e:	bf58      	it	pl
 800ab90:	6963      	ldrpl	r3, [r4, #20]
 800ab92:	60a3      	str	r3, [r4, #8]
 800ab94:	e7f4      	b.n	800ab80 <__swsetup_r+0xb0>
 800ab96:	2000      	movs	r0, #0
 800ab98:	e7f7      	b.n	800ab8a <__swsetup_r+0xba>
 800ab9a:	bf00      	nop
 800ab9c:	2000050c 	.word	0x2000050c
 800aba0:	08048e08 	.word	0x08048e08
 800aba4:	08048e28 	.word	0x08048e28
 800aba8:	08048de8 	.word	0x08048de8

0800abac <__sflush_r>:
 800abac:	898a      	ldrh	r2, [r1, #12]
 800abae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abb2:	4605      	mov	r5, r0
 800abb4:	0710      	lsls	r0, r2, #28
 800abb6:	460c      	mov	r4, r1
 800abb8:	d458      	bmi.n	800ac6c <__sflush_r+0xc0>
 800abba:	684b      	ldr	r3, [r1, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	dc05      	bgt.n	800abcc <__sflush_r+0x20>
 800abc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dc02      	bgt.n	800abcc <__sflush_r+0x20>
 800abc6:	2000      	movs	r0, #0
 800abc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abce:	2e00      	cmp	r6, #0
 800abd0:	d0f9      	beq.n	800abc6 <__sflush_r+0x1a>
 800abd2:	2300      	movs	r3, #0
 800abd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abd8:	682f      	ldr	r7, [r5, #0]
 800abda:	602b      	str	r3, [r5, #0]
 800abdc:	d032      	beq.n	800ac44 <__sflush_r+0x98>
 800abde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	075a      	lsls	r2, r3, #29
 800abe4:	d505      	bpl.n	800abf2 <__sflush_r+0x46>
 800abe6:	6863      	ldr	r3, [r4, #4]
 800abe8:	1ac0      	subs	r0, r0, r3
 800abea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abec:	b10b      	cbz	r3, 800abf2 <__sflush_r+0x46>
 800abee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800abf0:	1ac0      	subs	r0, r0, r3
 800abf2:	2300      	movs	r3, #0
 800abf4:	4602      	mov	r2, r0
 800abf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abf8:	6a21      	ldr	r1, [r4, #32]
 800abfa:	4628      	mov	r0, r5
 800abfc:	47b0      	blx	r6
 800abfe:	1c43      	adds	r3, r0, #1
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	d106      	bne.n	800ac12 <__sflush_r+0x66>
 800ac04:	6829      	ldr	r1, [r5, #0]
 800ac06:	291d      	cmp	r1, #29
 800ac08:	d82c      	bhi.n	800ac64 <__sflush_r+0xb8>
 800ac0a:	4a2a      	ldr	r2, [pc, #168]	; (800acb4 <__sflush_r+0x108>)
 800ac0c:	40ca      	lsrs	r2, r1
 800ac0e:	07d6      	lsls	r6, r2, #31
 800ac10:	d528      	bpl.n	800ac64 <__sflush_r+0xb8>
 800ac12:	2200      	movs	r2, #0
 800ac14:	6062      	str	r2, [r4, #4]
 800ac16:	04d9      	lsls	r1, r3, #19
 800ac18:	6922      	ldr	r2, [r4, #16]
 800ac1a:	6022      	str	r2, [r4, #0]
 800ac1c:	d504      	bpl.n	800ac28 <__sflush_r+0x7c>
 800ac1e:	1c42      	adds	r2, r0, #1
 800ac20:	d101      	bne.n	800ac26 <__sflush_r+0x7a>
 800ac22:	682b      	ldr	r3, [r5, #0]
 800ac24:	b903      	cbnz	r3, 800ac28 <__sflush_r+0x7c>
 800ac26:	6560      	str	r0, [r4, #84]	; 0x54
 800ac28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac2a:	602f      	str	r7, [r5, #0]
 800ac2c:	2900      	cmp	r1, #0
 800ac2e:	d0ca      	beq.n	800abc6 <__sflush_r+0x1a>
 800ac30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac34:	4299      	cmp	r1, r3
 800ac36:	d002      	beq.n	800ac3e <__sflush_r+0x92>
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f7ff fa31 	bl	800a0a0 <_free_r>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	6360      	str	r0, [r4, #52]	; 0x34
 800ac42:	e7c1      	b.n	800abc8 <__sflush_r+0x1c>
 800ac44:	6a21      	ldr	r1, [r4, #32]
 800ac46:	2301      	movs	r3, #1
 800ac48:	4628      	mov	r0, r5
 800ac4a:	47b0      	blx	r6
 800ac4c:	1c41      	adds	r1, r0, #1
 800ac4e:	d1c7      	bne.n	800abe0 <__sflush_r+0x34>
 800ac50:	682b      	ldr	r3, [r5, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0c4      	beq.n	800abe0 <__sflush_r+0x34>
 800ac56:	2b1d      	cmp	r3, #29
 800ac58:	d001      	beq.n	800ac5e <__sflush_r+0xb2>
 800ac5a:	2b16      	cmp	r3, #22
 800ac5c:	d101      	bne.n	800ac62 <__sflush_r+0xb6>
 800ac5e:	602f      	str	r7, [r5, #0]
 800ac60:	e7b1      	b.n	800abc6 <__sflush_r+0x1a>
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac68:	81a3      	strh	r3, [r4, #12]
 800ac6a:	e7ad      	b.n	800abc8 <__sflush_r+0x1c>
 800ac6c:	690f      	ldr	r7, [r1, #16]
 800ac6e:	2f00      	cmp	r7, #0
 800ac70:	d0a9      	beq.n	800abc6 <__sflush_r+0x1a>
 800ac72:	0793      	lsls	r3, r2, #30
 800ac74:	680e      	ldr	r6, [r1, #0]
 800ac76:	bf08      	it	eq
 800ac78:	694b      	ldreq	r3, [r1, #20]
 800ac7a:	600f      	str	r7, [r1, #0]
 800ac7c:	bf18      	it	ne
 800ac7e:	2300      	movne	r3, #0
 800ac80:	eba6 0807 	sub.w	r8, r6, r7
 800ac84:	608b      	str	r3, [r1, #8]
 800ac86:	f1b8 0f00 	cmp.w	r8, #0
 800ac8a:	dd9c      	ble.n	800abc6 <__sflush_r+0x1a>
 800ac8c:	6a21      	ldr	r1, [r4, #32]
 800ac8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ac90:	4643      	mov	r3, r8
 800ac92:	463a      	mov	r2, r7
 800ac94:	4628      	mov	r0, r5
 800ac96:	47b0      	blx	r6
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	dc06      	bgt.n	800acaa <__sflush_r+0xfe>
 800ac9c:	89a3      	ldrh	r3, [r4, #12]
 800ac9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	f04f 30ff 	mov.w	r0, #4294967295
 800aca8:	e78e      	b.n	800abc8 <__sflush_r+0x1c>
 800acaa:	4407      	add	r7, r0
 800acac:	eba8 0800 	sub.w	r8, r8, r0
 800acb0:	e7e9      	b.n	800ac86 <__sflush_r+0xda>
 800acb2:	bf00      	nop
 800acb4:	20400001 	.word	0x20400001

0800acb8 <_fflush_r>:
 800acb8:	b538      	push	{r3, r4, r5, lr}
 800acba:	690b      	ldr	r3, [r1, #16]
 800acbc:	4605      	mov	r5, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	b913      	cbnz	r3, 800acc8 <_fflush_r+0x10>
 800acc2:	2500      	movs	r5, #0
 800acc4:	4628      	mov	r0, r5
 800acc6:	bd38      	pop	{r3, r4, r5, pc}
 800acc8:	b118      	cbz	r0, 800acd2 <_fflush_r+0x1a>
 800acca:	6983      	ldr	r3, [r0, #24]
 800accc:	b90b      	cbnz	r3, 800acd2 <_fflush_r+0x1a>
 800acce:	f000 f887 	bl	800ade0 <__sinit>
 800acd2:	4b14      	ldr	r3, [pc, #80]	; (800ad24 <_fflush_r+0x6c>)
 800acd4:	429c      	cmp	r4, r3
 800acd6:	d11b      	bne.n	800ad10 <_fflush_r+0x58>
 800acd8:	686c      	ldr	r4, [r5, #4]
 800acda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0ef      	beq.n	800acc2 <_fflush_r+0xa>
 800ace2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ace4:	07d0      	lsls	r0, r2, #31
 800ace6:	d404      	bmi.n	800acf2 <_fflush_r+0x3a>
 800ace8:	0599      	lsls	r1, r3, #22
 800acea:	d402      	bmi.n	800acf2 <_fflush_r+0x3a>
 800acec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acee:	f000 f915 	bl	800af1c <__retarget_lock_acquire_recursive>
 800acf2:	4628      	mov	r0, r5
 800acf4:	4621      	mov	r1, r4
 800acf6:	f7ff ff59 	bl	800abac <__sflush_r>
 800acfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acfc:	07da      	lsls	r2, r3, #31
 800acfe:	4605      	mov	r5, r0
 800ad00:	d4e0      	bmi.n	800acc4 <_fflush_r+0xc>
 800ad02:	89a3      	ldrh	r3, [r4, #12]
 800ad04:	059b      	lsls	r3, r3, #22
 800ad06:	d4dd      	bmi.n	800acc4 <_fflush_r+0xc>
 800ad08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad0a:	f000 f908 	bl	800af1e <__retarget_lock_release_recursive>
 800ad0e:	e7d9      	b.n	800acc4 <_fflush_r+0xc>
 800ad10:	4b05      	ldr	r3, [pc, #20]	; (800ad28 <_fflush_r+0x70>)
 800ad12:	429c      	cmp	r4, r3
 800ad14:	d101      	bne.n	800ad1a <_fflush_r+0x62>
 800ad16:	68ac      	ldr	r4, [r5, #8]
 800ad18:	e7df      	b.n	800acda <_fflush_r+0x22>
 800ad1a:	4b04      	ldr	r3, [pc, #16]	; (800ad2c <_fflush_r+0x74>)
 800ad1c:	429c      	cmp	r4, r3
 800ad1e:	bf08      	it	eq
 800ad20:	68ec      	ldreq	r4, [r5, #12]
 800ad22:	e7da      	b.n	800acda <_fflush_r+0x22>
 800ad24:	08048e08 	.word	0x08048e08
 800ad28:	08048e28 	.word	0x08048e28
 800ad2c:	08048de8 	.word	0x08048de8

0800ad30 <std>:
 800ad30:	2300      	movs	r3, #0
 800ad32:	b510      	push	{r4, lr}
 800ad34:	4604      	mov	r4, r0
 800ad36:	e9c0 3300 	strd	r3, r3, [r0]
 800ad3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad3e:	6083      	str	r3, [r0, #8]
 800ad40:	8181      	strh	r1, [r0, #12]
 800ad42:	6643      	str	r3, [r0, #100]	; 0x64
 800ad44:	81c2      	strh	r2, [r0, #14]
 800ad46:	6183      	str	r3, [r0, #24]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	2208      	movs	r2, #8
 800ad4c:	305c      	adds	r0, #92	; 0x5c
 800ad4e:	f7ff f989 	bl	800a064 <memset>
 800ad52:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <std+0x38>)
 800ad54:	6263      	str	r3, [r4, #36]	; 0x24
 800ad56:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <std+0x3c>)
 800ad58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad5a:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <std+0x40>)
 800ad5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <std+0x44>)
 800ad60:	6224      	str	r4, [r4, #32]
 800ad62:	6323      	str	r3, [r4, #48]	; 0x30
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	bf00      	nop
 800ad68:	0800b005 	.word	0x0800b005
 800ad6c:	0800b027 	.word	0x0800b027
 800ad70:	0800b05f 	.word	0x0800b05f
 800ad74:	0800b083 	.word	0x0800b083

0800ad78 <_cleanup_r>:
 800ad78:	4901      	ldr	r1, [pc, #4]	; (800ad80 <_cleanup_r+0x8>)
 800ad7a:	f000 b8af 	b.w	800aedc <_fwalk_reent>
 800ad7e:	bf00      	nop
 800ad80:	0800acb9 	.word	0x0800acb9

0800ad84 <__sfmoreglue>:
 800ad84:	b570      	push	{r4, r5, r6, lr}
 800ad86:	2268      	movs	r2, #104	; 0x68
 800ad88:	1e4d      	subs	r5, r1, #1
 800ad8a:	4355      	muls	r5, r2
 800ad8c:	460e      	mov	r6, r1
 800ad8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad92:	f7ff f9f1 	bl	800a178 <_malloc_r>
 800ad96:	4604      	mov	r4, r0
 800ad98:	b140      	cbz	r0, 800adac <__sfmoreglue+0x28>
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	e9c0 1600 	strd	r1, r6, [r0]
 800ada0:	300c      	adds	r0, #12
 800ada2:	60a0      	str	r0, [r4, #8]
 800ada4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ada8:	f7ff f95c 	bl	800a064 <memset>
 800adac:	4620      	mov	r0, r4
 800adae:	bd70      	pop	{r4, r5, r6, pc}

0800adb0 <__sfp_lock_acquire>:
 800adb0:	4801      	ldr	r0, [pc, #4]	; (800adb8 <__sfp_lock_acquire+0x8>)
 800adb2:	f000 b8b3 	b.w	800af1c <__retarget_lock_acquire_recursive>
 800adb6:	bf00      	nop
 800adb8:	200128f1 	.word	0x200128f1

0800adbc <__sfp_lock_release>:
 800adbc:	4801      	ldr	r0, [pc, #4]	; (800adc4 <__sfp_lock_release+0x8>)
 800adbe:	f000 b8ae 	b.w	800af1e <__retarget_lock_release_recursive>
 800adc2:	bf00      	nop
 800adc4:	200128f1 	.word	0x200128f1

0800adc8 <__sinit_lock_acquire>:
 800adc8:	4801      	ldr	r0, [pc, #4]	; (800add0 <__sinit_lock_acquire+0x8>)
 800adca:	f000 b8a7 	b.w	800af1c <__retarget_lock_acquire_recursive>
 800adce:	bf00      	nop
 800add0:	200128f2 	.word	0x200128f2

0800add4 <__sinit_lock_release>:
 800add4:	4801      	ldr	r0, [pc, #4]	; (800addc <__sinit_lock_release+0x8>)
 800add6:	f000 b8a2 	b.w	800af1e <__retarget_lock_release_recursive>
 800adda:	bf00      	nop
 800addc:	200128f2 	.word	0x200128f2

0800ade0 <__sinit>:
 800ade0:	b510      	push	{r4, lr}
 800ade2:	4604      	mov	r4, r0
 800ade4:	f7ff fff0 	bl	800adc8 <__sinit_lock_acquire>
 800ade8:	69a3      	ldr	r3, [r4, #24]
 800adea:	b11b      	cbz	r3, 800adf4 <__sinit+0x14>
 800adec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adf0:	f7ff bff0 	b.w	800add4 <__sinit_lock_release>
 800adf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800adf8:	6523      	str	r3, [r4, #80]	; 0x50
 800adfa:	4b13      	ldr	r3, [pc, #76]	; (800ae48 <__sinit+0x68>)
 800adfc:	4a13      	ldr	r2, [pc, #76]	; (800ae4c <__sinit+0x6c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae02:	42a3      	cmp	r3, r4
 800ae04:	bf04      	itt	eq
 800ae06:	2301      	moveq	r3, #1
 800ae08:	61a3      	streq	r3, [r4, #24]
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 f820 	bl	800ae50 <__sfp>
 800ae10:	6060      	str	r0, [r4, #4]
 800ae12:	4620      	mov	r0, r4
 800ae14:	f000 f81c 	bl	800ae50 <__sfp>
 800ae18:	60a0      	str	r0, [r4, #8]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 f818 	bl	800ae50 <__sfp>
 800ae20:	2200      	movs	r2, #0
 800ae22:	60e0      	str	r0, [r4, #12]
 800ae24:	2104      	movs	r1, #4
 800ae26:	6860      	ldr	r0, [r4, #4]
 800ae28:	f7ff ff82 	bl	800ad30 <std>
 800ae2c:	68a0      	ldr	r0, [r4, #8]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	2109      	movs	r1, #9
 800ae32:	f7ff ff7d 	bl	800ad30 <std>
 800ae36:	68e0      	ldr	r0, [r4, #12]
 800ae38:	2202      	movs	r2, #2
 800ae3a:	2112      	movs	r1, #18
 800ae3c:	f7ff ff78 	bl	800ad30 <std>
 800ae40:	2301      	movs	r3, #1
 800ae42:	61a3      	str	r3, [r4, #24]
 800ae44:	e7d2      	b.n	800adec <__sinit+0xc>
 800ae46:	bf00      	nop
 800ae48:	08048db0 	.word	0x08048db0
 800ae4c:	0800ad79 	.word	0x0800ad79

0800ae50 <__sfp>:
 800ae50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae52:	4607      	mov	r7, r0
 800ae54:	f7ff ffac 	bl	800adb0 <__sfp_lock_acquire>
 800ae58:	4b1e      	ldr	r3, [pc, #120]	; (800aed4 <__sfp+0x84>)
 800ae5a:	681e      	ldr	r6, [r3, #0]
 800ae5c:	69b3      	ldr	r3, [r6, #24]
 800ae5e:	b913      	cbnz	r3, 800ae66 <__sfp+0x16>
 800ae60:	4630      	mov	r0, r6
 800ae62:	f7ff ffbd 	bl	800ade0 <__sinit>
 800ae66:	3648      	adds	r6, #72	; 0x48
 800ae68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	d503      	bpl.n	800ae78 <__sfp+0x28>
 800ae70:	6833      	ldr	r3, [r6, #0]
 800ae72:	b30b      	cbz	r3, 800aeb8 <__sfp+0x68>
 800ae74:	6836      	ldr	r6, [r6, #0]
 800ae76:	e7f7      	b.n	800ae68 <__sfp+0x18>
 800ae78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae7c:	b9d5      	cbnz	r5, 800aeb4 <__sfp+0x64>
 800ae7e:	4b16      	ldr	r3, [pc, #88]	; (800aed8 <__sfp+0x88>)
 800ae80:	60e3      	str	r3, [r4, #12]
 800ae82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ae86:	6665      	str	r5, [r4, #100]	; 0x64
 800ae88:	f000 f847 	bl	800af1a <__retarget_lock_init_recursive>
 800ae8c:	f7ff ff96 	bl	800adbc <__sfp_lock_release>
 800ae90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ae94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ae98:	6025      	str	r5, [r4, #0]
 800ae9a:	61a5      	str	r5, [r4, #24]
 800ae9c:	2208      	movs	r2, #8
 800ae9e:	4629      	mov	r1, r5
 800aea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aea4:	f7ff f8de 	bl	800a064 <memset>
 800aea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aeac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb4:	3468      	adds	r4, #104	; 0x68
 800aeb6:	e7d9      	b.n	800ae6c <__sfp+0x1c>
 800aeb8:	2104      	movs	r1, #4
 800aeba:	4638      	mov	r0, r7
 800aebc:	f7ff ff62 	bl	800ad84 <__sfmoreglue>
 800aec0:	4604      	mov	r4, r0
 800aec2:	6030      	str	r0, [r6, #0]
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d1d5      	bne.n	800ae74 <__sfp+0x24>
 800aec8:	f7ff ff78 	bl	800adbc <__sfp_lock_release>
 800aecc:	230c      	movs	r3, #12
 800aece:	603b      	str	r3, [r7, #0]
 800aed0:	e7ee      	b.n	800aeb0 <__sfp+0x60>
 800aed2:	bf00      	nop
 800aed4:	08048db0 	.word	0x08048db0
 800aed8:	ffff0001 	.word	0xffff0001

0800aedc <_fwalk_reent>:
 800aedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee0:	4606      	mov	r6, r0
 800aee2:	4688      	mov	r8, r1
 800aee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aee8:	2700      	movs	r7, #0
 800aeea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aeee:	f1b9 0901 	subs.w	r9, r9, #1
 800aef2:	d505      	bpl.n	800af00 <_fwalk_reent+0x24>
 800aef4:	6824      	ldr	r4, [r4, #0]
 800aef6:	2c00      	cmp	r4, #0
 800aef8:	d1f7      	bne.n	800aeea <_fwalk_reent+0xe>
 800aefa:	4638      	mov	r0, r7
 800aefc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af00:	89ab      	ldrh	r3, [r5, #12]
 800af02:	2b01      	cmp	r3, #1
 800af04:	d907      	bls.n	800af16 <_fwalk_reent+0x3a>
 800af06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af0a:	3301      	adds	r3, #1
 800af0c:	d003      	beq.n	800af16 <_fwalk_reent+0x3a>
 800af0e:	4629      	mov	r1, r5
 800af10:	4630      	mov	r0, r6
 800af12:	47c0      	blx	r8
 800af14:	4307      	orrs	r7, r0
 800af16:	3568      	adds	r5, #104	; 0x68
 800af18:	e7e9      	b.n	800aeee <_fwalk_reent+0x12>

0800af1a <__retarget_lock_init_recursive>:
 800af1a:	4770      	bx	lr

0800af1c <__retarget_lock_acquire_recursive>:
 800af1c:	4770      	bx	lr

0800af1e <__retarget_lock_release_recursive>:
 800af1e:	4770      	bx	lr

0800af20 <__swhatbuf_r>:
 800af20:	b570      	push	{r4, r5, r6, lr}
 800af22:	460e      	mov	r6, r1
 800af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af28:	2900      	cmp	r1, #0
 800af2a:	b096      	sub	sp, #88	; 0x58
 800af2c:	4614      	mov	r4, r2
 800af2e:	461d      	mov	r5, r3
 800af30:	da08      	bge.n	800af44 <__swhatbuf_r+0x24>
 800af32:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800af36:	2200      	movs	r2, #0
 800af38:	602a      	str	r2, [r5, #0]
 800af3a:	061a      	lsls	r2, r3, #24
 800af3c:	d410      	bmi.n	800af60 <__swhatbuf_r+0x40>
 800af3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af42:	e00e      	b.n	800af62 <__swhatbuf_r+0x42>
 800af44:	466a      	mov	r2, sp
 800af46:	f000 f8c3 	bl	800b0d0 <_fstat_r>
 800af4a:	2800      	cmp	r0, #0
 800af4c:	dbf1      	blt.n	800af32 <__swhatbuf_r+0x12>
 800af4e:	9a01      	ldr	r2, [sp, #4]
 800af50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af58:	425a      	negs	r2, r3
 800af5a:	415a      	adcs	r2, r3
 800af5c:	602a      	str	r2, [r5, #0]
 800af5e:	e7ee      	b.n	800af3e <__swhatbuf_r+0x1e>
 800af60:	2340      	movs	r3, #64	; 0x40
 800af62:	2000      	movs	r0, #0
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	b016      	add	sp, #88	; 0x58
 800af68:	bd70      	pop	{r4, r5, r6, pc}
	...

0800af6c <__smakebuf_r>:
 800af6c:	898b      	ldrh	r3, [r1, #12]
 800af6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af70:	079d      	lsls	r5, r3, #30
 800af72:	4606      	mov	r6, r0
 800af74:	460c      	mov	r4, r1
 800af76:	d507      	bpl.n	800af88 <__smakebuf_r+0x1c>
 800af78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	2301      	movs	r3, #1
 800af82:	6163      	str	r3, [r4, #20]
 800af84:	b002      	add	sp, #8
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	ab01      	add	r3, sp, #4
 800af8a:	466a      	mov	r2, sp
 800af8c:	f7ff ffc8 	bl	800af20 <__swhatbuf_r>
 800af90:	9900      	ldr	r1, [sp, #0]
 800af92:	4605      	mov	r5, r0
 800af94:	4630      	mov	r0, r6
 800af96:	f7ff f8ef 	bl	800a178 <_malloc_r>
 800af9a:	b948      	cbnz	r0, 800afb0 <__smakebuf_r+0x44>
 800af9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa0:	059a      	lsls	r2, r3, #22
 800afa2:	d4ef      	bmi.n	800af84 <__smakebuf_r+0x18>
 800afa4:	f023 0303 	bic.w	r3, r3, #3
 800afa8:	f043 0302 	orr.w	r3, r3, #2
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	e7e3      	b.n	800af78 <__smakebuf_r+0xc>
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <__smakebuf_r+0x7c>)
 800afb2:	62b3      	str	r3, [r6, #40]	; 0x28
 800afb4:	89a3      	ldrh	r3, [r4, #12]
 800afb6:	6020      	str	r0, [r4, #0]
 800afb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afbc:	81a3      	strh	r3, [r4, #12]
 800afbe:	9b00      	ldr	r3, [sp, #0]
 800afc0:	6163      	str	r3, [r4, #20]
 800afc2:	9b01      	ldr	r3, [sp, #4]
 800afc4:	6120      	str	r0, [r4, #16]
 800afc6:	b15b      	cbz	r3, 800afe0 <__smakebuf_r+0x74>
 800afc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afcc:	4630      	mov	r0, r6
 800afce:	f000 f891 	bl	800b0f4 <_isatty_r>
 800afd2:	b128      	cbz	r0, 800afe0 <__smakebuf_r+0x74>
 800afd4:	89a3      	ldrh	r3, [r4, #12]
 800afd6:	f023 0303 	bic.w	r3, r3, #3
 800afda:	f043 0301 	orr.w	r3, r3, #1
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	89a0      	ldrh	r0, [r4, #12]
 800afe2:	4305      	orrs	r5, r0
 800afe4:	81a5      	strh	r5, [r4, #12]
 800afe6:	e7cd      	b.n	800af84 <__smakebuf_r+0x18>
 800afe8:	0800ad79 	.word	0x0800ad79

0800afec <__malloc_lock>:
 800afec:	4801      	ldr	r0, [pc, #4]	; (800aff4 <__malloc_lock+0x8>)
 800afee:	f7ff bf95 	b.w	800af1c <__retarget_lock_acquire_recursive>
 800aff2:	bf00      	nop
 800aff4:	200128f0 	.word	0x200128f0

0800aff8 <__malloc_unlock>:
 800aff8:	4801      	ldr	r0, [pc, #4]	; (800b000 <__malloc_unlock+0x8>)
 800affa:	f7ff bf90 	b.w	800af1e <__retarget_lock_release_recursive>
 800affe:	bf00      	nop
 800b000:	200128f0 	.word	0x200128f0

0800b004 <__sread>:
 800b004:	b510      	push	{r4, lr}
 800b006:	460c      	mov	r4, r1
 800b008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b00c:	f000 f894 	bl	800b138 <_read_r>
 800b010:	2800      	cmp	r0, #0
 800b012:	bfab      	itete	ge
 800b014:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b016:	89a3      	ldrhlt	r3, [r4, #12]
 800b018:	181b      	addge	r3, r3, r0
 800b01a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b01e:	bfac      	ite	ge
 800b020:	6563      	strge	r3, [r4, #84]	; 0x54
 800b022:	81a3      	strhlt	r3, [r4, #12]
 800b024:	bd10      	pop	{r4, pc}

0800b026 <__swrite>:
 800b026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02a:	461f      	mov	r7, r3
 800b02c:	898b      	ldrh	r3, [r1, #12]
 800b02e:	05db      	lsls	r3, r3, #23
 800b030:	4605      	mov	r5, r0
 800b032:	460c      	mov	r4, r1
 800b034:	4616      	mov	r6, r2
 800b036:	d505      	bpl.n	800b044 <__swrite+0x1e>
 800b038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b03c:	2302      	movs	r3, #2
 800b03e:	2200      	movs	r2, #0
 800b040:	f000 f868 	bl	800b114 <_lseek_r>
 800b044:	89a3      	ldrh	r3, [r4, #12]
 800b046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b04a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b04e:	81a3      	strh	r3, [r4, #12]
 800b050:	4632      	mov	r2, r6
 800b052:	463b      	mov	r3, r7
 800b054:	4628      	mov	r0, r5
 800b056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b05a:	f000 b817 	b.w	800b08c <_write_r>

0800b05e <__sseek>:
 800b05e:	b510      	push	{r4, lr}
 800b060:	460c      	mov	r4, r1
 800b062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b066:	f000 f855 	bl	800b114 <_lseek_r>
 800b06a:	1c43      	adds	r3, r0, #1
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	bf15      	itete	ne
 800b070:	6560      	strne	r0, [r4, #84]	; 0x54
 800b072:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b076:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b07a:	81a3      	strheq	r3, [r4, #12]
 800b07c:	bf18      	it	ne
 800b07e:	81a3      	strhne	r3, [r4, #12]
 800b080:	bd10      	pop	{r4, pc}

0800b082 <__sclose>:
 800b082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b086:	f000 b813 	b.w	800b0b0 <_close_r>
	...

0800b08c <_write_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4d07      	ldr	r5, [pc, #28]	; (800b0ac <_write_r+0x20>)
 800b090:	4604      	mov	r4, r0
 800b092:	4608      	mov	r0, r1
 800b094:	4611      	mov	r1, r2
 800b096:	2200      	movs	r2, #0
 800b098:	602a      	str	r2, [r5, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	f7f8 f936 	bl	800330c <_write>
 800b0a0:	1c43      	adds	r3, r0, #1
 800b0a2:	d102      	bne.n	800b0aa <_write_r+0x1e>
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	b103      	cbz	r3, 800b0aa <_write_r+0x1e>
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	200128f4 	.word	0x200128f4

0800b0b0 <_close_r>:
 800b0b0:	b538      	push	{r3, r4, r5, lr}
 800b0b2:	4d06      	ldr	r5, [pc, #24]	; (800b0cc <_close_r+0x1c>)
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	602b      	str	r3, [r5, #0]
 800b0bc:	f7f8 f934 	bl	8003328 <_close>
 800b0c0:	1c43      	adds	r3, r0, #1
 800b0c2:	d102      	bne.n	800b0ca <_close_r+0x1a>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	b103      	cbz	r3, 800b0ca <_close_r+0x1a>
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	bd38      	pop	{r3, r4, r5, pc}
 800b0cc:	200128f4 	.word	0x200128f4

0800b0d0 <_fstat_r>:
 800b0d0:	b538      	push	{r3, r4, r5, lr}
 800b0d2:	4d07      	ldr	r5, [pc, #28]	; (800b0f0 <_fstat_r+0x20>)
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	4604      	mov	r4, r0
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4611      	mov	r1, r2
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	f7f8 f927 	bl	8003330 <_fstat>
 800b0e2:	1c43      	adds	r3, r0, #1
 800b0e4:	d102      	bne.n	800b0ec <_fstat_r+0x1c>
 800b0e6:	682b      	ldr	r3, [r5, #0]
 800b0e8:	b103      	cbz	r3, 800b0ec <_fstat_r+0x1c>
 800b0ea:	6023      	str	r3, [r4, #0]
 800b0ec:	bd38      	pop	{r3, r4, r5, pc}
 800b0ee:	bf00      	nop
 800b0f0:	200128f4 	.word	0x200128f4

0800b0f4 <_isatty_r>:
 800b0f4:	b538      	push	{r3, r4, r5, lr}
 800b0f6:	4d06      	ldr	r5, [pc, #24]	; (800b110 <_isatty_r+0x1c>)
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4604      	mov	r4, r0
 800b0fc:	4608      	mov	r0, r1
 800b0fe:	602b      	str	r3, [r5, #0]
 800b100:	f7f8 f91c 	bl	800333c <_isatty>
 800b104:	1c43      	adds	r3, r0, #1
 800b106:	d102      	bne.n	800b10e <_isatty_r+0x1a>
 800b108:	682b      	ldr	r3, [r5, #0]
 800b10a:	b103      	cbz	r3, 800b10e <_isatty_r+0x1a>
 800b10c:	6023      	str	r3, [r4, #0]
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
 800b110:	200128f4 	.word	0x200128f4

0800b114 <_lseek_r>:
 800b114:	b538      	push	{r3, r4, r5, lr}
 800b116:	4d07      	ldr	r5, [pc, #28]	; (800b134 <_lseek_r+0x20>)
 800b118:	4604      	mov	r4, r0
 800b11a:	4608      	mov	r0, r1
 800b11c:	4611      	mov	r1, r2
 800b11e:	2200      	movs	r2, #0
 800b120:	602a      	str	r2, [r5, #0]
 800b122:	461a      	mov	r2, r3
 800b124:	f7f8 f90c 	bl	8003340 <_lseek>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d102      	bne.n	800b132 <_lseek_r+0x1e>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	b103      	cbz	r3, 800b132 <_lseek_r+0x1e>
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	bd38      	pop	{r3, r4, r5, pc}
 800b134:	200128f4 	.word	0x200128f4

0800b138 <_read_r>:
 800b138:	b538      	push	{r3, r4, r5, lr}
 800b13a:	4d07      	ldr	r5, [pc, #28]	; (800b158 <_read_r+0x20>)
 800b13c:	4604      	mov	r4, r0
 800b13e:	4608      	mov	r0, r1
 800b140:	4611      	mov	r1, r2
 800b142:	2200      	movs	r2, #0
 800b144:	602a      	str	r2, [r5, #0]
 800b146:	461a      	mov	r2, r3
 800b148:	f7f8 f8fc 	bl	8003344 <_read>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d102      	bne.n	800b156 <_read_r+0x1e>
 800b150:	682b      	ldr	r3, [r5, #0]
 800b152:	b103      	cbz	r3, 800b156 <_read_r+0x1e>
 800b154:	6023      	str	r3, [r4, #0]
 800b156:	bd38      	pop	{r3, r4, r5, pc}
 800b158:	200128f4 	.word	0x200128f4

0800b15c <roundf>:
 800b15c:	ee10 0a10 	vmov	r0, s0
 800b160:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b164:	3a7f      	subs	r2, #127	; 0x7f
 800b166:	2a16      	cmp	r2, #22
 800b168:	dc15      	bgt.n	800b196 <roundf+0x3a>
 800b16a:	2a00      	cmp	r2, #0
 800b16c:	da08      	bge.n	800b180 <roundf+0x24>
 800b16e:	3201      	adds	r2, #1
 800b170:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b174:	d101      	bne.n	800b17a <roundf+0x1e>
 800b176:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b17a:	ee00 3a10 	vmov	s0, r3
 800b17e:	4770      	bx	lr
 800b180:	4907      	ldr	r1, [pc, #28]	; (800b1a0 <roundf+0x44>)
 800b182:	4111      	asrs	r1, r2
 800b184:	4208      	tst	r0, r1
 800b186:	d0fa      	beq.n	800b17e <roundf+0x22>
 800b188:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b18c:	4113      	asrs	r3, r2
 800b18e:	4403      	add	r3, r0
 800b190:	ea23 0301 	bic.w	r3, r3, r1
 800b194:	e7f1      	b.n	800b17a <roundf+0x1e>
 800b196:	2a80      	cmp	r2, #128	; 0x80
 800b198:	d1f1      	bne.n	800b17e <roundf+0x22>
 800b19a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b19e:	4770      	bx	lr
 800b1a0:	007fffff 	.word	0x007fffff

0800b1a4 <powf>:
 800b1a4:	b508      	push	{r3, lr}
 800b1a6:	ed2d 8b04 	vpush	{d8-d9}
 800b1aa:	eeb0 8a60 	vmov.f32	s16, s1
 800b1ae:	eeb0 9a40 	vmov.f32	s18, s0
 800b1b2:	f000 f84f 	bl	800b254 <__ieee754_powf>
 800b1b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1be:	eef0 8a40 	vmov.f32	s17, s0
 800b1c2:	d63e      	bvs.n	800b242 <powf+0x9e>
 800b1c4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1cc:	d112      	bne.n	800b1f4 <powf+0x50>
 800b1ce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1d6:	d039      	beq.n	800b24c <powf+0xa8>
 800b1d8:	eeb0 0a48 	vmov.f32	s0, s16
 800b1dc:	f000 fb35 	bl	800b84a <finitef>
 800b1e0:	b378      	cbz	r0, 800b242 <powf+0x9e>
 800b1e2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	d52a      	bpl.n	800b242 <powf+0x9e>
 800b1ec:	f7fe fed8 	bl	8009fa0 <__errno>
 800b1f0:	2322      	movs	r3, #34	; 0x22
 800b1f2:	e014      	b.n	800b21e <powf+0x7a>
 800b1f4:	f000 fb29 	bl	800b84a <finitef>
 800b1f8:	b998      	cbnz	r0, 800b222 <powf+0x7e>
 800b1fa:	eeb0 0a49 	vmov.f32	s0, s18
 800b1fe:	f000 fb24 	bl	800b84a <finitef>
 800b202:	b170      	cbz	r0, 800b222 <powf+0x7e>
 800b204:	eeb0 0a48 	vmov.f32	s0, s16
 800b208:	f000 fb1f 	bl	800b84a <finitef>
 800b20c:	b148      	cbz	r0, 800b222 <powf+0x7e>
 800b20e:	eef4 8a68 	vcmp.f32	s17, s17
 800b212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b216:	d7e9      	bvc.n	800b1ec <powf+0x48>
 800b218:	f7fe fec2 	bl	8009fa0 <__errno>
 800b21c:	2321      	movs	r3, #33	; 0x21
 800b21e:	6003      	str	r3, [r0, #0]
 800b220:	e00f      	b.n	800b242 <powf+0x9e>
 800b222:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b22a:	d10a      	bne.n	800b242 <powf+0x9e>
 800b22c:	eeb0 0a49 	vmov.f32	s0, s18
 800b230:	f000 fb0b 	bl	800b84a <finitef>
 800b234:	b128      	cbz	r0, 800b242 <powf+0x9e>
 800b236:	eeb0 0a48 	vmov.f32	s0, s16
 800b23a:	f000 fb06 	bl	800b84a <finitef>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d1d4      	bne.n	800b1ec <powf+0x48>
 800b242:	eeb0 0a68 	vmov.f32	s0, s17
 800b246:	ecbd 8b04 	vpop	{d8-d9}
 800b24a:	bd08      	pop	{r3, pc}
 800b24c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800b250:	e7f7      	b.n	800b242 <powf+0x9e>
	...

0800b254 <__ieee754_powf>:
 800b254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b258:	ee10 4a90 	vmov	r4, s1
 800b25c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800b260:	ed2d 8b02 	vpush	{d8}
 800b264:	ee10 6a10 	vmov	r6, s0
 800b268:	eeb0 8a40 	vmov.f32	s16, s0
 800b26c:	eef0 8a60 	vmov.f32	s17, s1
 800b270:	d10c      	bne.n	800b28c <__ieee754_powf+0x38>
 800b272:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800b276:	0076      	lsls	r6, r6, #1
 800b278:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800b27c:	f240 8296 	bls.w	800b7ac <__ieee754_powf+0x558>
 800b280:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b284:	ecbd 8b02 	vpop	{d8}
 800b288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b28c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b290:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b294:	dcf4      	bgt.n	800b280 <__ieee754_powf+0x2c>
 800b296:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b29a:	dd08      	ble.n	800b2ae <__ieee754_powf+0x5a>
 800b29c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800b2a0:	d1ee      	bne.n	800b280 <__ieee754_powf+0x2c>
 800b2a2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800b2a6:	0064      	lsls	r4, r4, #1
 800b2a8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800b2ac:	e7e6      	b.n	800b27c <__ieee754_powf+0x28>
 800b2ae:	2e00      	cmp	r6, #0
 800b2b0:	da20      	bge.n	800b2f4 <__ieee754_powf+0xa0>
 800b2b2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800b2b6:	da2d      	bge.n	800b314 <__ieee754_powf+0xc0>
 800b2b8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b2bc:	f2c0 827f 	blt.w	800b7be <__ieee754_powf+0x56a>
 800b2c0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800b2c4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b2c8:	fa48 f703 	asr.w	r7, r8, r3
 800b2cc:	fa07 f303 	lsl.w	r3, r7, r3
 800b2d0:	4543      	cmp	r3, r8
 800b2d2:	f040 8274 	bne.w	800b7be <__ieee754_powf+0x56a>
 800b2d6:	f007 0701 	and.w	r7, r7, #1
 800b2da:	f1c7 0702 	rsb	r7, r7, #2
 800b2de:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800b2e2:	d11f      	bne.n	800b324 <__ieee754_powf+0xd0>
 800b2e4:	2c00      	cmp	r4, #0
 800b2e6:	f280 8267 	bge.w	800b7b8 <__ieee754_powf+0x564>
 800b2ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b2ee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b2f2:	e7c7      	b.n	800b284 <__ieee754_powf+0x30>
 800b2f4:	2700      	movs	r7, #0
 800b2f6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800b2fa:	d1f0      	bne.n	800b2de <__ieee754_powf+0x8a>
 800b2fc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800b300:	f000 8254 	beq.w	800b7ac <__ieee754_powf+0x558>
 800b304:	dd08      	ble.n	800b318 <__ieee754_powf+0xc4>
 800b306:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800b610 <__ieee754_powf+0x3bc>
 800b30a:	2c00      	cmp	r4, #0
 800b30c:	bfa8      	it	ge
 800b30e:	eeb0 0a68 	vmovge.f32	s0, s17
 800b312:	e7b7      	b.n	800b284 <__ieee754_powf+0x30>
 800b314:	2702      	movs	r7, #2
 800b316:	e7ee      	b.n	800b2f6 <__ieee754_powf+0xa2>
 800b318:	2c00      	cmp	r4, #0
 800b31a:	f280 824a 	bge.w	800b7b2 <__ieee754_powf+0x55e>
 800b31e:	eeb1 0a68 	vneg.f32	s0, s17
 800b322:	e7af      	b.n	800b284 <__ieee754_powf+0x30>
 800b324:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b328:	d102      	bne.n	800b330 <__ieee754_powf+0xdc>
 800b32a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800b32e:	e7a9      	b.n	800b284 <__ieee754_powf+0x30>
 800b330:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b334:	eeb0 0a48 	vmov.f32	s0, s16
 800b338:	d107      	bne.n	800b34a <__ieee754_powf+0xf6>
 800b33a:	2e00      	cmp	r6, #0
 800b33c:	db05      	blt.n	800b34a <__ieee754_powf+0xf6>
 800b33e:	ecbd 8b02 	vpop	{d8}
 800b342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b346:	f000 ba53 	b.w	800b7f0 <__ieee754_sqrtf>
 800b34a:	f000 fa77 	bl	800b83c <fabsf>
 800b34e:	b125      	cbz	r5, 800b35a <__ieee754_powf+0x106>
 800b350:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800b354:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b358:	d116      	bne.n	800b388 <__ieee754_powf+0x134>
 800b35a:	2c00      	cmp	r4, #0
 800b35c:	bfbc      	itt	lt
 800b35e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800b362:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800b366:	2e00      	cmp	r6, #0
 800b368:	da8c      	bge.n	800b284 <__ieee754_powf+0x30>
 800b36a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800b36e:	ea55 0307 	orrs.w	r3, r5, r7
 800b372:	d104      	bne.n	800b37e <__ieee754_powf+0x12a>
 800b374:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b378:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800b37c:	e782      	b.n	800b284 <__ieee754_powf+0x30>
 800b37e:	2f01      	cmp	r7, #1
 800b380:	d180      	bne.n	800b284 <__ieee754_powf+0x30>
 800b382:	eeb1 0a40 	vneg.f32	s0, s0
 800b386:	e77d      	b.n	800b284 <__ieee754_powf+0x30>
 800b388:	0ff0      	lsrs	r0, r6, #31
 800b38a:	3801      	subs	r0, #1
 800b38c:	ea57 0300 	orrs.w	r3, r7, r0
 800b390:	d104      	bne.n	800b39c <__ieee754_powf+0x148>
 800b392:	ee38 8a48 	vsub.f32	s16, s16, s16
 800b396:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800b39a:	e773      	b.n	800b284 <__ieee754_powf+0x30>
 800b39c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800b3a0:	dd74      	ble.n	800b48c <__ieee754_powf+0x238>
 800b3a2:	4b9c      	ldr	r3, [pc, #624]	; (800b614 <__ieee754_powf+0x3c0>)
 800b3a4:	429d      	cmp	r5, r3
 800b3a6:	dc08      	bgt.n	800b3ba <__ieee754_powf+0x166>
 800b3a8:	2c00      	cmp	r4, #0
 800b3aa:	da0b      	bge.n	800b3c4 <__ieee754_powf+0x170>
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	ecbd 8b02 	vpop	{d8}
 800b3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b6:	f000 ba3b 	b.w	800b830 <__math_oflowf>
 800b3ba:	4b97      	ldr	r3, [pc, #604]	; (800b618 <__ieee754_powf+0x3c4>)
 800b3bc:	429d      	cmp	r5, r3
 800b3be:	dd08      	ble.n	800b3d2 <__ieee754_powf+0x17e>
 800b3c0:	2c00      	cmp	r4, #0
 800b3c2:	dcf3      	bgt.n	800b3ac <__ieee754_powf+0x158>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	ecbd 8b02 	vpop	{d8}
 800b3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	f000 ba29 	b.w	800b824 <__math_uflowf>
 800b3d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b3d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b3da:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b61c <__ieee754_powf+0x3c8>
 800b3de:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800b3e2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800b3e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b3ea:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800b3ee:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b620 <__ieee754_powf+0x3cc>
 800b3fa:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800b3fe:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b624 <__ieee754_powf+0x3d0>
 800b402:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b406:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b628 <__ieee754_powf+0x3d4>
 800b40a:	eef0 6a67 	vmov.f32	s13, s15
 800b40e:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b412:	ee16 3a90 	vmov	r3, s13
 800b416:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b41a:	f023 030f 	bic.w	r3, r3, #15
 800b41e:	ee00 3a90 	vmov	s1, r3
 800b422:	eee0 0a47 	vfms.f32	s1, s0, s14
 800b426:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b42a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800b42e:	f024 040f 	bic.w	r4, r4, #15
 800b432:	ee07 4a10 	vmov	s14, r4
 800b436:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b43a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b446:	3f01      	subs	r7, #1
 800b448:	ea57 0200 	orrs.w	r2, r7, r0
 800b44c:	ee07 4a10 	vmov	s14, r4
 800b450:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b454:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b458:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b45c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b460:	ee17 4a10 	vmov	r4, s14
 800b464:	bf08      	it	eq
 800b466:	eeb0 8a40 	vmoveq.f32	s16, s0
 800b46a:	2c00      	cmp	r4, #0
 800b46c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b470:	f340 817e 	ble.w	800b770 <__ieee754_powf+0x51c>
 800b474:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800b478:	f340 80f8 	ble.w	800b66c <__ieee754_powf+0x418>
 800b47c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b484:	bf4c      	ite	mi
 800b486:	2001      	movmi	r0, #1
 800b488:	2000      	movpl	r0, #0
 800b48a:	e790      	b.n	800b3ae <__ieee754_powf+0x15a>
 800b48c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800b490:	bf01      	itttt	eq
 800b492:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b62c <__ieee754_powf+0x3d8>
 800b496:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b49a:	f06f 0217 	mvneq.w	r2, #23
 800b49e:	ee17 5a90 	vmoveq	r5, s15
 800b4a2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b4a6:	bf18      	it	ne
 800b4a8:	2200      	movne	r2, #0
 800b4aa:	3b7f      	subs	r3, #127	; 0x7f
 800b4ac:	4413      	add	r3, r2
 800b4ae:	4a60      	ldr	r2, [pc, #384]	; (800b630 <__ieee754_powf+0x3dc>)
 800b4b0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800b4b4:	4295      	cmp	r5, r2
 800b4b6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800b4ba:	dd06      	ble.n	800b4ca <__ieee754_powf+0x276>
 800b4bc:	4a5d      	ldr	r2, [pc, #372]	; (800b634 <__ieee754_powf+0x3e0>)
 800b4be:	4295      	cmp	r5, r2
 800b4c0:	f340 80a4 	ble.w	800b60c <__ieee754_powf+0x3b8>
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b4ca:	2500      	movs	r5, #0
 800b4cc:	4a5a      	ldr	r2, [pc, #360]	; (800b638 <__ieee754_powf+0x3e4>)
 800b4ce:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800b4d2:	ee07 1a90 	vmov	s15, r1
 800b4d6:	ed92 7a00 	vldr	s14, [r2]
 800b4da:	4a58      	ldr	r2, [pc, #352]	; (800b63c <__ieee754_powf+0x3e8>)
 800b4dc:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b4e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b4e4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800b4e8:	1049      	asrs	r1, r1, #1
 800b4ea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b4ee:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800b4f2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800b4f6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800b4fa:	ee06 1a10 	vmov	s12, r1
 800b4fe:	ee65 4a26 	vmul.f32	s9, s10, s13
 800b502:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b506:	ee14 6a90 	vmov	r6, s9
 800b50a:	4016      	ands	r6, r2
 800b50c:	ee05 6a90 	vmov	s11, r6
 800b510:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800b514:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b518:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b640 <__ieee754_powf+0x3ec>
 800b51c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800b520:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800b524:	ee25 6a26 	vmul.f32	s12, s10, s13
 800b528:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b644 <__ieee754_powf+0x3f0>
 800b52c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b530:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b648 <__ieee754_powf+0x3f4>
 800b534:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b538:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b61c <__ieee754_powf+0x3c8>
 800b53c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b540:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b64c <__ieee754_powf+0x3f8>
 800b544:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b548:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b650 <__ieee754_powf+0x3fc>
 800b54c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b550:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800b554:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800b558:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b55c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b560:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800b564:	eef0 7a45 	vmov.f32	s15, s10
 800b568:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b56c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b570:	ee17 1a90 	vmov	r1, s15
 800b574:	4011      	ands	r1, r2
 800b576:	ee07 1a90 	vmov	s15, r1
 800b57a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800b57e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800b582:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b586:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b58a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b58e:	eeb0 6a47 	vmov.f32	s12, s14
 800b592:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b596:	ee16 1a10 	vmov	r1, s12
 800b59a:	4011      	ands	r1, r2
 800b59c:	ee06 1a90 	vmov	s13, r1
 800b5a0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b5a4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b654 <__ieee754_powf+0x400>
 800b5a8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b658 <__ieee754_powf+0x404>
 800b5ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b5b0:	ee06 1a10 	vmov	s12, r1
 800b5b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5b8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b65c <__ieee754_powf+0x408>
 800b5bc:	4928      	ldr	r1, [pc, #160]	; (800b660 <__ieee754_powf+0x40c>)
 800b5be:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b5c2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b5c6:	edd1 7a00 	vldr	s15, [r1]
 800b5ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b5ce:	ee07 3a90 	vmov	s15, r3
 800b5d2:	4b24      	ldr	r3, [pc, #144]	; (800b664 <__ieee754_powf+0x410>)
 800b5d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b5d8:	eef0 7a47 	vmov.f32	s15, s14
 800b5dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b5e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b5e4:	edd5 0a00 	vldr	s1, [r5]
 800b5e8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b5ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5f0:	ee17 3a90 	vmov	r3, s15
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b5fe:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b602:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b606:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b60a:	e70e      	b.n	800b42a <__ieee754_powf+0x1d6>
 800b60c:	2501      	movs	r5, #1
 800b60e:	e75d      	b.n	800b4cc <__ieee754_powf+0x278>
 800b610:	00000000 	.word	0x00000000
 800b614:	3f7ffff3 	.word	0x3f7ffff3
 800b618:	3f800007 	.word	0x3f800007
 800b61c:	3eaaaaab 	.word	0x3eaaaaab
 800b620:	3fb8aa3b 	.word	0x3fb8aa3b
 800b624:	36eca570 	.word	0x36eca570
 800b628:	3fb8aa00 	.word	0x3fb8aa00
 800b62c:	4b800000 	.word	0x4b800000
 800b630:	001cc471 	.word	0x001cc471
 800b634:	005db3d6 	.word	0x005db3d6
 800b638:	08048e48 	.word	0x08048e48
 800b63c:	fffff000 	.word	0xfffff000
 800b640:	3e6c3255 	.word	0x3e6c3255
 800b644:	3e53f142 	.word	0x3e53f142
 800b648:	3e8ba305 	.word	0x3e8ba305
 800b64c:	3edb6db7 	.word	0x3edb6db7
 800b650:	3f19999a 	.word	0x3f19999a
 800b654:	3f76384f 	.word	0x3f76384f
 800b658:	3f763800 	.word	0x3f763800
 800b65c:	369dc3a0 	.word	0x369dc3a0
 800b660:	08048e58 	.word	0x08048e58
 800b664:	08048e50 	.word	0x08048e50
 800b668:	3338aa3c 	.word	0x3338aa3c
 800b66c:	f040 8095 	bne.w	800b79a <__ieee754_powf+0x546>
 800b670:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b668 <__ieee754_powf+0x414>
 800b674:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b678:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b67c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b684:	f73f aefa 	bgt.w	800b47c <__ieee754_powf+0x228>
 800b688:	15db      	asrs	r3, r3, #23
 800b68a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800b68e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b692:	4103      	asrs	r3, r0
 800b694:	4423      	add	r3, r4
 800b696:	494b      	ldr	r1, [pc, #300]	; (800b7c4 <__ieee754_powf+0x570>)
 800b698:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b69c:	3a7f      	subs	r2, #127	; 0x7f
 800b69e:	4111      	asrs	r1, r2
 800b6a0:	ea23 0101 	bic.w	r1, r3, r1
 800b6a4:	ee07 1a10 	vmov	s14, r1
 800b6a8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800b6ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b6b0:	f1c2 0217 	rsb	r2, r2, #23
 800b6b4:	4110      	asrs	r0, r2
 800b6b6:	2c00      	cmp	r4, #0
 800b6b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6bc:	bfb8      	it	lt
 800b6be:	4240      	neglt	r0, r0
 800b6c0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b6c4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800b7c8 <__ieee754_powf+0x574>
 800b6c8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b7cc <__ieee754_powf+0x578>
 800b6cc:	ee17 3a10 	vmov	r3, s14
 800b6d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b6d4:	f023 030f 	bic.w	r3, r3, #15
 800b6d8:	ee07 3a10 	vmov	s14, r3
 800b6dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6e0:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b6e4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b6e8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b7d0 <__ieee754_powf+0x57c>
 800b6ec:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800b6f0:	eef0 7a40 	vmov.f32	s15, s0
 800b6f4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b6f8:	eeb0 6a67 	vmov.f32	s12, s15
 800b6fc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b700:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b704:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b708:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b7d4 <__ieee754_powf+0x580>
 800b70c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800b7d8 <__ieee754_powf+0x584>
 800b710:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b714:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800b7dc <__ieee754_powf+0x588>
 800b718:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b71c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b7e0 <__ieee754_powf+0x58c>
 800b720:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b724:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800b7e4 <__ieee754_powf+0x590>
 800b728:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b72c:	eef0 6a67 	vmov.f32	s13, s15
 800b730:	eee6 6a47 	vfms.f32	s13, s12, s14
 800b734:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b738:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b73c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b740:	eea7 0a80 	vfma.f32	s0, s15, s0
 800b744:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800b748:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b74c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b750:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b754:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b758:	ee10 3a10 	vmov	r3, s0
 800b75c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b760:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b764:	da1f      	bge.n	800b7a6 <__ieee754_powf+0x552>
 800b766:	f000 f87d 	bl	800b864 <scalbnf>
 800b76a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b76e:	e589      	b.n	800b284 <__ieee754_powf+0x30>
 800b770:	4a1d      	ldr	r2, [pc, #116]	; (800b7e8 <__ieee754_powf+0x594>)
 800b772:	4293      	cmp	r3, r2
 800b774:	dd07      	ble.n	800b786 <__ieee754_powf+0x532>
 800b776:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77e:	bf4c      	ite	mi
 800b780:	2001      	movmi	r0, #1
 800b782:	2000      	movpl	r0, #0
 800b784:	e61f      	b.n	800b3c6 <__ieee754_powf+0x172>
 800b786:	d108      	bne.n	800b79a <__ieee754_powf+0x546>
 800b788:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b78c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b794:	f6ff af78 	blt.w	800b688 <__ieee754_powf+0x434>
 800b798:	e7ed      	b.n	800b776 <__ieee754_powf+0x522>
 800b79a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800b79e:	f73f af73 	bgt.w	800b688 <__ieee754_powf+0x434>
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e78c      	b.n	800b6c0 <__ieee754_powf+0x46c>
 800b7a6:	ee00 3a10 	vmov	s0, r3
 800b7aa:	e7de      	b.n	800b76a <__ieee754_powf+0x516>
 800b7ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b7b0:	e568      	b.n	800b284 <__ieee754_powf+0x30>
 800b7b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b7ec <__ieee754_powf+0x598>
 800b7b6:	e565      	b.n	800b284 <__ieee754_powf+0x30>
 800b7b8:	eeb0 0a48 	vmov.f32	s0, s16
 800b7bc:	e562      	b.n	800b284 <__ieee754_powf+0x30>
 800b7be:	2700      	movs	r7, #0
 800b7c0:	e58d      	b.n	800b2de <__ieee754_powf+0x8a>
 800b7c2:	bf00      	nop
 800b7c4:	007fffff 	.word	0x007fffff
 800b7c8:	35bfbe8c 	.word	0x35bfbe8c
 800b7cc:	3f317200 	.word	0x3f317200
 800b7d0:	3f317218 	.word	0x3f317218
 800b7d4:	b5ddea0e 	.word	0xb5ddea0e
 800b7d8:	3331bb4c 	.word	0x3331bb4c
 800b7dc:	388ab355 	.word	0x388ab355
 800b7e0:	bb360b61 	.word	0xbb360b61
 800b7e4:	3e2aaaab 	.word	0x3e2aaaab
 800b7e8:	43160000 	.word	0x43160000
 800b7ec:	00000000 	.word	0x00000000

0800b7f0 <__ieee754_sqrtf>:
 800b7f0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b7f4:	4770      	bx	lr

0800b7f6 <with_errnof>:
 800b7f6:	b513      	push	{r0, r1, r4, lr}
 800b7f8:	4604      	mov	r4, r0
 800b7fa:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b7fe:	f7fe fbcf 	bl	8009fa0 <__errno>
 800b802:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b806:	6004      	str	r4, [r0, #0]
 800b808:	b002      	add	sp, #8
 800b80a:	bd10      	pop	{r4, pc}

0800b80c <xflowf>:
 800b80c:	b130      	cbz	r0, 800b81c <xflowf+0x10>
 800b80e:	eef1 7a40 	vneg.f32	s15, s0
 800b812:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b816:	2022      	movs	r0, #34	; 0x22
 800b818:	f7ff bfed 	b.w	800b7f6 <with_errnof>
 800b81c:	eef0 7a40 	vmov.f32	s15, s0
 800b820:	e7f7      	b.n	800b812 <xflowf+0x6>
	...

0800b824 <__math_uflowf>:
 800b824:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b82c <__math_uflowf+0x8>
 800b828:	f7ff bff0 	b.w	800b80c <xflowf>
 800b82c:	10000000 	.word	0x10000000

0800b830 <__math_oflowf>:
 800b830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b838 <__math_oflowf+0x8>
 800b834:	f7ff bfea 	b.w	800b80c <xflowf>
 800b838:	70000000 	.word	0x70000000

0800b83c <fabsf>:
 800b83c:	ee10 3a10 	vmov	r3, s0
 800b840:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b844:	ee00 3a10 	vmov	s0, r3
 800b848:	4770      	bx	lr

0800b84a <finitef>:
 800b84a:	b082      	sub	sp, #8
 800b84c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b850:	9801      	ldr	r0, [sp, #4]
 800b852:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b856:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b85a:	bfac      	ite	ge
 800b85c:	2000      	movge	r0, #0
 800b85e:	2001      	movlt	r0, #1
 800b860:	b002      	add	sp, #8
 800b862:	4770      	bx	lr

0800b864 <scalbnf>:
 800b864:	ee10 3a10 	vmov	r3, s0
 800b868:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b86c:	d025      	beq.n	800b8ba <scalbnf+0x56>
 800b86e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b872:	d302      	bcc.n	800b87a <scalbnf+0x16>
 800b874:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b878:	4770      	bx	lr
 800b87a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b87e:	d122      	bne.n	800b8c6 <scalbnf+0x62>
 800b880:	4b2a      	ldr	r3, [pc, #168]	; (800b92c <scalbnf+0xc8>)
 800b882:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b930 <scalbnf+0xcc>
 800b886:	4298      	cmp	r0, r3
 800b888:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b88c:	db16      	blt.n	800b8bc <scalbnf+0x58>
 800b88e:	ee10 3a10 	vmov	r3, s0
 800b892:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b896:	3a19      	subs	r2, #25
 800b898:	4402      	add	r2, r0
 800b89a:	2afe      	cmp	r2, #254	; 0xfe
 800b89c:	dd15      	ble.n	800b8ca <scalbnf+0x66>
 800b89e:	ee10 3a10 	vmov	r3, s0
 800b8a2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b934 <scalbnf+0xd0>
 800b8a6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b938 <scalbnf+0xd4>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	eeb0 7a67 	vmov.f32	s14, s15
 800b8b0:	bfb8      	it	lt
 800b8b2:	eef0 7a66 	vmovlt.f32	s15, s13
 800b8b6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b8ba:	4770      	bx	lr
 800b8bc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b93c <scalbnf+0xd8>
 800b8c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b8c4:	4770      	bx	lr
 800b8c6:	0dd2      	lsrs	r2, r2, #23
 800b8c8:	e7e6      	b.n	800b898 <scalbnf+0x34>
 800b8ca:	2a00      	cmp	r2, #0
 800b8cc:	dd06      	ble.n	800b8dc <scalbnf+0x78>
 800b8ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b8d6:	ee00 3a10 	vmov	s0, r3
 800b8da:	4770      	bx	lr
 800b8dc:	f112 0f16 	cmn.w	r2, #22
 800b8e0:	da1a      	bge.n	800b918 <scalbnf+0xb4>
 800b8e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b8e6:	4298      	cmp	r0, r3
 800b8e8:	ee10 3a10 	vmov	r3, s0
 800b8ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8f0:	dd0a      	ble.n	800b908 <scalbnf+0xa4>
 800b8f2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b934 <scalbnf+0xd0>
 800b8f6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b938 <scalbnf+0xd4>
 800b8fa:	eef0 7a40 	vmov.f32	s15, s0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bf18      	it	ne
 800b902:	eeb0 0a47 	vmovne.f32	s0, s14
 800b906:	e7db      	b.n	800b8c0 <scalbnf+0x5c>
 800b908:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b93c <scalbnf+0xd8>
 800b90c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b940 <scalbnf+0xdc>
 800b910:	eef0 7a40 	vmov.f32	s15, s0
 800b914:	2b00      	cmp	r3, #0
 800b916:	e7f3      	b.n	800b900 <scalbnf+0x9c>
 800b918:	3219      	adds	r2, #25
 800b91a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b91e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b922:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b944 <scalbnf+0xe0>
 800b926:	ee07 3a10 	vmov	s14, r3
 800b92a:	e7c4      	b.n	800b8b6 <scalbnf+0x52>
 800b92c:	ffff3cb0 	.word	0xffff3cb0
 800b930:	4c000000 	.word	0x4c000000
 800b934:	7149f2ca 	.word	0x7149f2ca
 800b938:	f149f2ca 	.word	0xf149f2ca
 800b93c:	0da24260 	.word	0x0da24260
 800b940:	8da24260 	.word	0x8da24260
 800b944:	33000000 	.word	0x33000000

0800b948 <_init>:
 800b948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94a:	bf00      	nop
 800b94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94e:	bc08      	pop	{r3}
 800b950:	469e      	mov	lr, r3
 800b952:	4770      	bx	lr

0800b954 <_fini>:
 800b954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b956:	bf00      	nop
 800b958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b95a:	bc08      	pop	{r3}
 800b95c:	469e      	mov	lr, r3
 800b95e:	4770      	bx	lr
